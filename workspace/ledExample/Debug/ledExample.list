
C:\Users\Thomas\Documents\E-Falke\workspace\ledExample\Debug\ledExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f528  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800f6b0  0800f6b0  0001f6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f6bc  0800f6bc  0001f6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f6c0  0800f6c0  0001f6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  0800f6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  7 .bss          00000024  2000002c  2000002c  0002002c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000050  20000050  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000119f2  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033ae  00000000  00000000  00031a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000488  00000000  00000000  00034e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006f13  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006952  00000000  00000000  0003c19b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00042aed  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006280  00000000  00000000  00042b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00048df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000024  00000000  00000000  00048e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  00048e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f694 	.word	0x0800f694

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	0800f694 	.word	0x0800f694

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d038      	beq.n	800027e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000216:	0a1b      	lsrs	r3, r3, #8
 8000218:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	f1c3 0304 	rsb	r3, r3, #4
 8000220:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000222:	7b7a      	ldrb	r2, [r7, #13]
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	fa42 f303 	asr.w	r3, r2, r3
 800022a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	461a      	mov	r2, r3
 8000232:	7bbb      	ldrb	r3, [r7, #14]
 8000234:	fa02 f303 	lsl.w	r3, r2, r3
 8000238:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	789a      	ldrb	r2, [r3, #2]
 800023e:	7b7b      	ldrb	r3, [r7, #13]
 8000240:	4013      	ands	r3, r2
 8000242:	b2da      	uxtb	r2, r3
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	4313      	orrs	r3, r2
 8000248:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000250:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4413      	add	r3, r2
 8000258:	7bfa      	ldrb	r2, [r7, #15]
 800025a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025e:	4a14      	ldr	r2, [pc, #80]	; (80002b0 <NVIC_Init+0xc0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	095b      	lsrs	r3, r3, #5
 8000266:	b2db      	uxtb	r3, r3
 8000268:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f003 031f 	and.w	r3, r3, #31
 8000272:	2101      	movs	r1, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000278:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027c:	e00f      	b.n	800029e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027e:	490c      	ldr	r1, [pc, #48]	; (80002b0 <NVIC_Init+0xc0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	095b      	lsrs	r3, r3, #5
 8000286:	b2db      	uxtb	r3, r3
 8000288:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	f003 031f 	and.w	r3, r3, #31
 8000292:	2201      	movs	r2, #1
 8000294:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000296:	f100 0320 	add.w	r3, r0, #32
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80002be:	4907      	ldr	r1, [pc, #28]	; (80002dc <NVIC_SetVectorTable+0x28>)
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80002c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	608b      	str	r3, [r1, #8]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	460a      	mov	r2, r1
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	4613      	mov	r3, r2
 80002ee:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d006      	beq.n	8000304 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 80002f6:	490a      	ldr	r1, [pc, #40]	; (8000320 <NVIC_SystemLPConfig+0x40>)
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <NVIC_SystemLPConfig+0x40>)
 80002fa:	691a      	ldr	r2, [r3, #16]
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4313      	orrs	r3, r2
 8000300:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 8000302:	e006      	b.n	8000312 <NVIC_SystemLPConfig+0x32>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000304:	4906      	ldr	r1, [pc, #24]	; (8000320 <NVIC_SystemLPConfig+0x40>)
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <NVIC_SystemLPConfig+0x40>)
 8000308:	691a      	ldr	r2, [r3, #16]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	43db      	mvns	r3, r3
 800030e:	4013      	ands	r3, r2
 8000310:	610b      	str	r3, [r1, #16]
  }
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b04      	cmp	r3, #4
 8000330:	d106      	bne.n	8000340 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000332:	4a09      	ldr	r2, [pc, #36]	; (8000358 <SysTick_CLKSourceConfig+0x34>)
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <SysTick_CLKSourceConfig+0x34>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f043 0304 	orr.w	r3, r3, #4
 800033c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 800033e:	e005      	b.n	800034c <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <SysTick_CLKSourceConfig+0x34>)
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <SysTick_CLKSourceConfig+0x34>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f023 0304 	bic.w	r3, r3, #4
 800034a:	6013      	str	r3, [r2, #0]
  }
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000e010 	.word	0xe000e010

0800035c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000360:	2101      	movs	r1, #1
 8000362:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000366:	f009 fd25 	bl	8009db4 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800036a:	2100      	movs	r1, #0
 800036c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000370:	f009 fd20 	bl	8009db4 <RCC_APB2PeriphResetCmd>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}

08000378 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800039a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80003a6:	4313      	orrs	r3, r2
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	4313      	orrs	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <ADC_Init+0xa8>)
 80003be:	4013      	ands	r3, r2
 80003c0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003ca:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80003d0:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	795b      	ldrb	r3, [r3, #5]
 80003d6:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80003d8:	4313      	orrs	r3, r2
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	4313      	orrs	r3, r2
 80003de:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003f2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	7d1b      	ldrb	r3, [r3, #20]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	4313      	orrs	r3, r2
 8000400:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	051b      	lsls	r3, r3, #20
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	4313      	orrs	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000412:	bf00      	nop
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	c0fff7fd 	.word	0xc0fff7fd

08000424 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2200      	movs	r2, #0
 800043c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2201      	movs	r2, #1
 8000454:	751a      	strb	r2, [r3, #20]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop

08000464 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <ADC_CommonInit+0x48>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <ADC_CommonInit+0x4c>)
 800047a:	4013      	ands	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000486:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800048c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000492:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	4313      	orrs	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800049a:	4a04      	ldr	r2, [pc, #16]	; (80004ac <ADC_CommonInit+0x48>)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	6053      	str	r3, [r2, #4]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40012300 	.word	0x40012300
 80004b0:	fffc30e0 	.word	0xfffc30e0

080004b4 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d006      	beq.n	8000500 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f043 0201 	orr.w	r2, r3, #1
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80004fe:	e005      	b.n	800050c <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	f023 0201 	bic.w	r2, r3, #1
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	609a      	str	r2, [r3, #8]
  }
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000532:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000536:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	4313      	orrs	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	605a      	str	r2, [r3, #4]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
 8000560:	4613      	mov	r3, r2
 8000562:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000564:	887a      	ldrh	r2, [r7, #2]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800056a:	883a      	ldrh	r2, [r7, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f023 031f 	bic.w	r3, r3, #31
 8000598:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4313      	orrs	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	605a      	str	r2, [r3, #4]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <ADC_TempSensorVrefintCmd+0x38>)
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <ADC_TempSensorVrefintCmd+0x38>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005ce:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 80005d0:	e005      	b.n	80005de <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <ADC_TempSensorVrefintCmd+0x38>)
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <ADC_TempSensorVrefintCmd+0x38>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80005dc:	6053      	str	r3, [r2, #4]
  }
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40012300 	.word	0x40012300

080005f0 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <ADC_VBATCmd+0x38>)
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <ADC_VBATCmd+0x38>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060a:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
  }
}
 800060c:	e005      	b.n	800061a <ADC_VBATCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 800060e:	4a06      	ldr	r2, [pc, #24]	; (8000628 <ADC_VBATCmd+0x38>)
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <ADC_VBATCmd+0x38>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000618:	6053      	str	r3, [r2, #4]
  }
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40012300 	.word	0x40012300

0800062c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	4608      	mov	r0, r1
 8000636:	4611      	mov	r1, r2
 8000638:	461a      	mov	r2, r3
 800063a:	4603      	mov	r3, r0
 800063c:	70fb      	strb	r3, [r7, #3]
 800063e:	460b      	mov	r3, r1
 8000640:	70bb      	strb	r3, [r7, #2]
 8000642:	4613      	mov	r3, r2
 8000644:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	2b09      	cmp	r3, #9
 8000652:	d923      	bls.n	800069c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	f1a3 020a 	sub.w	r2, r3, #10
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	2207      	movs	r2, #7
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	43db      	mvns	r3, r3
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4013      	ands	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000678:	7879      	ldrb	r1, [r7, #1]
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	f1a3 020a 	sub.w	r2, r3, #10
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	4313      	orrs	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	e01e      	b.n	80006da <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80006a2:	78fa      	ldrb	r2, [r7, #3]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	2207      	movs	r2, #7
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	43db      	mvns	r3, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80006bc:	7879      	ldrb	r1, [r7, #1]
 80006be:	78fa      	ldrb	r2, [r7, #3]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80006da:	78bb      	ldrb	r3, [r7, #2]
 80006dc:	2b06      	cmp	r3, #6
 80006de:	d821      	bhi.n	8000724 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80006e6:	78bb      	ldrb	r3, [r7, #2]
 80006e8:	1e5a      	subs	r2, r3, #1
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	221f      	movs	r2, #31
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	4013      	ands	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000702:	78f9      	ldrb	r1, [r7, #3]
 8000704:	78bb      	ldrb	r3, [r7, #2]
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4313      	orrs	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000722:	e047      	b.n	80007b4 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000724:	78bb      	ldrb	r3, [r7, #2]
 8000726:	2b0c      	cmp	r3, #12
 8000728:	d821      	bhi.n	800076e <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000730:	78bb      	ldrb	r3, [r7, #2]
 8000732:	1fda      	subs	r2, r3, #7
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	221f      	movs	r2, #31
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	43db      	mvns	r3, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800074c:	78f9      	ldrb	r1, [r7, #3]
 800074e:	78bb      	ldrb	r3, [r7, #2]
 8000750:	1fda      	subs	r2, r3, #7
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800076c:	e022      	b.n	80007b4 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000772:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000774:	78bb      	ldrb	r3, [r7, #2]
 8000776:	f1a3 020d 	sub.w	r2, r3, #13
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	221f      	movs	r2, #31
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	43db      	mvns	r3, r3
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	4013      	ands	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000792:	78f9      	ldrb	r1, [r7, #3]
 8000794:	78bb      	ldrb	r3, [r7, #2]
 8000796:	f1a3 020d 	sub.w	r2, r3, #13
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e001      	b.n	8000802 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 800082e:	e005      	b.n	800083c <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
  }
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d006      	beq.n	8000868 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f043 0202 	orr.w	r2, r3, #2
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 8000866:	e005      	b.n	8000874 <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f023 0202 	bic.w	r2, r3, #2
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
  }
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008a0:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	035b      	lsls	r3, r3, #13
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	605a      	str	r2, [r3, #4]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 80008e2:	e005      	b.n	80008f0 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	605a      	str	r2, [r3, #4]
  }
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	b29b      	uxth	r3, r3
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <ADC_GetMultiModeConversionValue+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40012308 	.word	0x40012308

08000930 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 800094e:	e005      	b.n	800095c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]
  }
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000986:	e005      	b.n	8000994 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	609a      	str	r2, [r3, #8]
  }
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d006      	beq.n	80009be <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80009b0:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ba:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
  }
}
 80009bc:	e005      	b.n	80009ca <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009c8:	6053      	str	r3, [r2, #4]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40012300 	.word	0x40012300

080009dc <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4603      	mov	r3, r0
 80009ec:	70fb      	strb	r3, [r7, #3]
 80009ee:	460b      	mov	r3, r1
 80009f0:	70bb      	strb	r3, [r7, #2]
 80009f2:	4613      	mov	r3, r2
 80009f4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	2b09      	cmp	r3, #9
 8000a06:	d923      	bls.n	8000a50 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	f1a3 020a 	sub.w	r2, r3, #10
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8000a2c:	7879      	ldrb	r1, [r7, #1]
 8000a2e:	78fb      	ldrb	r3, [r7, #3]
 8000a30:	f1a3 020a 	sub.w	r2, r3, #10
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	e01e      	b.n	8000a8e <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000a56:	78fa      	ldrb	r2, [r7, #3]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2207      	movs	r2, #7
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000a70:	7879      	ldrb	r1, [r7, #1]
 8000a72:	78fa      	ldrb	r2, [r7, #3]
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a92:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	0d1b      	lsrs	r3, r3, #20
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	78ba      	ldrb	r2, [r7, #2]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	461a      	mov	r2, r3
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	221f      	movs	r2, #31
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000ac6:	78fa      	ldrb	r2, [r7, #3]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	78b9      	ldrb	r1, [r7, #2]
 8000ace:	1acb      	subs	r3, r1, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	460b      	mov	r3, r1
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000af2:	bf00      	nop
 8000af4:	371c      	adds	r7, #28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b18:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000b20:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	051b      	lsls	r3, r3, #20
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
 8000b50:	4613      	mov	r3, r2
 8000b52:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8000b5c:	78fa      	ldrb	r2, [r7, #3]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	461a      	mov	r2, r3
 8000b68:	883b      	ldrh	r3, [r7, #0]
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000b92:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	609a      	str	r2, [r3, #8]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000bca:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	609a      	str	r2, [r3, #8]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e001      	b.n	8000c2a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
  }
}
 8000c56:	e005      	b.n	8000c64 <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	605a      	str	r2, [r3, #4]
  }
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
  }
}
 8000c8e:	e005      	b.n	8000c9c <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	605a      	str	r2, [r3, #4]
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8000cbc:	78fa      	ldrb	r2, [r7, #3]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3328      	adds	r3, #40	; 0x28
 8000cc4:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b29b      	uxth	r3, r3
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000cfc:	787b      	ldrb	r3, [r7, #1]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000d0e:	e006      	b.n	8000d1e <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	401a      	ands	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e001      	b.n	8000d52 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4619      	mov	r1, r3
 8000daa:	2301      	movs	r3, #1
 8000dac:	408b      	lsls	r3, r1
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <ADC_GetITStatus+0x4a>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	75fb      	strb	r3, [r7, #23]
 8000dc8:	e001      	b.n	8000dce <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	0a1b      	lsrs	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	43da      	mvns	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
}                    
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <CAN_DeInit+0x44>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d10a      	bne.n	8000e2e <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000e1e:	f008 ffa9 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000e22:	2100      	movs	r1, #0
 8000e24:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000e28:	f008 ffa4 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 8000e2c:	e009      	b.n	8000e42 <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000e2e:	2101      	movs	r1, #1
 8000e30:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e34:	f008 ff9e 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e3e:	f008 ff99 	bl	8009d74 <RCC_APB1PeriphResetCmd>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40006400 	.word	0x40006400

08000e50 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f023 0202 	bic.w	r2, r3, #2
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000e7a:	e002      	b.n	8000e82 <CAN_Init+0x32>
  {
    wait_ack++;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <CAN_Init+0x48>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d1f1      	bne.n	8000e7c <CAN_Init+0x2c>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e09c      	b.n	8000fe4 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	799b      	ldrb	r3, [r3, #6]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e005      	b.n	8000ecc <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	79db      	ldrb	r3, [r3, #7]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d106      	bne.n	8000ee2 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e005      	b.n	8000eee <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	7a1b      	ldrb	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d106      	bne.n	8000f04 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f043 0220 	orr.w	r2, r3, #32
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e005      	b.n	8000f10 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 0220 	bic.w	r2, r3, #32
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	7a5b      	ldrb	r3, [r3, #9]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f043 0210 	orr.w	r2, r3, #16
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e005      	b.n	8000f32 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 0210 	bic.w	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	7a9b      	ldrb	r3, [r3, #10]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d106      	bne.n	8000f48 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f043 0208 	orr.w	r2, r3, #8
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e005      	b.n	8000f54 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f023 0208 	bic.w	r2, r3, #8
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	7adb      	ldrb	r3, [r3, #11]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d106      	bne.n	8000f6a <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f043 0204 	orr.w	r2, r3, #4
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e005      	b.n	8000f76 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f023 0204 	bic.w	r2, r3, #4
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	061b      	lsls	r3, r3, #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000f82:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	041b      	lsls	r3, r3, #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000f8a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	795b      	ldrb	r3, [r3, #5]
 8000f90:	051b      	lsls	r3, r3, #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000f92:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000f9a:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 0201 	bic.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000fb0:	e002      	b.n	8000fb8 <CAN_Init+0x168>
   {
     wait_ack++;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <CAN_Init+0x17e>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d1f1      	bne.n	8000fb2 <CAN_Init+0x162>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e001      	b.n	8000fe4 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7a9b      	ldrb	r3, [r3, #10]
 8001004:	461a      	mov	r2, r3
 8001006:	2301      	movs	r3, #1
 8001008:	4093      	lsls	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800100c:	4a56      	ldr	r2, [pc, #344]	; (8001168 <CAN_FilterInit+0x174>)
 800100e:	4b56      	ldr	r3, [pc, #344]	; (8001168 <CAN_FilterInit+0x174>)
 8001010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 800101c:	4952      	ldr	r1, [pc, #328]	; (8001168 <CAN_FilterInit+0x174>)
 800101e:	4b52      	ldr	r3, [pc, #328]	; (8001168 <CAN_FilterInit+0x174>)
 8001020:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	4013      	ands	r3, r2
 800102a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7b1b      	ldrb	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d125      	bne.n	8001082 <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8001036:	494c      	ldr	r1, [pc, #304]	; (8001168 <CAN_FilterInit+0x174>)
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <CAN_FilterInit+0x174>)
 800103a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	4013      	ands	r3, r2
 8001044:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001048:	4947      	ldr	r1, [pc, #284]	; (8001168 <CAN_FilterInit+0x174>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7a9b      	ldrb	r3, [r3, #10]
 800104e:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	88db      	ldrh	r3, [r3, #6]
 8001054:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	8852      	ldrh	r2, [r2, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800105a:	431a      	orrs	r2, r3
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800105c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8001060:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001064:	4940      	ldr	r1, [pc, #256]	; (8001168 <CAN_FilterInit+0x174>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7a9b      	ldrb	r3, [r3, #10]
 800106a:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	889b      	ldrh	r3, [r3, #4]
 8001070:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	8812      	ldrh	r2, [r2, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8001076:	431a      	orrs	r2, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001078:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7b1b      	ldrb	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d124      	bne.n	80010d4 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800108a:	4937      	ldr	r1, [pc, #220]	; (8001168 <CAN_FilterInit+0x174>)
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <CAN_FilterInit+0x174>)
 800108e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800109a:	4933      	ldr	r1, [pc, #204]	; (8001168 <CAN_FilterInit+0x174>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a9b      	ldrb	r3, [r3, #10]
 80010a0:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	8852      	ldrh	r2, [r2, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80010ac:	431a      	orrs	r2, r3
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80010ae:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80010b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80010b6:	492c      	ldr	r1, [pc, #176]	; (8001168 <CAN_FilterInit+0x174>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7a9b      	ldrb	r3, [r3, #10]
 80010bc:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	889b      	ldrh	r3, [r3, #4]
 80010c2:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	88d2      	ldrh	r2, [r2, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80010c8:	431a      	orrs	r2, r3
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80010ca:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7adb      	ldrb	r3, [r3, #11]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d109      	bne.n	80010f0 <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80010dc:	4922      	ldr	r1, [pc, #136]	; (8001168 <CAN_FilterInit+0x174>)
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <CAN_FilterInit+0x174>)
 80010e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 80010ee:	e007      	b.n	8001100 <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80010f0:	491d      	ldr	r1, [pc, #116]	; (8001168 <CAN_FilterInit+0x174>)
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <CAN_FilterInit+0x174>)
 80010f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d108      	bne.n	800111a <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8001108:	4917      	ldr	r1, [pc, #92]	; (8001168 <CAN_FilterInit+0x174>)
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <CAN_FilterInit+0x174>)
 800110c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	4013      	ands	r3, r2
 8001116:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	891b      	ldrh	r3, [r3, #8]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d107      	bne.n	8001132 <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8001122:	4911      	ldr	r1, [pc, #68]	; (8001168 <CAN_FilterInit+0x174>)
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <CAN_FilterInit+0x174>)
 8001126:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b5b      	ldrb	r3, [r3, #13]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 800113a:	490b      	ldr	r1, [pc, #44]	; (8001168 <CAN_FilterInit+0x174>)
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <CAN_FilterInit+0x174>)
 800113e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <CAN_FilterInit+0x174>)
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <CAN_FilterInit+0x174>)
 800114e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40006400 	.word	0x40006400

0800116c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2202      	movs	r2, #2
 80011ae:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	801a      	strh	r2, [r3, #0]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 80011d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 80011e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80011ea:	f023 030e 	bic.w	r3, r3, #14
 80011ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 80011f2:	490b      	ldr	r1, [pc, #44]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 80011f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	4313      	orrs	r3, r2
 8001200:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <CAN_SlaveStartBank+0x5c>)
 8001208:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40006400 	.word	0x40006400

08001224 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
 8001242:	e005      	b.n	8001250 <CAN_DBGFreeze+0x2c>
    CANx->MCR |= MCR_DBF;
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]
  }
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01e      	beq.n	80012ac <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001280:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80012a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
 80012aa:	e01d      	b.n	80012e8 <CAN_TTComModeCmd+0x8c>
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80012be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80012ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80012de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <CAN_Transmit+0x20>
  {
    transmit_mailbox = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e013      	b.n	800133c <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <CAN_Transmit+0x32>
  {
    transmit_mailbox = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e00a      	b.n	800133c <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <CAN_Transmit+0x44>
  {
    transmit_mailbox = 2;
 8001332:	2302      	movs	r3, #2
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	e001      	b.n	800133c <CAN_Transmit+0x48>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8001338:	2304      	movs	r3, #4
 800133a:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b04      	cmp	r3, #4
 8001340:	f000 809c 	beq.w	800147c <CAN_Transmit+0x188>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	3218      	adds	r2, #24
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	440a      	add	r2, r1
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	f002 0201 	and.w	r2, r2, #1
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	3318      	adds	r3, #24
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	440b      	add	r3, r1
 800135e:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	7a1b      	ldrb	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d113      	bne.n	8001390 <CAN_Transmit+0x9c>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	3218      	adds	r2, #24
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	440a      	add	r2, r1
 8001374:	6811      	ldr	r1, [r2, #0]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	0552      	lsls	r2, r2, #21
                                                  TxMessage->RTR);
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	7a40      	ldrb	r0, [r0, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001380:	4302      	orrs	r2, r0
 8001382:	430a      	orrs	r2, r1
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	3318      	adds	r3, #24
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	440b      	add	r3, r1
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e015      	b.n	80013bc <CAN_Transmit+0xc8>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	3218      	adds	r2, #24
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	440a      	add	r2, r1
 800139c:	6811      	ldr	r1, [r2, #0]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	6852      	ldr	r2, [r2, #4]
 80013a2:	00d2      	lsls	r2, r2, #3
                                                  TxMessage->IDE | \
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	7a00      	ldrb	r0, [r0, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80013a8:	4302      	orrs	r2, r0
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	7a40      	ldrb	r0, [r0, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 80013ae:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80013b0:	430a      	orrs	r2, r1
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	3318      	adds	r3, #24
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	440b      	add	r3, r1
 80013ba:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	7a9b      	ldrb	r3, [r3, #10]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	3218      	adds	r2, #24
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	440a      	add	r2, r1
 80013d6:	3204      	adds	r2, #4
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	f022 020f 	bic.w	r2, r2, #15
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	3318      	adds	r3, #24
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	440b      	add	r3, r1
 80013e6:	3304      	adds	r3, #4
 80013e8:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	3218      	adds	r2, #24
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	440a      	add	r2, r1
 80013f6:	3204      	adds	r2, #4
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	7a89      	ldrb	r1, [r1, #10]
 80013fe:	430a      	orrs	r2, r1
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	3318      	adds	r3, #24
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	440b      	add	r3, r1
 8001408:	3304      	adds	r3, #4
 800140a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	7b92      	ldrb	r2, [r2, #14]
 8001412:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	7b52      	ldrb	r2, [r2, #13]
 8001418:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800141a:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	7b12      	ldrb	r2, [r2, #12]
 8001420:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001422:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	7ac9      	ldrb	r1, [r1, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001428:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	440b      	add	r3, r1
 8001430:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001434:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	7c92      	ldrb	r2, [r2, #18]
 800143c:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	7c52      	ldrb	r2, [r2, #17]
 8001442:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001444:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	7c12      	ldrb	r2, [r2, #16]
 800144a:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800144c:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	7bc9      	ldrb	r1, [r1, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001452:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	440b      	add	r3, r1
 800145a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800145e:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	3218      	adds	r2, #24
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	440a      	add	r2, r1
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	3318      	adds	r3, #24
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d009      	beq.n	80014b6 <CAN_TransmitStatus+0x2a>
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d00d      	beq.n	80014c2 <CAN_TransmitStatus+0x36>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d111      	bne.n	80014ce <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <CAN_TransmitStatus+0xbc>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
      break;
 80014b4:	e00e      	b.n	80014d4 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <CAN_TransmitStatus+0xc0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
      break;
 80014c0:	e008      	b.n	80014d4 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <CAN_TransmitStatus+0xc4>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
      break;
 80014cc:	e002      	b.n	80014d4 <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
      break;
 80014d2:	bf00      	nop
  }
  switch (state)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <CAN_TransmitStatus+0xc8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d01b      	beq.n	8001514 <CAN_TransmitStatus+0x88>
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <CAN_TransmitStatus+0xc8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d808      	bhi.n	80014f4 <CAN_TransmitStatus+0x68>
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <CAN_TransmitStatus+0xcc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d012      	beq.n	800150e <CAN_TransmitStatus+0x82>
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <CAN_TransmitStatus+0xbc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d018      	beq.n	8001520 <CAN_TransmitStatus+0x94>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00a      	beq.n	8001508 <CAN_TransmitStatus+0x7c>
 80014f2:	e01e      	b.n	8001532 <CAN_TransmitStatus+0xa6>
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <CAN_TransmitStatus+0xd0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00f      	beq.n	800151a <CAN_TransmitStatus+0x8e>
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <CAN_TransmitStatus+0xc4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d015      	beq.n	800152c <CAN_TransmitStatus+0xa0>
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <CAN_TransmitStatus+0xc0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00f      	beq.n	8001526 <CAN_TransmitStatus+0x9a>
 8001506:	e014      	b.n	8001532 <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8001508:	2302      	movs	r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
      break;
 800150c:	e014      	b.n	8001538 <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
      break;
 8001512:	e011      	b.n	8001538 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
      break;
 8001518:	e00e      	b.n	8001538 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
      break;
 800151e:	e00b      	b.n	8001538 <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8001520:	2301      	movs	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
      break;
 8001524:	e008      	b.n	8001538 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      break;
 800152a:	e005      	b.n	8001538 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 800152c:	2301      	movs	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      break;
 8001530:	e002      	b.n	8001538 <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
      break;
 8001536:	bf00      	nop
  }
  return (uint8_t) state;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	b2db      	uxtb	r3, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	04000003 	.word	0x04000003
 800154c:	08000300 	.word	0x08000300
 8001550:	10030000 	.word	0x10030000
 8001554:	08000100 	.word	0x08000100
 8001558:	04000001 	.word	0x04000001
 800155c:	10010000 	.word	0x10010000

08001560 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d00b      	beq.n	800158a <CAN_CancelTransmit+0x2a>
 8001572:	2b02      	cmp	r3, #2
 8001574:	d010      	beq.n	8001598 <CAN_CancelTransmit+0x38>
 8001576:	2b00      	cmp	r3, #0
 8001578:	d000      	beq.n	800157c <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 800157a:	e014      	b.n	80015a6 <CAN_CancelTransmit+0x46>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
      break;
 8001588:	e00d      	b.n	80015a6 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	609a      	str	r2, [r3, #8]
      break;
 8001596:	e006      	b.n	80015a6 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
      break;
 80015a4:	bf00      	nop
    default:
      break;
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	460b      	mov	r3, r1
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	331b      	adds	r3, #27
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7a1b      	ldrb	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	331b      	adds	r3, #27
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	0d5a      	lsrs	r2, r3, #21
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e008      	b.n	8001608 <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	331b      	adds	r3, #27
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001608:	7afb      	ldrb	r3, [r7, #11]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	331b      	adds	r3, #27
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	331b      	adds	r3, #27
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	4413      	add	r3, r2
 800162a:	3304      	adds	r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	331b      	adds	r3, #27
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	3304      	adds	r3, #4
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	b2da      	uxtb	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800167a:	7afb      	ldrb	r3, [r7, #11]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	b2da      	uxtb	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001690:	7afb      	ldrb	r3, [r7, #11]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	4413      	add	r3, r2
 8001698:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0e1b      	lsrs	r3, r3, #24
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80016ba:	7afb      	ldrb	r3, [r7, #11]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80016d0:	7afb      	ldrb	r3, [r7, #11]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	0c1b      	lsrs	r3, r3, #16
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0e1b      	lsrs	r3, r3, #24
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <CAN_Receive+0x15c>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f043 0220 	orr.w	r2, r3, #32
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 800170e:	e005      	b.n	800171c <CAN_Receive+0x168>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	611a      	str	r2, [r3, #16]
  }
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8001746:	e005      	b.n	8001754 <CAN_FIFORelease+0x2c>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f043 0220 	orr.w	r2, r3, #32
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
  }
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e00b      	b.n	800179c <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d106      	bne.n	8001798 <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e001      	b.n	800179c <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d120      	bne.n	800180a <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 0303 	bic.w	r3, r3, #3
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80017d8:	e002      	b.n	80017e0 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d002      	beq.n	80017f2 <CAN_OperatingModeRequest+0x46>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f3      	bne.n	80017da <CAN_OperatingModeRequest+0x2e>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d002      	beq.n	8001804 <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	e04a      	b.n	800189a <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e047      	b.n	800189a <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d11e      	bne.n	800184e <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 0203 	bic.w	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800181c:	e002      	b.n	8001824 <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3b01      	subs	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <CAN_OperatingModeRequest+0x8a>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f3      	bne.n	800181e <CAN_OperatingModeRequest+0x72>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e028      	b.n	800189a <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e025      	b.n	800189a <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d120      	bne.n	8001896 <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 0303 	bic.w	r3, r3, #3
 800185c:	f043 0202 	orr.w	r2, r3, #2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8001864:	e002      	b.n	800186c <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3b01      	subs	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d002      	beq.n	800187e <CAN_OperatingModeRequest+0xd2>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f3      	bne.n	8001866 <CAN_OperatingModeRequest+0xba>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d002      	beq.n	8001890 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	e004      	b.n	800189a <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e001      	b.n	800189a <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 0303 	bic.w	r3, r3, #3
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d101      	bne.n	80018d4 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 80018f2:	2300      	movs	r3, #0
 80018f4:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 0202 	bic.w	r2, r3, #2
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8001902:	e002      	b.n	800190a <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3b01      	subs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <CAN_WakeUp+0x38>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f3      	bne.n	8001904 <CAN_WakeUp+0x20>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8001928:	2301      	movs	r3, #1
 800192a:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800192c:	7afb      	ldrb	r3, [r7, #11]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001978:	0e1b      	lsrs	r3, r3, #24
 800197a:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop

0800198c <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 80019d4:	e006      	b.n	80019e4 <CAN_ITConfig+0x30>
    CANx->IER |= CAN_IT;
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	43db      	mvns	r3, r3
 80019de:	401a      	ands	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	615a      	str	r2, [r3, #20]
  }
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699a      	ldr	r2, [r3, #24]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e048      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e045      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4013      	ands	r3, r2
 8001a36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e035      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e032      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00d      	beq.n	8001a70 <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e022      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e01f      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00d      	beq.n	8001a96 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	4013      	ands	r3, r2
 8001a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	e00f      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e00c      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e001      	b.n	8001ab0 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <CAN_ClearFlag+0x70>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d103      	bne.n	8001ade <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8001adc:	e021      	b.n	8001b22 <CAN_ClearFlag+0x62>
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ae4:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <CAN_ClearFlag+0x38>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	60da      	str	r2, [r3, #12]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8001af6:	e014      	b.n	8001b22 <CAN_ClearFlag+0x62>
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <CAN_ClearFlag+0x4a>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	611a      	str	r2, [r3, #16]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8001b08:	e00b      	b.n	8001b22 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <CAN_ClearFlag+0x5c>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	609a      	str	r2, [r3, #8]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8001b1a:	e002      	b.n	8001b22 <CAN_ClearFlag+0x62>
      CANx->TSR = (uint32_t)(flagtmp);
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	30f00070 	.word	0x30f00070

08001b34 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80b2 	beq.w	8001cb4 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	d062      	beq.n	8001c1c <CAN_GetITStatus+0xe8>
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d80f      	bhi.n	8001b7a <CAN_GetITStatus+0x46>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d03a      	beq.n	8001bd4 <CAN_GetITStatus+0xa0>
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d804      	bhi.n	8001b6c <CAN_GetITStatus+0x38>
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d024      	beq.n	8001bb0 <CAN_GetITStatus+0x7c>
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d02b      	beq.n	8001bc2 <CAN_GetITStatus+0x8e>
 8001b6a:	e09f      	b.n	8001cac <CAN_GetITStatus+0x178>
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d043      	beq.n	8001bf8 <CAN_GetITStatus+0xc4>
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d04a      	beq.n	8001c0a <CAN_GetITStatus+0xd6>
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d036      	beq.n	8001be6 <CAN_GetITStatus+0xb2>
 8001b78:	e098      	b.n	8001cac <CAN_GetITStatus+0x178>
 8001b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b7e:	f000 8083 	beq.w	8001c88 <CAN_GetITStatus+0x154>
 8001b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b86:	d809      	bhi.n	8001b9c <CAN_GetITStatus+0x68>
 8001b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8c:	d06a      	beq.n	8001c64 <CAN_GetITStatus+0x130>
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d070      	beq.n	8001c76 <CAN_GetITStatus+0x142>
 8001b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b98:	d05b      	beq.n	8001c52 <CAN_GetITStatus+0x11e>
 8001b9a:	e087      	b.n	8001cac <CAN_GetITStatus+0x178>
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d045      	beq.n	8001c2e <CAN_GetITStatus+0xfa>
 8001ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ba6:	d04b      	beq.n	8001c40 <CAN_GetITStatus+0x10c>
 8001ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bac:	d075      	beq.n	8001c9a <CAN_GetITStatus+0x166>
 8001bae:	e07d      	b.n	8001cac <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4943      	ldr	r1, [pc, #268]	; (8001cc4 <CAN_GetITStatus+0x190>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f8f6 	bl	8001da8 <CheckITStatus>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
        break;
 8001bc0:	e07a      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f8ed 	bl	8001da8 <CheckITStatus>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8001bd2:	e071      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2108      	movs	r1, #8
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f8e4 	bl	8001da8 <CheckITStatus>
 8001be0:	4603      	mov	r3, r0
 8001be2:	73fb      	strb	r3, [r7, #15]
        break;
 8001be4:	e068      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2110      	movs	r1, #16
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f8db 	bl	8001da8 <CheckITStatus>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8001bf6:	e05f      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f8d2 	bl	8001da8 <CheckITStatus>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
        break;
 8001c08:	e056      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2108      	movs	r1, #8
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 f8c9 	bl	8001da8 <CheckITStatus>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
        break;
 8001c1a:	e04d      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2110      	movs	r1, #16
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f8c0 	bl	8001da8 <CheckITStatus>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
        break;
 8001c2c:	e044      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2108      	movs	r1, #8
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f8b7 	bl	8001da8 <CheckITStatus>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8001c3e:	e03b      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2110      	movs	r1, #16
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f8ae 	bl	8001da8 <CheckITStatus>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
        break;
 8001c50:	e032      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f8a5 	bl	8001da8 <CheckITStatus>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
        break;
 8001c62:	e029      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f89c 	bl	8001da8 <CheckITStatus>
 8001c70:	4603      	mov	r3, r0
 8001c72:	73fb      	strb	r3, [r7, #15]
        break;
 8001c74:	e020      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f893 	bl	8001da8 <CheckITStatus>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
        break;
 8001c86:	e017      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2170      	movs	r1, #112	; 0x70
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f88a 	bl	8001da8 <CheckITStatus>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]
        break;
 8001c98:	e00e      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f881 	bl	8001da8 <CheckITStatus>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8001caa:	e005      	b.n	8001cb8 <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
        break;
 8001cb0:	bf00      	nop
 8001cb2:	e001      	b.n	8001cb8 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	00010101 	.word	0x00010101

08001cc8 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d043      	beq.n	8001d62 <CAN_ClearITPendingBit+0x9a>
 8001cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cde:	d80d      	bhi.n	8001cfc <CAN_ClearITPendingBit+0x34>
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d02a      	beq.n	8001d3a <CAN_ClearITPendingBit+0x72>
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d804      	bhi.n	8001cf2 <CAN_ClearITPendingBit+0x2a>
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d01e      	beq.n	8001d2a <CAN_ClearITPendingBit+0x62>
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d020      	beq.n	8001d32 <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001cf0:	e051      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d025      	beq.n	8001d42 <CAN_ClearITPendingBit+0x7a>
 8001cf6:	2b40      	cmp	r3, #64	; 0x40
 8001cf8:	d027      	beq.n	8001d4a <CAN_ClearITPendingBit+0x82>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001cfa:	e04c      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d00:	d03b      	beq.n	8001d7a <CAN_ClearITPendingBit+0xb2>
 8001d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d06:	d806      	bhi.n	8001d16 <CAN_ClearITPendingBit+0x4e>
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0c:	d02d      	beq.n	8001d6a <CAN_ClearITPendingBit+0xa2>
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d02e      	beq.n	8001d72 <CAN_ClearITPendingBit+0xaa>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001d14:	e03f      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d01a      	beq.n	8001d52 <CAN_ClearITPendingBit+0x8a>
 8001d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d20:	d01b      	beq.n	8001d5a <CAN_ClearITPendingBit+0x92>
 8001d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d26:	d02f      	beq.n	8001d88 <CAN_ClearITPendingBit+0xc0>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001d28:	e035      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <CAN_ClearITPendingBit+0xdc>)
 8001d2e:	609a      	str	r2, [r3, #8]
      break;
 8001d30:	e031      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2208      	movs	r2, #8
 8001d36:	60da      	str	r2, [r3, #12]
      break;
 8001d38:	e02d      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	60da      	str	r2, [r3, #12]
      break;
 8001d40:	e029      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2208      	movs	r2, #8
 8001d46:	611a      	str	r2, [r3, #16]
      break;
 8001d48:	e025      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	611a      	str	r2, [r3, #16]
      break;
 8001d50:	e021      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2208      	movs	r2, #8
 8001d56:	605a      	str	r2, [r3, #4]
      break;
 8001d58:	e01d      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	605a      	str	r2, [r3, #4]
      break;
 8001d60:	e019      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2204      	movs	r2, #4
 8001d66:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8001d68:	e015      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8001d70:	e011      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8001d78:	e00d      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2204      	movs	r2, #4
 8001d84:	605a      	str	r2, [r3, #4]
      break;
 8001d86:	e006      	b.n	8001d96 <CAN_ClearITPendingBit+0xce>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8001d94:	bf00      	nop
    default:
       break;
   }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	00010101 	.word	0x00010101

08001da8 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <CRC_ResetDR+0x14>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	609a      	str	r2, [r3, #8]
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40023000 	.word	0x40023000

08001df0 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8001df8:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <CRC_CalcCRC+0x20>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  
  return (CRC->DR);
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <CRC_CalcCRC+0x20>)
 8001e00:	681b      	ldr	r3, [r3, #0]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023000 	.word	0x40023000

08001e14 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e009      	b.n	8001e3c <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 8001e28:	490a      	ldr	r1, [pc, #40]	; (8001e54 <CRC_CalcBlockCRC+0x40>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	600b      	str	r3, [r1, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3f1      	bcc.n	8001e28 <CRC_CalcBlockCRC+0x14>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <CRC_CalcBlockCRC+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40023000 	.word	0x40023000

08001e58 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <CRC_GetCRC+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023000 	.word	0x40023000

08001e70 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <CRC_SetIDRegister+0x1c>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	7113      	strb	r3, [r2, #4]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40023000 	.word	0x40023000

08001e90 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <CRC_GetIDRegister+0x14>)
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40023000 	.word	0x40023000

08001ea8 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8001eac:	2101      	movs	r1, #1
 8001eae:	2010      	movs	r0, #16
 8001eb0:	f007 ff20 	bl	8009cf4 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	f007 ff1c 	bl	8009cf4 <RCC_AHB2PeriphResetCmd>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <CRYP_Init+0xa0>)
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <CRYP_Init+0xa0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ed2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001ed6:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8001ed8:	4921      	ldr	r1, [pc, #132]	; (8001f60 <CRYP_Init+0xa0>)
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <CRYP_Init+0xa0>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <CRYP_Init+0xa0>)
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <CRYP_Init+0xa0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ef0:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8001ef2:	491b      	ldr	r1, [pc, #108]	; (8001f60 <CRYP_Init+0xa0>)
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <CRYP_Init+0xa0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d018      	beq.n	8001f3a <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d014      	beq.n	8001f3a <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d010      	beq.n	8001f3a <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8001f1c:	2b18      	cmp	r3, #24
 8001f1e:	d00c      	beq.n	8001f3a <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <CRYP_Init+0xa0>)
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <CRYP_Init+0xa0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2a:	6013      	str	r3, [r2, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <CRYP_Init+0xa0>)
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <CRYP_Init+0xa0>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <CRYP_Init+0xa0>)
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <CRYP_Init+0xa0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8001f46:	4906      	ldr	r1, [pc, #24]	; (8001f60 <CRYP_Init+0xa0>)
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <CRYP_Init+0xa0>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	50060000 	.word	0x50060000

08001f64 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6213      	str	r3, [r2, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8001fa0:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	6253      	str	r3, [r2, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	6293      	str	r3, [r2, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	6313      	str	r3, [r2, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8001fc0:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	6353      	str	r3, [r2, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	6393      	str	r3, [r2, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <CRYP_KeyInit+0x54>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	50060000 	.word	0x50060000

08001fe8 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	61da      	str	r2, [r3, #28]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <CRYP_IVInit+0x34>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <CRYP_IVInit+0x34>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	6453      	str	r3, [r2, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <CRYP_IVInit+0x34>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	6493      	str	r3, [r2, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <CRYP_IVInit+0x34>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	50060000 	.word	0x50060000

08002064 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <CRYP_PhaseConfig>:
  *            @arg CRYP_Phase_Payload: Payload phase
  *            @arg CRYP_Phase_Final: Final phase 
  * @retval None
  */
void CRYP_PhaseConfig(uint32_t CRYP_Phase)
{ uint32_t tempcr = 0;
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_CRYP_PHASE(CRYP_Phase));

  /* Get the CR register */
  tempcr = CRYP->CR;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <CRYP_PhaseConfig+0x34>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the phase configuration bits: GCMP_CCMPH */
  tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020a8:	60fb      	str	r3, [r7, #12]
  /* Set the selected phase */
  tempcr |= (uint32_t)CRYP_Phase;
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Set the CR register */ 
  CRYP->CR = tempcr;    
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <CRYP_PhaseConfig+0x34>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	50060000 	.word	0x50060000

080020c8 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <CRYP_FIFOFlush+0x1c>)
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <CRYP_FIFOFlush+0x1c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	50060000 	.word	0x50060000

080020e8 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <CRYP_Cmd+0x1e>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80020f8:	4a09      	ldr	r2, [pc, #36]	; (8002120 <CRYP_Cmd+0x38>)
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <CRYP_Cmd+0x38>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
  }
}
 8002104:	e005      	b.n	8002112 <CRYP_Cmd+0x2a>
    CRYP->CR |= CRYP_CR_CRYPEN;
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8002106:	4a06      	ldr	r2, [pc, #24]	; (8002120 <CRYP_Cmd+0x38>)
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <CRYP_Cmd+0x38>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002110:	6013      	str	r3, [r2, #0]
  }
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	50060000 	.word	0x50060000

08002124 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <CRYP_DataIn+0x1c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6093      	str	r3, [r2, #8]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	50060000 	.word	0x50060000

08002144 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <CRYP_DataOut+0x14>)
 800214a:	68db      	ldr	r3, [r3, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	50060000 	.word	0x50060000

0800215c <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 800216e:	2300      	movs	r3, #0
 8002170:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8002172:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002174:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6113      	str	r3, [r2, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 800217e:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <CRYP_SaveContext+0x34>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 800218a:	2311      	movs	r3, #17
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e001      	b.n	8002194 <CRYP_SaveContext+0x38>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8002190:	2315      	movs	r3, #21
 8002192:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4013      	ands	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
    timeout++;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d002      	beq.n	80021b4 <CRYP_SaveContext+0x58>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d1ef      	bne.n	8002194 <CRYP_SaveContext+0x38>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d002      	beq.n	80021c6 <CRYP_SaveContext+0x6a>
  {
    status = ERROR;
 80021c0:	2300      	movs	r3, #0
 80021c2:	74fb      	strb	r3, [r7, #19]
 80021c4:	e087      	b.n	80022d6 <CRYP_SaveContext+0x17a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 80021c6:	4a47      	ldr	r2, [pc, #284]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021c8:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f023 0302 	bic.w	r3, r3, #2
 80021d0:	6113      	str	r3, [r2, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80021d2:	4a44      	ldr	r2, [pc, #272]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021dc:	6013      	str	r3, [r2, #0]

    /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b41      	ldr	r3, [pc, #260]	; (80022e8 <CRYP_SaveContext+0x18c>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
                                                      CRYP_CR_DATATYPE |
                                                      CRYP_CR_ALGOMODE |
                                                      CRYP_CR_ALGODIR);

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <CRYP_SaveContext+0x188>)
 80021fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8002202:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the content of context swap registers */
    CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <CRYP_SaveContext+0x188>)
 800224c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	635a      	str	r2, [r3, #52]	; 0x34
    CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
    CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <CRYP_SaveContext+0x188>)
 800225c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	63da      	str	r2, [r3, #60]	; 0x3c
    CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002264:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <CRYP_SaveContext+0x188>)
 800226c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
    CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002274:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	649a      	str	r2, [r3, #72]	; 0x48
    CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <CRYP_SaveContext+0x188>)
 800227c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	64da      	str	r2, [r3, #76]	; 0x4c
    CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002284:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	651a      	str	r2, [r3, #80]	; 0x50
    
    CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <CRYP_SaveContext+0x188>)
 800228c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <CRYP_SaveContext+0x188>)
 8002294:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	; 0x58
    CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <CRYP_SaveContext+0x188>)
 800229c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	65da      	str	r2, [r3, #92]	; 0x5c
    CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <CRYP_SaveContext+0x188>)
 80022a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60
    CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <CRYP_SaveContext+0x188>)
 80022ac:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	665a      	str	r2, [r3, #100]	; 0x64
    CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <CRYP_SaveContext+0x188>)
 80022b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	669a      	str	r2, [r3, #104]	; 0x68
    CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <CRYP_SaveContext+0x188>)
 80022c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	66da      	str	r2, [r3, #108]	; 0x6c
    CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <CRYP_SaveContext+0x188>)
 80022ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	671a      	str	r2, [r3, #112]	; 0x70
    
   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 80022d2:	2301      	movs	r3, #1
 80022d4:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	50060000 	.word	0x50060000
 80022e8:	000b03fc 	.word	0x000b03fc

080022ec <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 80022f4:	4a41      	ldr	r2, [pc, #260]	; (80023fc <CRYP_RestoreContext+0x110>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6013      	str	r3, [r2, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 80022fc:	4a3f      	ldr	r2, [pc, #252]	; (80023fc <CRYP_RestoreContext+0x110>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	6213      	str	r3, [r2, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8002304:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	6253      	str	r3, [r2, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 800230c:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <CRYP_RestoreContext+0x110>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	6293      	str	r3, [r2, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8002314:	4a39      	ldr	r2, [pc, #228]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	62d3      	str	r3, [r2, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 800231c:	4a37      	ldr	r2, [pc, #220]	; (80023fc <CRYP_RestoreContext+0x110>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	6313      	str	r3, [r2, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8002324:	4a35      	ldr	r2, [pc, #212]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	6353      	str	r3, [r2, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 800232c:	4a33      	ldr	r2, [pc, #204]	; (80023fc <CRYP_RestoreContext+0x110>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	6393      	str	r3, [r2, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8002334:	4a31      	ldr	r2, [pc, #196]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 800233c:	4a2f      	ldr	r2, [pc, #188]	; (80023fc <CRYP_RestoreContext+0x110>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	6413      	str	r3, [r2, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8002344:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	6453      	str	r3, [r2, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 800234c:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <CRYP_RestoreContext+0x110>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	6493      	str	r3, [r2, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Restore the content of context swap registers */
  CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 800235c:	4a27      	ldr	r2, [pc, #156]	; (80023fc <CRYP_RestoreContext+0x110>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	6513      	str	r3, [r2, #80]	; 0x50
  CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 8002364:	4a25      	ldr	r2, [pc, #148]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	6553      	str	r3, [r2, #84]	; 0x54
  CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 800236c:	4a23      	ldr	r2, [pc, #140]	; (80023fc <CRYP_RestoreContext+0x110>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	6593      	str	r3, [r2, #88]	; 0x58
  CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 8002374:	4a21      	ldr	r2, [pc, #132]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	65d3      	str	r3, [r2, #92]	; 0x5c
  CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <CRYP_RestoreContext+0x110>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	6613      	str	r3, [r2, #96]	; 0x60
  CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	6653      	str	r3, [r2, #100]	; 0x64
  CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <CRYP_RestoreContext+0x110>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	6693      	str	r3, [r2, #104]	; 0x68
  CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <CRYP_RestoreContext+0x110>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	66d3      	str	r3, [r2, #108]	; 0x6c
  
  CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <CRYP_RestoreContext+0x110>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
  CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	6753      	str	r3, [r2, #116]	; 0x74
  CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	6793      	str	r3, [r2, #120]	; 0x78
  CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	67d3      	str	r3, [r2, #124]	; 0x7c
  CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 80023c6:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 80023da:	4a08      	ldr	r2, [pc, #32]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80023e4:	4a05      	ldr	r2, [pc, #20]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <CRYP_RestoreContext+0x110>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	50060000 	.word	0x50060000

08002400 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	460a      	mov	r2, r1
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	4613      	mov	r3, r2
 800240e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <CRYP_DMACmd+0x24>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <CRYP_DMACmd+0x40>)
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <CRYP_DMACmd+0x40>)
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	4313      	orrs	r3, r2
 8002420:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
  }
}
 8002422:	e007      	b.n	8002434 <CRYP_DMACmd+0x34>
    CRYP->DMACR |= CRYP_DMAReq;
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8002424:	4906      	ldr	r1, [pc, #24]	; (8002440 <CRYP_DMACmd+0x40>)
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <CRYP_DMACmd+0x40>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	43d2      	mvns	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	4013      	ands	r3, r2
 8002432:	610b      	str	r3, [r1, #16]
  }
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	50060000 	.word	0x50060000

08002444 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	460a      	mov	r2, r1
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	4613      	mov	r3, r2
 8002452:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002454:	79bb      	ldrb	r3, [r7, #6]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <CRYP_ITConfig+0x24>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 800245a:	490a      	ldr	r1, [pc, #40]	; (8002484 <CRYP_ITConfig+0x40>)
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <CRYP_ITConfig+0x40>)
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4313      	orrs	r3, r2
 8002464:	614b      	str	r3, [r1, #20]
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
  }
}
 8002466:	e007      	b.n	8002478 <CRYP_ITConfig+0x34>
    CRYP->IMSCR |= CRYP_IT;
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8002468:	4906      	ldr	r1, [pc, #24]	; (8002484 <CRYP_ITConfig+0x40>)
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <CRYP_ITConfig+0x40>)
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	79fa      	ldrb	r2, [r7, #7]
 8002470:	43d2      	mvns	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4013      	ands	r3, r2
 8002476:	614b      	str	r3, [r1, #20]
  }
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	50060000 	.word	0x50060000

08002488 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <CRYP_GetITStatus+0x34>)
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <CRYP_GetITStatus+0x20>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e001      	b.n	80024ac <CRYP_GetITStatus+0x24>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	50060000 	.word	0x50060000

080024c0 <CRYP_GetCmdStatus>:
  * @brief  Returns whether CRYP peripheral is enabled or disabled.
  * @param  none.
  * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
  */
FunctionalState CRYP_GetCmdStatus(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
  FunctionalState state = DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]

  if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <CRYP_GetCmdStatus+0x30>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <CRYP_GetCmdStatus+0x1c>
  {
    /* CRYPEN bit is set */
    state = ENABLE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	e001      	b.n	80024e0 <CRYP_GetCmdStatus+0x20>
  }
  else
  {
    /* CRYPEN bit is reset */
    state = DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	71fb      	strb	r3, [r7, #7]
  }
  return state;
 80024e0:	79fb      	ldrb	r3, [r7, #7]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	50060000 	.word	0x50060000

080024f4 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <CRYP_GetFlagStatus+0x24>
  {
    tempreg = CRYP->RISR;
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <CRYP_GetFlagStatus+0x4c>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	e002      	b.n	800251e <CRYP_GetFlagStatus+0x2a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <CRYP_GetFlagStatus+0x4c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <CRYP_GetFlagStatus+0x3a>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e001      	b.n	8002532 <CRYP_GetFlagStatus+0x3e>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	50060000 	.word	0x50060000

08002544 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b0bd      	sub	sp, #244	; 0xf4
 8002548:	af00      	add	r7, sp, #0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4603      	mov	r3, r0
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	4613      	mov	r3, r2
 8002554:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  ErrorStatus status = SUCCESS;
 8002560:	2301      	movs	r3, #1
 8002562:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t keyaddr    = (uint32_t)Key;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t inputaddr  = (uint32_t)Input;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t outputaddr = (uint32_t)Output;
 8002572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t i = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002580:	f107 0318 	add.w	r3, r7, #24
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fd2f 	bl	8001fe8 <CRYP_KeyStructInit>

  switch(Keysize)
 800258a:	89bb      	ldrh	r3, [r7, #12]
 800258c:	2bc0      	cmp	r3, #192	; 0xc0
 800258e:	d04c      	beq.n	800262a <CRYP_AES_ECB+0xe6>
 8002590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002594:	f000 80a8 	beq.w	80026e8 <CRYP_AES_ECB+0x1a4>
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d000      	beq.n	800259e <CRYP_AES_ECB+0x5a>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800259c:	e123      	b.n	80027e6 <CRYP_AES_ECB+0x2a2>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800259e:	2300      	movs	r3, #0
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80025a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025b0:	ba1b      	rev	r3, r3
 80025b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 80025b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80025bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025c0:	3304      	adds	r3, #4
 80025c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80025c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025d4:	ba1b      	rev	r3, r3
 80025d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80025da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80025e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025e4:	3304      	adds	r3, #4
 80025e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80025ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025f8:	ba1b      	rev	r3, r3
 80025fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 80025fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002608:	3304      	adds	r3, #4
 800260a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800260e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800261c:	ba1b      	rev	r3, r3
 800261e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002628:	e0dd      	b.n	80027e6 <CRYP_AES_ECB+0x2a2>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800262a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800263e:	ba1b      	rev	r3, r3
 8002640:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 8002642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002644:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8002646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800264a:	3304      	adds	r3, #4
 800264c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800265e:	ba1b      	rev	r3, r3
 8002660:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800266a:	3304      	adds	r3, #4
 800266c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800267e:	ba1b      	rev	r3, r3
 8002680:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8002686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800268a:	3304      	adds	r3, #4
 800268c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800269e:	ba1b      	rev	r3, r3
 80026a0:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 80026a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80026a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026aa:	3304      	adds	r3, #4
 80026ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80026b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026be:	ba1b      	rev	r3, r3
 80026c0:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 80026c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80026c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026ca:	3304      	adds	r3, #4
 80026cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80026d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026de:	ba1b      	rev	r3, r3
 80026e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80026e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80026e6:	e07e      	b.n	80027e6 <CRYP_AES_ECB+0x2a2>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80026e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80026ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026fc:	ba1b      	rev	r3, r3
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002702:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8002704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002708:	3304      	adds	r3, #4
 800270a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800270e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800271c:	ba1b      	rev	r3, r3
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002722:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8002724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002728:	3304      	adds	r3, #4
 800272a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800272e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800273c:	ba1b      	rev	r3, r3
 800273e:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8002740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002742:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8002744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002748:	3304      	adds	r3, #4
 800274a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800274e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800275c:	ba1b      	rev	r3, r3
 800275e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002768:	3304      	adds	r3, #4
 800276a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800276e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800277c:	ba1b      	rev	r3, r3
 800277e:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8002780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8002784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002788:	3304      	adds	r3, #4
 800278a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800278e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800279c:	ba1b      	rev	r3, r3
 800279e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80027a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80027a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027a8:	3304      	adds	r3, #4
 80027aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80027ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027bc:	ba1b      	rev	r3, r3
 80027be:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80027c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80027c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c8:	3304      	adds	r3, #4
 80027ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80027ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027dc:	ba1b      	rev	r3, r3
 80027de:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80027e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80027e4:	bf00      	nop
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d130      	bne.n	800284e <CRYP_AES_ECB+0x30a>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80027ec:	f7ff fc6c 	bl	80020c8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80027f0:	2304      	movs	r3, #4
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80027f4:	2338      	movs	r3, #56	; 0x38
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80027f8:	2300      	movs	r3, #0
 80027fa:	643b      	str	r3, [r7, #64]	; 0x40
    CRYP_Init(&AES_CRYP_InitStructure);
 80027fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fb5d 	bl	8001ec0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fbc0 	bl	8001f90 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8002810:	2001      	movs	r0, #1
 8002812:	f7ff fc69 	bl	80020e8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002816:	2010      	movs	r0, #16
 8002818:	f7ff fe6c 	bl	80024f4 <CRYP_GetFlagStatus>
 800281c:	4603      	mov	r3, r0
 800281e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      counter++;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282e:	d003      	beq.n	8002838 <CRYP_AES_ECB+0x2f4>
 8002830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ee      	bne.n	8002816 <CRYP_AES_ECB+0x2d2>

    if (busystatus != RESET)
 8002838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <CRYP_AES_ECB+0x304>
   {
       status = ERROR;
 8002840:	2300      	movs	r3, #0
 8002842:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8002846:	e009      	b.n	800285c <CRYP_AES_ECB+0x318>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002848:	2304      	movs	r3, #4
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
 800284c:	e006      	b.n	800285c <CRYP_AES_ECB+0x318>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800284e:	f107 0318 	add.w	r3, r7, #24
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fb9c 	bl	8001f90 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8002858:	2300      	movs	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 800285c:	2320      	movs	r3, #32
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 8002864:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fb29 	bl	8001ec0 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800286e:	f7ff fc2b 	bl	80020c8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8002872:	2001      	movs	r0, #1
 8002874:	f7ff fc38 	bl	80020e8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8002878:	f7ff fe22 	bl	80024c0 <CRYP_GetCmdStatus>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <CRYP_AES_ECB+0x342>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8002882:	2300      	movs	r3, #0
 8002884:	e08b      	b.n	800299e <CRYP_AES_ECB+0x45a>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002886:	2300      	movs	r3, #0
 8002888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800288c:	e077      	b.n	800297e <CRYP_AES_ECB+0x43a>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800288e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fc45 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 800289a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800289e:	3304      	adds	r3, #4
 80028a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80028a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fc3a 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 80028b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028b4:	3304      	adds	r3, #4
 80028b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80028ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fc2f 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 80028c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028ca:	3304      	adds	r3, #4
 80028cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80028d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fc24 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 80028dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028e0:	3304      	adds	r3, #4
 80028e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Wait until the complete message has been processed */
    counter = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80028ea:	2010      	movs	r0, #16
 80028ec:	f7ff fe02 	bl	80024f4 <CRYP_GetFlagStatus>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      counter++;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002902:	d003      	beq.n	800290c <CRYP_AES_ECB+0x3c8>
 8002904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ee      	bne.n	80028ea <CRYP_AES_ECB+0x3a6>

    if (busystatus != RESET)
 800290c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <CRYP_AES_ECB+0x3d8>
   {
       status = ERROR;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800291a:	e02b      	b.n	8002974 <CRYP_AES_ECB+0x430>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800291c:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8002920:	f7ff fc10 	bl	8002144 <CRYP_DataOut>
 8002924:	4603      	mov	r3, r0
 8002926:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292c:	3304      	adds	r3, #4
 800292e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002932:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8002936:	f7ff fc05 	bl	8002144 <CRYP_DataOut>
 800293a:	4603      	mov	r3, r0
 800293c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800293e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002942:	3304      	adds	r3, #4
 8002944:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002948:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800294c:	f7ff fbfa 	bl	8002144 <CRYP_DataOut>
 8002950:	4603      	mov	r3, r0
 8002952:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002958:	3304      	adds	r3, #4
 800295a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 800295e:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8002962:	f7ff fbef 	bl	8002144 <CRYP_DataOut>
 8002966:	4603      	mov	r3, r0
 8002968:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800296a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800296e:	3304      	adds	r3, #4
 8002970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002978:	3310      	adds	r3, #16
 800297a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800297e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002982:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002986:	429a      	cmp	r2, r3
 8002988:	d204      	bcs.n	8002994 <CRYP_AES_ECB+0x450>
 800298a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800298e:	2b00      	cmp	r3, #0
 8002990:	f47f af7d 	bne.w	800288e <CRYP_AES_ECB+0x34a>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002994:	2000      	movs	r0, #0
 8002996:	f7ff fba7 	bl	80020e8 <CRYP_Cmd>

  return status; 
 800299a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 800299e:	4618      	mov	r0, r3
 80029a0:	37f4      	adds	r7, #244	; 0xf4
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd90      	pop	{r4, r7, pc}
 80029a6:	bf00      	nop

080029a8 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b0c9      	sub	sp, #292	; 0x124
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4604      	mov	r4, r0
 80029b0:	f107 0008 	add.w	r0, r7, #8
 80029b4:	6001      	str	r1, [r0, #0]
 80029b6:	1d39      	adds	r1, r7, #4
 80029b8:	600a      	str	r2, [r1, #0]
 80029ba:	4619      	mov	r1, r3
 80029bc:	f107 030f 	add.w	r3, r7, #15
 80029c0:	4622      	mov	r2, r4
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	460a      	mov	r2, r1
 80029ca:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  ErrorStatus status = SUCCESS;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint32_t keyaddr    = (uint32_t)Key;
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t inputaddr  = (uint32_t)Input;
 80029e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  uint32_t outputaddr = (uint32_t)Output;
 80029f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint32_t ivaddr = (uint32_t)InitVectors;
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t i = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff faeb 	bl	8001fe8 <CRYP_KeyStructInit>

  switch(Keysize)
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	2bc0      	cmp	r3, #192	; 0xc0
 8002a1a:	d04c      	beq.n	8002ab6 <CRYP_AES_CBC+0x10e>
 8002a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a20:	f000 80b4 	beq.w	8002b8c <CRYP_AES_CBC+0x1e4>
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d000      	beq.n	8002a2a <CRYP_AES_CBC+0x82>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8002a28:	e131      	b.n	8002c8e <CRYP_AES_CBC+0x2e6>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002a2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3c:	ba1b      	rev	r3, r3
 8002a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8002a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002a52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a60:	ba1b      	rev	r3, r3
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8002a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002a6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a70:	3304      	adds	r3, #4
 8002a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002a76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	ba1b      	rev	r3, r3
 8002a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8002a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002a90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a94:	3304      	adds	r3, #4
 8002a96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aa8:	ba1b      	rev	r3, r3
 8002aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8002aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002ab4:	e0eb      	b.n	8002c8e <CRYP_AES_CBC+0x2e6>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8002ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aba:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002aca:	ba1b      	rev	r3, r3
 8002acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8002ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ada:	3304      	adds	r3, #4
 8002adc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002ae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aee:	ba1b      	rev	r3, r3
 8002af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 8002af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002afa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002afe:	3304      	adds	r3, #4
 8002b00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002b04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b12:	ba1b      	rev	r3, r3
 8002b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8002b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002b1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b22:	3304      	adds	r3, #4
 8002b24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b36:	ba1b      	rev	r3, r3
 8002b38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 8002b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002b42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b46:	3304      	adds	r3, #4
 8002b48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5a:	ba1b      	rev	r3, r3
 8002b5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8002b60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002b7e:	ba1b      	rev	r3, r3
 8002b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8002b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b88:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002b8a:	e080      	b.n	8002c8e <CRYP_AES_CBC+0x2e6>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8002b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b90:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8002b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ba0:	ba1b      	rev	r3, r3
 8002ba2:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8002ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002ba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bac:	3304      	adds	r3, #4
 8002bae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8002bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bc0:	ba1b      	rev	r3, r3
 8002bc2:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 8002bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8002bc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bcc:	3304      	adds	r3, #4
 8002bce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002bd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002be0:	ba1b      	rev	r3, r3
 8002be2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bec:	3304      	adds	r3, #4
 8002bee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c00:	ba1b      	rev	r3, r3
 8002c02:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8002c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002c08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002c12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c20:	ba1b      	rev	r3, r3
 8002c22:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8002c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002c28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002c32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c40:	ba1b      	rev	r3, r3
 8002c42:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8002c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002c52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c60:	ba1b      	rev	r3, r3
 8002c62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8002c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c80:	ba1b      	rev	r3, r3
 8002c82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 8002c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c8a:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002c8c:	bf00      	nop
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8002c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c9c:	ba1b      	rev	r3, r3
 8002c9e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8002ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cac:	3304      	adds	r3, #4
 8002cae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8002cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cc0:	ba1b      	rev	r3, r3
 8002cc2:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8002cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8002ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8002cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ce4:	ba1b      	rev	r3, r3
 8002ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8002ce8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8002cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8002cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d08:	ba1b      	rev	r3, r3
 8002d0a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002d14:	f107 030f 	add.w	r3, r7, #15
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d136      	bne.n	8002d8c <CRYP_AES_CBC+0x3e4>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8002d1e:	f7ff f9d3 	bl	80020c8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002d22:	2304      	movs	r3, #4
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8002d26:	2338      	movs	r3, #56	; 0x38
 8002d28:	64bb      	str	r3, [r7, #72]	; 0x48
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	64fb      	str	r3, [r7, #76]	; 0x4c

    CRYP_Init(&AES_CRYP_InitStructure);
 8002d2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f8c4 	bl	8001ec0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f927 	bl	8001f90 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f7ff f9d0 	bl	80020e8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002d48:	2010      	movs	r0, #16
 8002d4a:	f7ff fbd3 	bl	80024f4 <CRYP_GetFlagStatus>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      counter++;
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d003      	beq.n	8002d76 <CRYP_AES_CBC+0x3ce>
 8002d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e8      	bne.n	8002d48 <CRYP_AES_CBC+0x3a0>

    if (busystatus != RESET)
 8002d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <CRYP_AES_CBC+0x3de>
   {
       status = ERROR;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8002d84:	e009      	b.n	8002d9a <CRYP_AES_CBC+0x3f2>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002d86:	2304      	movs	r3, #4
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8a:	e006      	b.n	8002d9a <CRYP_AES_CBC+0x3f2>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f8fd 	bl	8001f90 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8002d96:	2300      	movs	r3, #0
 8002d98:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8002d9a:	2328      	movs	r3, #40	; 0x28
 8002d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8002da2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f88a 	bl	8001ec0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f93b 	bl	800202c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8002db6:	f7ff f987 	bl	80020c8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7ff f994 	bl	80020e8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8002dc0:	f7ff fb7e 	bl	80024c0 <CRYP_GetCmdStatus>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <CRYP_AES_CBC+0x426>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e093      	b.n	8002ef6 <CRYP_AES_CBC+0x54e>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002dd4:	e07f      	b.n	8002ed6 <CRYP_AES_CBC+0x52e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002dd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f9a1 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8002de2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002de6:	3304      	adds	r3, #4
 8002de8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002dec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f996 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8002df8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002e02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff f98b 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8002e0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e12:	3304      	adds	r3, #4
 8002e14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002e18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f980 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8002e24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e28:	3304      	adds	r3, #4
 8002e2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    /* Wait until the complete message has been processed */
    counter = 0;
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002e36:	2010      	movs	r0, #16
 8002e38:	f7ff fb5c 	bl	80024f4 <CRYP_GetFlagStatus>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      counter++;
 8002e42:	f107 0310 	add.w	r3, r7, #16
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d003      	beq.n	8002e64 <CRYP_AES_CBC+0x4bc>
 8002e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e8      	bne.n	8002e36 <CRYP_AES_CBC+0x48e>

    if (busystatus != RESET)
 8002e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <CRYP_AES_CBC+0x4cc>
   {
       status = ERROR;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8002e72:	e02b      	b.n	8002ecc <CRYP_AES_CBC+0x524>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002e74:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8002e78:	f7ff f964 	bl	8002144 <CRYP_DataOut>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e84:	3304      	adds	r3, #4
 8002e86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002e8a:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8002e8e:	f7ff f959 	bl	8002144 <CRYP_DataOut>
 8002e92:	4603      	mov	r3, r0
 8002e94:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002ea0:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8002ea4:	f7ff f94e 	bl	8002144 <CRYP_DataOut>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002eb6:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8002eba:	f7ff f943 	bl	8002144 <CRYP_DataOut>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002ecc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002ed6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002eda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d204      	bcs.n	8002eec <CRYP_AES_CBC+0x544>
 8002ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f47f af75 	bne.w	8002dd6 <CRYP_AES_CBC+0x42e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7ff f8fb 	bl	80020e8 <CRYP_Cmd>

  return status;
 8002ef2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}

08002f00 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b0c9      	sub	sp, #292	; 0x124
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4604      	mov	r4, r0
 8002f08:	f107 0008 	add.w	r0, r7, #8
 8002f0c:	6001      	str	r1, [r0, #0]
 8002f0e:	1d39      	adds	r1, r7, #4
 8002f10:	600a      	str	r2, [r1, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	f107 030f 	add.w	r3, r7, #15
 8002f18:	4622      	mov	r2, r4
 8002f1a:	701a      	strb	r2, [r3, #0]
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	460a      	mov	r2, r1
 8002f22:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  ErrorStatus status = SUCCESS;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint32_t keyaddr    = (uint32_t)Key;
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t inputaddr  = (uint32_t)Input;
 8002f40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  uint32_t outputaddr = (uint32_t)Output;
 8002f48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t i = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff f83f 	bl	8001fe8 <CRYP_KeyStructInit>

  switch(Keysize)
 8002f6a:	f107 030c 	add.w	r3, r7, #12
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	2bc0      	cmp	r3, #192	; 0xc0
 8002f72:	d04c      	beq.n	800300e <CRYP_AES_CTR+0x10e>
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	f000 80b4 	beq.w	80030e4 <CRYP_AES_CTR+0x1e4>
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d000      	beq.n	8002f82 <CRYP_AES_CTR+0x82>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8002f80:	e131      	b.n	80031e6 <CRYP_AES_CTR+0x2e6>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002f82:	2300      	movs	r3, #0
 8002f84:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f94:	ba1b      	rev	r3, r3
 8002f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8002f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002faa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fb8:	ba1b      	rev	r3, r3
 8002fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8002fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002fc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fc8:	3304      	adds	r3, #4
 8002fca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002fce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	ba1b      	rev	r3, r3
 8002fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8002fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002fe8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fec:	3304      	adds	r3, #4
 8002fee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002ff2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003000:	ba1b      	rev	r3, r3
 8003002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8003006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800300a:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800300c:	e0eb      	b.n	80031e6 <CRYP_AES_CTR+0x2e6>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800300e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003012:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003022:	ba1b      	rev	r3, r3
 8003024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8003028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800302e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003032:	3304      	adds	r3, #4
 8003034:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003038:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003046:	ba1b      	rev	r3, r3
 8003048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 800304c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003052:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003056:	3304      	adds	r3, #4
 8003058:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800305c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	ba1b      	rev	r3, r3
 800306c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8003070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003076:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800307a:	3304      	adds	r3, #4
 800307c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003080:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308e:	ba1b      	rev	r3, r3
 8003090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 8003094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800309a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800309e:	3304      	adds	r3, #4
 80030a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80030a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b2:	ba1b      	rev	r3, r3
 80030b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 80030b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80030be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030c2:	3304      	adds	r3, #4
 80030c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80030c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80030d6:	ba1b      	rev	r3, r3
 80030d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 80030dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030e0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80030e2:	e080      	b.n	80031e6 <CRYP_AES_CTR+0x2e6>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80030e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e8:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80030ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030f8:	ba1b      	rev	r3, r3
 80030fa:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80030fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8003100:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003104:	3304      	adds	r3, #4
 8003106:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800310a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003118:	ba1b      	rev	r3, r3
 800311a:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 800311c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8003120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003124:	3304      	adds	r3, #4
 8003126:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800312a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003138:	ba1b      	rev	r3, r3
 800313a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800313c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8003140:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003144:	3304      	adds	r3, #4
 8003146:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800314a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003158:	ba1b      	rev	r3, r3
 800315a:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 800315c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003160:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003164:	3304      	adds	r3, #4
 8003166:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800316a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003178:	ba1b      	rev	r3, r3
 800317a:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 800317c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003180:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003184:	3304      	adds	r3, #4
 8003186:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800318a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003198:	ba1b      	rev	r3, r3
 800319a:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 800319c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80031a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031a4:	3304      	adds	r3, #4
 80031a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80031aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031b8:	ba1b      	rev	r3, r3
 80031ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80031bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80031c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031c4:	3304      	adds	r3, #4
 80031c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80031ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031d8:	ba1b      	rev	r3, r3
 80031da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 80031de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80031e4:	bf00      	nop
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80031e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031f4:	ba1b      	rev	r3, r3
 80031f6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80031f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8003200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003204:	3304      	adds	r3, #4
 8003206:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800320a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003218:	ba1b      	rev	r3, r3
 800321a:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 800321c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8003224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003228:	3304      	adds	r3, #4
 800322a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 800322e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800323c:	ba1b      	rev	r3, r3
 800323e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8003240:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003242:	f107 0314 	add.w	r3, r7, #20
 8003246:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8003248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800324c:	3304      	adds	r3, #4
 800324e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8003252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003260:	ba1b      	rev	r3, r3
 8003262:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800326c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fe8d 	bl	8001f90 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8003276:	f107 030f 	add.w	r3, r7, #15
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <CRYP_AES_CTR+0x386>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003280:	2304      	movs	r3, #4
 8003282:	647b      	str	r3, [r7, #68]	; 0x44
 8003284:	e001      	b.n	800328a <CRYP_AES_CTR+0x38a>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003286:	2300      	movs	r3, #0
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 800328a:	2330      	movs	r3, #48	; 0x30
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8003292:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fe12 	bl	8001ec0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fec3 	bl	800202c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80032a6:	f7fe ff0f 	bl	80020c8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7fe ff1c 	bl	80020e8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80032b0:	f7ff f906 	bl	80024c0 <CRYP_GetCmdStatus>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <CRYP_AES_CTR+0x3be>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80032ba:	2300      	movs	r3, #0
 80032bc:	e093      	b.n	80033e6 <CRYP_AES_CTR+0x4e6>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80032c4:	e07f      	b.n	80033c6 <CRYP_AES_CTR+0x4c6>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80032c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe ff29 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 80032d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032d6:	3304      	adds	r3, #4
 80032d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80032dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe ff1e 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 80032e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032ec:	3304      	adds	r3, #4
 80032ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80032f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe ff13 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 80032fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003302:	3304      	adds	r3, #4
 8003304:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003308:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ff08 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8003314:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003318:	3304      	adds	r3, #4
 800331a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    /* Wait until the complete message has been processed */
    counter = 0;
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003326:	2010      	movs	r0, #16
 8003328:	f7ff f8e4 	bl	80024f4 <CRYP_GetFlagStatus>
 800332c:	4603      	mov	r3, r0
 800332e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      counter++;
 8003332:	f107 0310 	add.w	r3, r7, #16
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d003      	beq.n	8003354 <CRYP_AES_CTR+0x454>
 800334c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e8      	bne.n	8003326 <CRYP_AES_CTR+0x426>

    if (busystatus != RESET)
 8003354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <CRYP_AES_CTR+0x464>
   {
       status = ERROR;
 800335c:	2300      	movs	r3, #0
 800335e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8003362:	e02b      	b.n	80033bc <CRYP_AES_CTR+0x4bc>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003364:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8003368:	f7fe feec 	bl	8002144 <CRYP_DataOut>
 800336c:	4603      	mov	r3, r0
 800336e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003374:	3304      	adds	r3, #4
 8003376:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800337a:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800337e:	f7fe fee1 	bl	8002144 <CRYP_DataOut>
 8003382:	4603      	mov	r3, r0
 8003384:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338a:	3304      	adds	r3, #4
 800338c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003390:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8003394:	f7fe fed6 	bl	8002144 <CRYP_DataOut>
 8003398:	4603      	mov	r3, r0
 800339a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a0:	3304      	adds	r3, #4
 80033a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80033a6:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80033aa:	f7fe fecb 	bl	8002144 <CRYP_DataOut>
 80033ae:	4603      	mov	r3, r0
 80033b0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b6:	3304      	adds	r3, #4
 80033b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80033bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80033c0:	3310      	adds	r3, #16
 80033c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80033c6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80033ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d204      	bcs.n	80033dc <CRYP_AES_CTR+0x4dc>
 80033d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f47f af75 	bne.w	80032c6 <CRYP_AES_CTR+0x3c6>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fe fe83 	bl	80020e8 <CRYP_Cmd>

  return status;
 80033e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd90      	pop	{r4, r7, pc}

080033f0 <CRYP_AES_GCM>:
ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength,
                         uint8_t *Output, uint8_t *AuthTAG)
{
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	b0e3      	sub	sp, #396	; 0x18c
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4604      	mov	r4, r0
 80033fa:	f107 0010 	add.w	r0, r7, #16
 80033fe:	6001      	str	r1, [r0, #0]
 8003400:	f107 010c 	add.w	r1, r7, #12
 8003404:	600a      	str	r2, [r1, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	f107 0317 	add.w	r3, r7, #23
 800340c:	4622      	mov	r2, r4
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	460a      	mov	r2, r1
 8003416:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003418:	f107 031c 	add.w	r3, r7, #28
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  ErrorStatus status = SUCCESS;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
  uint32_t keyaddr    = (uint32_t)Key;
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  uint32_t inputaddr  = (uint32_t)Input;
 8003436:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800343a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  uint32_t outputaddr = (uint32_t)Output;
 800343e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003442:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8003446:	f107 0310 	add.w	r3, r7, #16
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  uint32_t headeraddr = (uint32_t)Header;
 8003450:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003454:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8003458:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800345c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  uint64_t headerlength = HLength * 8;/* header length in bits */
 8003460:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	f04f 0400 	mov.w	r4, #0
 800346a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800346e:	e882 0018 	stmia.w	r2, {r3, r4}
  uint64_t inputlength = ILength * 8;/* input length in bits */
 8003472:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003480:	e882 0018 	stmia.w	r2, {r3, r4}
  uint32_t loopcounter = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800348a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fdaa 	bl	8001fe8 <CRYP_KeyStructInit>

  switch(Keysize)
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2bc0      	cmp	r3, #192	; 0xc0
 800349c:	d056      	beq.n	800354c <CRYP_AES_GCM+0x15c>
 800349e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a2:	f000 80cc 	beq.w	800363e <CRYP_AES_GCM+0x24e>
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	d000      	beq.n	80034ac <CRYP_AES_GCM+0xbc>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80034aa:	e169      	b.n	8003780 <CRYP_AES_GCM+0x390>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80034ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034b0:	2200      	movs	r2, #0
 80034b2:	60da      	str	r2, [r3, #12]
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80034b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80034c2:	ba1b      	rev	r3, r3
 80034c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80034c8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034d0:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 80034d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034d6:	3304      	adds	r3, #4
 80034d8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80034dc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034ea:	ba1b      	rev	r3, r3
 80034ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 80034f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80034f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034f8:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 80034fa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034fe:	3304      	adds	r3, #4
 8003500:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003504:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003512:	ba1b      	rev	r3, r3
 8003514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8003518:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800351c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003520:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8003522:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003526:	3304      	adds	r3, #4
 8003528:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800352c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800353a:	ba1b      	rev	r3, r3
 800353c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8003540:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003544:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003548:	61da      	str	r2, [r3, #28]
    break;
 800354a:	e119      	b.n	8003780 <CRYP_AES_GCM+0x390>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800354c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003554:	60da      	str	r2, [r3, #12]
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003556:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003564:	ba1b      	rev	r3, r3
 8003566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 800356a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800356e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003572:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 8003574:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003578:	3304      	adds	r3, #4
 800357a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800357e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800358c:	ba1b      	rev	r3, r3
 800358e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8003592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800359a:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 800359c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035a0:	3304      	adds	r3, #4
 80035a2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80035a6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035b4:	ba1b      	rev	r3, r3
 80035b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80035ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c2:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 80035c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035c8:	3304      	adds	r3, #4
 80035ca:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80035ce:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035dc:	ba1b      	rev	r3, r3
 80035de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 80035e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035ea:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 80035ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035f0:	3304      	adds	r3, #4
 80035f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80035f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003604:	ba1b      	rev	r3, r3
 8003606:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 800360a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800360e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003612:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8003614:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003618:	3304      	adds	r3, #4
 800361a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800361e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800362c:	ba1b      	rev	r3, r3
 800362e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8003632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800363a:	61da      	str	r2, [r3, #28]
    break;
 800363c:	e0a0      	b.n	8003780 <CRYP_AES_GCM+0x390>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800363e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003646:	60da      	str	r2, [r3, #12]
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8003648:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003656:	ba1b      	rev	r3, r3
 8003658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 800365c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003664:	601a      	str	r2, [r3, #0]
    keyaddr+=4;
 8003666:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800366a:	3304      	adds	r3, #4
 800366c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8003670:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800367e:	ba1b      	rev	r3, r3
 8003680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8003684:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800368c:	605a      	str	r2, [r3, #4]
    keyaddr+=4;
 800368e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003692:	3304      	adds	r3, #4
 8003694:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003698:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036a6:	ba1b      	rev	r3, r3
 80036a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 80036ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80036b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036b4:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 80036b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036ba:	3304      	adds	r3, #4
 80036bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80036c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	ba1b      	rev	r3, r3
 80036d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 80036d4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80036d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036dc:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 80036de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036e2:	3304      	adds	r3, #4
 80036e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80036e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036f6:	ba1b      	rev	r3, r3
 80036f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 80036fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003704:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8003706:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800370a:	3304      	adds	r3, #4
 800370c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003710:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371e:	ba1b      	rev	r3, r3
 8003720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8003724:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003728:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800372c:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 800372e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003732:	3304      	adds	r3, #4
 8003734:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003738:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003746:	ba1b      	rev	r3, r3
 8003748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 800374c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003754:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8003756:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800375a:	3304      	adds	r3, #4
 800375c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003760:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800376a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800376e:	ba1b      	rev	r3, r3
 8003770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8003774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800377c:	61da      	str	r2, [r3, #28]
    break;
 800377e:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8003780:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800378e:	ba1a      	rev	r2, r3
 8003790:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003794:	601a      	str	r2, [r3, #0]
  return(result);
 8003796:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f107 0320 	add.w	r3, r7, #32
 80037a0:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 80037a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037a6:	3304      	adds	r3, #4
 80037a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80037ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ba:	ba1a      	rev	r2, r3
 80037bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80037c0:	601a      	str	r2, [r3, #0]
  return(result);
 80037c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	f107 0320 	add.w	r3, r7, #32
 80037cc:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 80037ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037d2:	3304      	adds	r3, #4
 80037d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 80037d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037e6:	ba1a      	rev	r2, r3
 80037e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80037ec:	601a      	str	r2, [r3, #0]
  return(result);
 80037ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	f107 0320 	add.w	r3, r7, #32
 80037f8:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 80037fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037fe:	3304      	adds	r3, #4
 8003800:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8003804:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003812:	ba1b      	rev	r3, r3
 8003814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8003818:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800381c:	f107 0320 	add.w	r3, r7, #32
 8003820:	60da      	str	r2, [r3, #12]
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8003822:	f107 0317 	add.w	r3, r7, #23
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 81e1 	bne.w	8003bf0 <CRYP_AES_GCM+0x800>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800382e:	f7fe fc4b 	bl	80020c8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fbaa 	bl	8001f90 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800383c:	f107 0320 	add.w	r3, r7, #32
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fbf3 	bl	800202c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003846:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 800384e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003856:	605a      	str	r2, [r3, #4]
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003858:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	609a      	str	r2, [r3, #8]
    CRYP_Init(&AES_CRYP_InitStructure);
 8003860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fb2b 	bl	8001ec0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 800386a:	2000      	movs	r0, #0
 800386c:	f7fe fc10 	bl	8002090 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8003870:	2001      	movs	r0, #1
 8003872:	f7fe fc39 	bl	80020e8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8003876:	bf00      	nop
 8003878:	f7fe fe22 	bl	80024c0 <CRYP_GetCmdStatus>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d0fa      	beq.n	8003878 <CRYP_AES_GCM+0x488>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8003882:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003886:	2b00      	cmp	r3, #0
 8003888:	d071      	beq.n	800396e <CRYP_AES_GCM+0x57e>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 800388a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800388e:	f7fe fbff 	bl	8002090 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8003892:	2001      	movs	r0, #1
 8003894:	f7fe fc28 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8003898:	f7fe fe12 	bl	80024c0 <CRYP_GetCmdStatus>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <CRYP_AES_GCM+0x4b6>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 80038a2:	2300      	movs	r3, #0
 80038a4:	e387      	b.n	8003fb6 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80038ac:	e037      	b.n	800391e <CRYP_AES_GCM+0x52e>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 80038ae:	bf00      	nop
 80038b0:	2001      	movs	r0, #1
 80038b2:	f7fe fe1f 	bl	80024f4 <CRYP_GetFlagStatus>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f9      	beq.n	80038b0 <CRYP_AES_GCM+0x4c0>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80038bc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fc2e 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 80038c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80038cc:	3304      	adds	r3, #4
 80038ce:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80038d2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe fc23 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 80038de:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80038e2:	3304      	adds	r3, #4
 80038e4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80038e8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fc18 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 80038f4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80038f8:	3304      	adds	r3, #4
 80038fa:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80038fe:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fc0d 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 800390a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800390e:	3304      	adds	r3, #4
 8003910:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8003914:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003918:	3310      	adds	r3, #16
 800391a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800391e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003922:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003926:	429a      	cmp	r2, r3
 8003928:	d3c1      	bcc.n	80038ae <CRYP_AES_GCM+0x4be>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800392a:	f107 031c 	add.w	r3, r7, #28
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003932:	2010      	movs	r0, #16
 8003934:	f7fe fdde 	bl	80024f4 <CRYP_GetFlagStatus>
 8003938:	4603      	mov	r3, r0
 800393a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        counter++;
 800393e:	f107 031c 	add.w	r3, r7, #28
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	f107 031c 	add.w	r3, r7, #28
 800394a:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d003      	beq.n	8003960 <CRYP_AES_GCM+0x570>
 8003958:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e8      	bne.n	8003932 <CRYP_AES_GCM+0x542>

      if (busystatus != RESET)
 8003960:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <CRYP_AES_GCM+0x57e>
      {
        status = ERROR;
 8003968:	2300      	movs	r3, #0
 800396a:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800396e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80ab 	beq.w	8003ace <CRYP_AES_GCM+0x6de>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8003978:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800397c:	f7fe fb88 	bl	8002090 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8003980:	2001      	movs	r0, #1
 8003982:	f7fe fbb1 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8003986:	f7fe fd9b 	bl	80024c0 <CRYP_GetCmdStatus>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <CRYP_AES_GCM+0x5a4>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8003990:	2300      	movs	r3, #0
 8003992:	e310      	b.n	8003fb6 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800399a:	e08d      	b.n	8003ab8 <CRYP_AES_GCM+0x6c8>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 800399c:	bf00      	nop
 800399e:	2001      	movs	r0, #1
 80039a0:	f7fe fda8 	bl	80024f4 <CRYP_GetFlagStatus>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f9      	beq.n	800399e <CRYP_AES_GCM+0x5ae>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80039aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fbb7 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 80039b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039ba:	3304      	adds	r3, #4
 80039bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80039c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fbac 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 80039cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039d0:	3304      	adds	r3, #4
 80039d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80039d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fba1 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 80039e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039e6:	3304      	adds	r3, #4
 80039e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80039ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fb96 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 80039f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039fc:	3304      	adds	r3, #4
 80039fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003a0a:	2010      	movs	r0, #16
 8003a0c:	f7fe fd72 	bl	80024f4 <CRYP_GetFlagStatus>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
          counter++;
 8003a16:	f107 031c 	add.w	r3, r7, #28
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	f107 031c 	add.w	r3, r7, #28
 8003a22:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003a24:	f107 031c 	add.w	r3, r7, #28
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2e:	d003      	beq.n	8003a38 <CRYP_AES_GCM+0x648>
 8003a30:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e8      	bne.n	8003a0a <CRYP_AES_GCM+0x61a>

        if (busystatus != RESET)
 8003a38:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <CRYP_AES_GCM+0x658>
        {
          status = ERROR;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8003a46:	e032      	b.n	8003aae <CRYP_AES_GCM+0x6be>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8003a48:	bf00      	nop
 8003a4a:	2004      	movs	r0, #4
 8003a4c:	f7fe fd52 	bl	80024f4 <CRYP_GetFlagStatus>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f9      	beq.n	8003a4a <CRYP_AES_GCM+0x65a>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a56:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003a5a:	f7fe fb73 	bl	8002144 <CRYP_DataOut>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003a62:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003a66:	3304      	adds	r3, #4
 8003a68:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a6c:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003a70:	f7fe fb68 	bl	8002144 <CRYP_DataOut>
 8003a74:	4603      	mov	r3, r0
 8003a76:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003a78:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a82:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003a86:	f7fe fb5d 	bl	8002144 <CRYP_DataOut>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003a8e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003a92:	3304      	adds	r3, #4
 8003a94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a98:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003a9c:	f7fe fb52 	bl	8002144 <CRYP_DataOut>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003aa4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8003aae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003ab8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003abc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d204      	bcs.n	8003ace <CRYP_AES_GCM+0x6de>
 8003ac4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f47f af67 	bne.w	800399c <CRYP_AES_GCM+0x5ac>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8003ace:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003ad2:	f7fe fadd 	bl	8002090 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7fe fb06 	bl	80020e8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8003adc:	f7fe fcf0 	bl	80024c0 <CRYP_GetCmdStatus>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <CRYP_AES_GCM+0x6fa>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e265      	b.n	8003fb6 <CRYP_AES_GCM+0xbc6>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8003aea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003aee:	cb18      	ldmia	r3, {r3, r4}
 8003af0:	0023      	movs	r3, r4
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	2300      	movs	r3, #0
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b02:	ba1a      	rev	r2, r3
 8003b04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b08:	601a      	str	r2, [r3, #0]
  return(result);
 8003b0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fb07 	bl	8002124 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8003b16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003b1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b22:	ba1a      	rev	r2, r3
 8003b24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b28:	601a      	str	r2, [r3, #0]
  return(result);
 8003b2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe faf7 	bl	8002124 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8003b36:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003b3a:	cb18      	ldmia	r3, {r3, r4}
 8003b3c:	46a2      	mov	sl, r4
 8003b3e:	f04f 0b00 	mov.w	fp, #0
 8003b42:	4653      	mov	r3, sl
 8003b44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b4c:	ba1a      	rev	r2, r3
 8003b4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b52:	601a      	str	r2, [r3, #0]
  return(result);
 8003b54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fae2 	bl	8002124 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8003b60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003b64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b6c:	ba1a      	rev	r2, r3
 8003b6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b72:	601a      	str	r2, [r3, #0]
  return(result);
 8003b74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fad2 	bl	8002124 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8003b80:	bf00      	nop
 8003b82:	2004      	movs	r0, #4
 8003b84:	f7fe fcb6 	bl	80024f4 <CRYP_GetFlagStatus>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f9      	beq.n	8003b82 <CRYP_AES_GCM+0x792>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8003b8e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003b92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003b96:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003b9a:	f7fe fad3 	bl	8002144 <CRYP_DataOut>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003ba2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003bac:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003bb0:	f7fe fac8 	bl	8002144 <CRYP_DataOut>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003bb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003bc2:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003bc6:	f7fe fabd 	bl	8002144 <CRYP_DataOut>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003bce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003bd8:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003bdc:	f7fe fab2 	bl	8002144 <CRYP_DataOut>
 8003be0:	4603      	mov	r3, r0
 8003be2:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003be4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003be8:	3304      	adds	r3, #4
 8003bea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003bee:	e1dd      	b.n	8003fac <CRYP_AES_GCM+0xbbc>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8003bf0:	f7fe fa6a 	bl	80020c8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe f9c9 	bl	8001f90 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8003bfe:	f107 0320 	add.w	r3, r7, #32
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fa12 	bl	800202c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003c08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	601a      	str	r2, [r3, #0]
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8003c10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c18:	605a      	str	r2, [r3, #4]
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003c1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	609a      	str	r2, [r3, #8]
    CRYP_Init(&AES_CRYP_InitStructure);
 8003c22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe f94a 	bl	8001ec0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7fe fa2f 	bl	8002090 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7fe fa58 	bl	80020e8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 8003c38:	bf00      	nop
 8003c3a:	f7fe fc41 	bl	80024c0 <CRYP_GetCmdStatus>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d0fa      	beq.n	8003c3a <CRYP_AES_GCM+0x84a>
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8003c44:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d071      	beq.n	8003d30 <CRYP_AES_GCM+0x940>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8003c4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003c50:	f7fe fa1e 	bl	8002090 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7fe fa47 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8003c5a:	f7fe fc31 	bl	80024c0 <CRYP_GetCmdStatus>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <CRYP_AES_GCM+0x878>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8003c64:	2300      	movs	r3, #0
 8003c66:	e1a6      	b.n	8003fb6 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003c6e:	e037      	b.n	8003ce0 <CRYP_AES_GCM+0x8f0>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8003c70:	bf00      	nop
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7fe fc3e 	bl	80024f4 <CRYP_GetFlagStatus>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f9      	beq.n	8003c72 <CRYP_AES_GCM+0x882>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8003c7e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fa4d 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8003c8a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003c8e:	3304      	adds	r3, #4
 8003c90:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8003c94:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fa42 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8003ca0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8003caa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fa37 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8003cb6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003cba:	3304      	adds	r3, #4
 8003cbc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8003cc0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fa2c 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8003ccc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8003cd6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003cda:	3310      	adds	r3, #16
 8003cdc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003ce0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ce4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d3c1      	bcc.n	8003c70 <CRYP_AES_GCM+0x880>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003cf4:	2010      	movs	r0, #16
 8003cf6:	f7fe fbfd 	bl	80024f4 <CRYP_GetFlagStatus>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        counter++;
 8003d00:	f107 031c 	add.w	r3, r7, #28
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	f107 031c 	add.w	r3, r7, #28
 8003d0c:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003d0e:	f107 031c 	add.w	r3, r7, #28
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d003      	beq.n	8003d22 <CRYP_AES_GCM+0x932>
 8003d1a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e8      	bne.n	8003cf4 <CRYP_AES_GCM+0x904>

      if (busystatus != RESET)
 8003d22:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <CRYP_AES_GCM+0x940>
      {
        status = ERROR;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8003d30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80ab 	beq.w	8003e90 <CRYP_AES_GCM+0xaa0>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8003d3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003d3e:	f7fe f9a7 	bl	8002090 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7fe f9d0 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8003d48:	f7fe fbba 	bl	80024c0 <CRYP_GetCmdStatus>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <CRYP_AES_GCM+0x966>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8003d52:	2300      	movs	r3, #0
 8003d54:	e12f      	b.n	8003fb6 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003d5c:	e08d      	b.n	8003e7a <CRYP_AES_GCM+0xa8a>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8003d5e:	bf00      	nop
 8003d60:	2001      	movs	r0, #1
 8003d62:	f7fe fbc7 	bl	80024f4 <CRYP_GetFlagStatus>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f9      	beq.n	8003d60 <CRYP_AES_GCM+0x970>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003d6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe f9d6 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8003d78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003d82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe f9cb 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8003d8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d92:	3304      	adds	r3, #4
 8003d94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003d98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe f9c0 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8003da4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003da8:	3304      	adds	r3, #4
 8003daa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003dae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe f9b5 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8003dba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8003dc4:	f107 031c 	add.w	r3, r7, #28
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003dcc:	2010      	movs	r0, #16
 8003dce:	f7fe fb91 	bl	80024f4 <CRYP_GetFlagStatus>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
          counter++;
 8003dd8:	f107 031c 	add.w	r3, r7, #28
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	f107 031c 	add.w	r3, r7, #28
 8003de4:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d003      	beq.n	8003dfa <CRYP_AES_GCM+0xa0a>
 8003df2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e8      	bne.n	8003dcc <CRYP_AES_GCM+0x9dc>

        if (busystatus != RESET)
 8003dfa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <CRYP_AES_GCM+0xa1a>
        {
          status = ERROR;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8003e08:	e032      	b.n	8003e70 <CRYP_AES_GCM+0xa80>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8003e0a:	bf00      	nop
 8003e0c:	2004      	movs	r0, #4
 8003e0e:	f7fe fb71 	bl	80024f4 <CRYP_GetFlagStatus>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f9      	beq.n	8003e0c <CRYP_AES_GCM+0xa1c>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003e18:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003e1c:	f7fe f992 	bl	8002144 <CRYP_DataOut>
 8003e20:	4603      	mov	r3, r0
 8003e22:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003e24:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003e28:	3304      	adds	r3, #4
 8003e2a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003e2e:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003e32:	f7fe f987 	bl	8002144 <CRYP_DataOut>
 8003e36:	4603      	mov	r3, r0
 8003e38:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003e3a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003e3e:	3304      	adds	r3, #4
 8003e40:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003e44:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003e48:	f7fe f97c 	bl	8002144 <CRYP_DataOut>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003e50:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003e54:	3304      	adds	r3, #4
 8003e56:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003e5a:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8003e5e:	f7fe f971 	bl	8002144 <CRYP_DataOut>
 8003e62:	4603      	mov	r3, r0
 8003e64:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8003e66:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8003e70:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003e74:	3310      	adds	r3, #16
 8003e76:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003e7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d204      	bcs.n	8003e90 <CRYP_AES_GCM+0xaa0>
 8003e86:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f47f af67 	bne.w	8003d5e <CRYP_AES_GCM+0x96e>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8003e90:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003e94:	f7fe f8fc 	bl	8002090 <CRYP_PhaseConfig>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8003e98:	2001      	movs	r0, #1
 8003e9a:	f7fe f925 	bl	80020e8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8003e9e:	f7fe fb0f 	bl	80024c0 <CRYP_GetCmdStatus>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <CRYP_AES_GCM+0xabc>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e084      	b.n	8003fb6 <CRYP_AES_GCM+0xbc6>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8003eac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003eb0:	cb18      	ldmia	r3, {r3, r4}
 8003eb2:	46a0      	mov	r8, r4
 8003eb4:	f04f 0900 	mov.w	r9, #0
 8003eb8:	4643      	mov	r3, r8
 8003eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	ba1a      	rev	r2, r3
 8003ec4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ec8:	601a      	str	r2, [r3, #0]
  return(result);
 8003eca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe f927 	bl	8002124 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8003ed6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003eda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee2:	ba1a      	rev	r2, r3
 8003ee4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ee8:	601a      	str	r2, [r3, #0]
  return(result);
 8003eea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe f917 	bl	8002124 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8003ef6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003efa:	cb18      	ldmia	r3, {r3, r4}
 8003efc:	0025      	movs	r5, r4
 8003efe:	2600      	movs	r6, #0
 8003f00:	462b      	mov	r3, r5
 8003f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f0a:	ba1a      	rev	r2, r3
 8003f0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f10:	601a      	str	r2, [r3, #0]
  return(result);
 8003f12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe f903 	bl	8002124 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8003f1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2a:	ba1a      	rev	r2, r3
 8003f2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f30:	601a      	str	r2, [r3, #0]
  return(result);
 8003f32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe f8f3 	bl	8002124 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8003f3e:	bf00      	nop
 8003f40:	2004      	movs	r0, #4
 8003f42:	f7fe fad7 	bl	80024f4 <CRYP_GetFlagStatus>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f9      	beq.n	8003f40 <CRYP_AES_GCM+0xb50>
    
    tagaddr = (uint32_t)AuthTAG;
 8003f4c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003f50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003f54:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003f58:	f7fe f8f4 	bl	8002144 <CRYP_DataOut>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003f60:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f64:	3304      	adds	r3, #4
 8003f66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003f6a:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003f6e:	f7fe f8e9 	bl	8002144 <CRYP_DataOut>
 8003f72:	4603      	mov	r3, r0
 8003f74:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003f76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003f80:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003f84:	f7fe f8de 	bl	8002144 <CRYP_DataOut>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003f8c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f90:	3304      	adds	r3, #4
 8003f92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8003f96:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8003f9a:	f7fe f8d3 	bl	8002144 <CRYP_DataOut>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8003fa2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f7fe f89b 	bl	80020e8 <CRYP_Cmd>

  return status;
 8003fb2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop

08003fc4 <CRYP_AES_CCM>:
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
                         uint8_t *Output,
                         uint8_t *AuthTAG, uint32_t TAGSize)
{
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b0db      	sub	sp, #364	; 0x16c
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	f107 0008 	add.w	r0, r7, #8
 8003fd0:	6001      	str	r1, [r0, #0]
 8003fd2:	1d39      	adds	r1, r7, #4
 8003fd4:	600a      	str	r2, [r1, #0]
 8003fd6:	463a      	mov	r2, r7
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	f107 030f 	add.w	r3, r7, #15
 8003fde:	4622      	mov	r2, r4
 8003fe0:	701a      	strb	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003fe2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  ErrorStatus status = SUCCESS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  uint32_t keyaddr    = (uint32_t)Key;
 8003ff6:	463b      	mov	r3, r7
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  uint32_t inputaddr  = (uint32_t)Input;
 8003ffe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004002:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  uint32_t outputaddr = (uint32_t)Output;
 8004006:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800400a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  uint32_t headeraddr = (uint32_t)Header;
 800400e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004012:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8004016:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800401a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  uint32_t headersize = HLength;
 800401e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004022:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  uint32_t loopcounter = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  uint32_t bufferidx = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  uint8_t blockb0[16] = {0};/* Block B0 */
 8004032:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004036:	461a      	mov	r2, r3
 8004038:	2300      	movs	r3, #0
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	6053      	str	r3, [r2, #4]
 800403e:	6093      	str	r3, [r2, #8]
 8004040:	60d3      	str	r3, [r2, #12]
  uint8_t ctr[16] = {0}; /* Counter */
 8004042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004046:	461a      	mov	r2, r3
 8004048:	2300      	movs	r3, #0
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	6053      	str	r3, [r2, #4]
 800404e:	6093      	str	r3, [r2, #8]
 8004050:	60d3      	str	r3, [r2, #12]
  uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 8004052:	f107 0314 	add.w	r3, r7, #20
 8004056:	461a      	mov	r2, r3
 8004058:	2300      	movs	r3, #0
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	6053      	str	r3, [r2, #4]
 800405e:	6093      	str	r3, [r2, #8]
 8004060:	60d3      	str	r3, [r2, #12]
  uint32_t ctraddr = (uint32_t)ctr;
 8004062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004066:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  uint32_t b0addr = (uint32_t)blockb0;
 800406a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800406e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  
  /************************ Formatting the header block ***********************/
  if(headersize != 0)
 8004072:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80b0 	beq.w	80041dc <CRYP_AES_CCM+0x218>
  {
    /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
    if(headersize < 65280)
 800407c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004080:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8004084:	d21e      	bcs.n	80040c4 <CRYP_AES_CCM+0x100>
    {
      HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 8004086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004090:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004094:	4413      	add	r3, r2
 8004096:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800409a:	0a12      	lsrs	r2, r2, #8
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 80040a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80040aa:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80040ae:	4413      	add	r3, r2
 80040b0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]
      headersize += 2;
 80040b8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80040bc:	3302      	adds	r3, #2
 80040be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040c2:	e042      	b.n	800414a <CRYP_AES_CCM+0x186>
    }
    else
    {
      /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
      HBuffer[bufferidx++] = 0xFF;
 80040c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80040ce:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80040d2:	4413      	add	r3, r2
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = 0xFE;
 80040d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80040e2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80040e6:	4413      	add	r3, r2
 80040e8:	22fe      	movs	r2, #254	; 0xfe
 80040ea:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0xff000000;
 80040ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80040f6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80040fa:	4413      	add	r3, r2
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x00ff0000;
 8004100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800410a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800410e:	4413      	add	r3, r2
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
 8004114:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800411e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004122:	4413      	add	r3, r2
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x000000ff;
 8004128:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004132:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004136:	4413      	add	r3, r2
 8004138:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]
      headersize += 6;
 8004140:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004144:	3306      	adds	r3, #6
 8004146:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004150:	e013      	b.n	800417a <CRYP_AES_CCM+0x1b6>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
 8004152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800415c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004160:	4413      	add	r3, r2
 8004162:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8004166:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800416a:	440a      	add	r2, r1
 800416c:	7812      	ldrb	r2, [r2, #0]
 800416e:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
      HBuffer[bufferidx++] = headersize & 0x000000ff;
      headersize += 6;
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8004170:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004174:	3301      	adds	r3, #1
 8004176:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800417a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800417e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004182:	429a      	cmp	r2, r3
 8004184:	d3e5      	bcc.n	8004152 <CRYP_AES_CCM+0x18e>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
 8004186:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <CRYP_AES_CCM+0x210>
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8004192:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004196:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800419a:	e00b      	b.n	80041b4 <CRYP_AES_CCM+0x1f0>
      {
        HBuffer[loopcounter] = 0;
 800419c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80041a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80041a4:	4413      	add	r3, r2
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 80041aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80041ae:	3301      	adds	r3, #1
 80041b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80041b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	3301      	adds	r3, #1
 80041bc:	011a      	lsls	r2, r3, #4
 80041be:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d2ea      	bcs.n	800419c <CRYP_AES_CCM+0x1d8>
      {
        HBuffer[loopcounter] = 0;
      }
      /* Set the header size to modulo 16 */
      headersize = ((headersize/16) + 1) * 16;
 80041c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	3301      	adds	r3, #1
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    }
    /* set the pointer headeraddr to HBuffer */
    headeraddr = (uint32_t)HBuffer;
 80041d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80041d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  }
  /************************* Formatting the block B0 **************************/
  if(headersize != 0)
 80041dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <CRYP_AES_CCM+0x228>
  {
    blockb0[0] = 0x40;
 80041e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041e8:	2240      	movs	r2, #64	; 0x40
 80041ea:	701a      	strb	r2, [r3, #0]
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
 80041ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	3b02      	subs	r3, #2
 80041fa:	0fd9      	lsrs	r1, r3, #31
 80041fc:	440b      	add	r3, r1
 80041fe:	105b      	asrs	r3, r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800420a:	b2d9      	uxtb	r1, r3
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f1c3 030e 	rsb	r3, r3, #14
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	430b      	orrs	r3, r1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	4313      	orrs	r3, r2
 8004224:	b2da      	uxtb	r2, r3
 8004226:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800422a:	701a      	strb	r2, [r3, #0]
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004232:	e011      	b.n	8004258 <CRYP_AES_CCM+0x294>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
 8004234:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004238:	3301      	adds	r3, #1
 800423a:	f107 0208 	add.w	r2, r7, #8
 800423e:	6811      	ldr	r1, [r2, #0]
 8004240:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004244:	440a      	add	r2, r1
 8004246:	7811      	ldrb	r1, [r2, #0]
 8004248:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800424c:	54d1      	strb	r1, [r2, r3]
    blockb0[0] = 0x40;
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 800424e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004252:	3301      	adds	r3, #1
 8004254:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d3e7      	bcc.n	8004234 <CRYP_AES_CCM+0x270>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 8004264:	e00b      	b.n	800427e <CRYP_AES_CCM+0x2ba>
  {
    blockb0[loopcounter+1] = 0;
 8004266:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800426a:	3301      	adds	r3, #1
 800426c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004270:	2100      	movs	r1, #0
 8004272:	54d1      	strb	r1, [r2, r3]
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 8004274:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004278:	3301      	adds	r3, #1
 800427a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800427e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d9ef      	bls.n	8004266 <CRYP_AES_CCM+0x2a2>
  {
    blockb0[loopcounter+1] = 0;
  }
  
  blockb0[14] = ((ILength >> 8) & 0xFF);
 8004286:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b2da      	uxtb	r2, r3
 800428e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004292:	739a      	strb	r2, [r3, #14]
  blockb0[15] = (ILength & 0xFF);
 8004294:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004298:	b2da      	uxtb	r2, r3
 800429a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800429e:	73da      	strb	r2, [r3, #15]
     Bits 7 and 6 are reserved and shall be set to 0
     Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
 80042a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b0:	701a      	strb	r2, [r3, #0]
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 80042b2:	2301      	movs	r3, #1
 80042b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80042b8:	e011      	b.n	80042de <CRYP_AES_CCM+0x31a>
  {
    ctr[loopcounter] = blockb0[loopcounter];
 80042ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80042be:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80042c2:	4413      	add	r3, r2
 80042c4:	7819      	ldrb	r1, [r3, #0]
 80042c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042ca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80042ce:	4413      	add	r3, r2
 80042d0:	460a      	mov	r2, r1
 80042d2:	701a      	strb	r2, [r3, #0]
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 80042d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80042d8:	3301      	adds	r3, #1
 80042da:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d8e6      	bhi.n	80042ba <CRYP_AES_CCM+0x2f6>
  {
    ctr[loopcounter] = blockb0[loopcounter];
  }
  /* Set the LSB to 1 */
  ctr[15] |= 0x01;
 80042ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f0:	7bdb      	ldrb	r3, [r3, #15]
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042fc:	73da      	strb	r2, [r3, #15]
  
  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80042fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd fe70 	bl	8001fe8 <CRYP_KeyStructInit>
  
  switch(Keysize)
 8004308:	f8b7 3178 	ldrh.w	r3, [r7, #376]	; 0x178
 800430c:	2bc0      	cmp	r3, #192	; 0xc0
 800430e:	d055      	beq.n	80043bc <CRYP_AES_CCM+0x3f8>
 8004310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004314:	f000 80ca 	beq.w	80044ac <CRYP_AES_CCM+0x4e8>
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d000      	beq.n	800431e <CRYP_AES_CCM+0x35a>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800431c:	e166      	b.n	80045ec <CRYP_AES_CCM+0x628>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  
  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800431e:	2300      	movs	r3, #0
 8004320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004324:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004332:	ba1b      	rev	r3, r3
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8004338:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800433c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004340:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8004342:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004346:	3304      	adds	r3, #4
 8004348:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800434c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800435a:	ba1b      	rev	r3, r3
 800435c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8004360:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004364:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004368:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 800436a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800436e:	3304      	adds	r3, #4
 8004370:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004374:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800437e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004382:	ba1b      	rev	r3, r3
 8004384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8004388:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800438c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004390:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8004392:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004396:	3304      	adds	r3, #4
 8004398:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800439c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043aa:	ba1b      	rev	r3, r3
 80043ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 80043b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80043b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043b8:	61da      	str	r2, [r3, #28]
    break;
 80043ba:	e117      	b.n	80045ec <CRYP_AES_CCM+0x628>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80043bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80043c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043d2:	ba1b      	rev	r3, r3
 80043d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80043d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043e0:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 80043e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043e6:	3304      	adds	r3, #4
 80043e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80043ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043fa:	ba1b      	rev	r3, r3
 80043fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8004400:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004404:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004408:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 800440a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800440e:	3304      	adds	r3, #4
 8004410:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004414:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004422:	ba1b      	rev	r3, r3
 8004424:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 8004428:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800442c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004430:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8004432:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004436:	3304      	adds	r3, #4
 8004438:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800443c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444a:	ba1b      	rev	r3, r3
 800444c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8004450:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004454:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004458:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 800445a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800445e:	3304      	adds	r3, #4
 8004460:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004464:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800446e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004472:	ba1b      	rev	r3, r3
 8004474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8004478:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800447c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004480:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8004482:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004486:	3304      	adds	r3, #4
 8004488:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800448c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004496:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800449a:	ba1b      	rev	r3, r3
 800449c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 80044a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80044a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044a8:	61da      	str	r2, [r3, #28]
    break;
 80044aa:	e09f      	b.n	80045ec <CRYP_AES_CCM+0x628>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80044ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80044b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044c2:	ba1b      	rev	r3, r3
 80044c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 80044c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80044cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044d0:	601a      	str	r2, [r3, #0]
    keyaddr+=4;
 80044d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044d6:	3304      	adds	r3, #4
 80044d8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80044dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044ea:	ba1b      	rev	r3, r3
 80044ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 80044f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80044f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044f8:	605a      	str	r2, [r3, #4]
    keyaddr+=4;
 80044fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044fe:	3304      	adds	r3, #4
 8004500:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004504:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004512:	ba1b      	rev	r3, r3
 8004514:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8004518:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800451c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004520:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 8004522:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004526:	3304      	adds	r3, #4
 8004528:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800452c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453a:	ba1b      	rev	r3, r3
 800453c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8004540:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004544:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004548:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 800454a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800454e:	3304      	adds	r3, #4
 8004550:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004554:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800455e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004562:	ba1b      	rev	r3, r3
 8004564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8004568:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800456c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004570:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8004572:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004576:	3304      	adds	r3, #4
 8004578:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800457c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458a:	ba1b      	rev	r3, r3
 800458c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8004590:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004594:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004598:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 800459a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800459e:	3304      	adds	r3, #4
 80045a0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80045a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045b2:	ba1b      	rev	r3, r3
 80045b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 80045b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045c0:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 80045c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80045c6:	3304      	adds	r3, #4
 80045c8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80045cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045da:	ba1b      	rev	r3, r3
 80045dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 80045e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045e8:	61da      	str	r2, [r3, #28]
    break;
 80045ea:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 80045ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045fa:	ba1b      	rev	r3, r3
 80045fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 8004600:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004608:	601a      	str	r2, [r3, #0]
  ctraddr+=4;
 800460a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800460e:	3304      	adds	r3, #4
 8004610:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 8004614:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800461e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004622:	ba1b      	rev	r3, r3
 8004624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8004628:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800462c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004630:	605a      	str	r2, [r3, #4]
  ctraddr+=4;
 8004632:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004636:	3304      	adds	r3, #4
 8004638:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 800463c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464a:	ba1b      	rev	r3, r3
 800464c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 8004650:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004654:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004658:	609a      	str	r2, [r3, #8]
  ctraddr+=4;
 800465a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800465e:	3304      	adds	r3, #4
 8004660:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 8004664:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004672:	ba1b      	rev	r3, r3
 8004674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8004678:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800467c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004680:	60da      	str	r2, [r3, #12]
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8004682:	f107 030f 	add.w	r3, r7, #15
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 81d1 	bne.w	8004a30 <CRYP_AES_CCM+0xa6c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800468e:	f7fd fd1b 	bl	80020c8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8004692:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004696:	4618      	mov	r0, r3
 8004698:	f7fd fc7a 	bl	8001f90 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800469c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fd fcc3 	bl	800202c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80046a6:	2300      	movs	r3, #0
 80046a8:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 80046aa:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 80046ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 80046b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd fc00 	bl	8001ec0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7fd fce5 	bl	8002090 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 80046c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80046ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fd fd25 	bl	8002124 <CRYP_DataIn>
    b0addr+=4;
 80046da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046de:	3304      	adds	r3, #4
 80046e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80046e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd fd1a 	bl	8002124 <CRYP_DataIn>
    b0addr+=4;
 80046f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046f4:	3304      	adds	r3, #4
 80046f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80046fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7fd fd0f 	bl	8002124 <CRYP_DataIn>
    b0addr+=4;
 8004706:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800470a:	3304      	adds	r3, #4
 800470c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004710:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fd04 	bl	8002124 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800471c:	2001      	movs	r0, #1
 800471e:	f7fd fce3 	bl	80020e8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 8004722:	bf00      	nop
 8004724:	f7fd fecc 	bl	80024c0 <CRYP_GetCmdStatus>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d0fa      	beq.n	8004724 <CRYP_AES_CCM+0x760>
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 800472e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004732:	2b00      	cmp	r3, #0
 8004734:	d071      	beq.n	800481a <CRYP_AES_CCM+0x856>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8004736:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800473a:	f7fd fca9 	bl	8002090 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800473e:	2001      	movs	r0, #1
 8004740:	f7fd fcd2 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8004744:	f7fd febc 	bl	80024c0 <CRYP_GetCmdStatus>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <CRYP_AES_CCM+0x78e>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 800474e:	2300      	movs	r3, #0
 8004750:	e35f      	b.n	8004e12 <CRYP_AES_CCM+0xe4e>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004758:	e037      	b.n	80047ca <CRYP_AES_CCM+0x806>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 800475a:	bf00      	nop
 800475c:	2001      	movs	r0, #1
 800475e:	f7fd fec9 	bl	80024f4 <CRYP_GetFlagStatus>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f9      	beq.n	800475c <CRYP_AES_CCM+0x798>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004768:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fd fcd8 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8004774:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004778:	3304      	adds	r3, #4
 800477a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800477e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fd fccd 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 800478a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800478e:	3304      	adds	r3, #4
 8004790:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004794:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fcc2 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 80047a0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047a4:	3304      	adds	r3, #4
 80047a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80047aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fcb7 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 80047b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047ba:	3304      	adds	r3, #4
 80047bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 80047c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047c4:	3310      	adds	r3, #16
 80047c6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80047ca:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80047ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3c1      	bcc.n	800475a <CRYP_AES_CCM+0x796>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 80047d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80047de:	2010      	movs	r0, #16
 80047e0:	f7fd fe88 	bl	80024f4 <CRYP_GetFlagStatus>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        counter++;
 80047ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047f6:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80047f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d003      	beq.n	800480c <CRYP_AES_CCM+0x848>
 8004804:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e8      	bne.n	80047de <CRYP_AES_CCM+0x81a>

      if (busystatus != RESET)
 800480c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <CRYP_AES_CCM+0x856>
      {
        status = ERROR;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800481a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 80ab 	beq.w	800497a <CRYP_AES_CCM+0x9b6>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8004824:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004828:	f7fd fc32 	bl	8002090 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800482c:	2001      	movs	r0, #1
 800482e:	f7fd fc5b 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8004832:	f7fd fe45 	bl	80024c0 <CRYP_GetCmdStatus>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <CRYP_AES_CCM+0x87c>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 800483c:	2300      	movs	r3, #0
 800483e:	e2e8      	b.n	8004e12 <CRYP_AES_CCM+0xe4e>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004846:	e08d      	b.n	8004964 <CRYP_AES_CCM+0x9a0>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8004848:	bf00      	nop
 800484a:	2001      	movs	r0, #1
 800484c:	f7fd fe52 	bl	80024f4 <CRYP_GetFlagStatus>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f9      	beq.n	800484a <CRYP_AES_CCM+0x886>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004856:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd fc61 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8004862:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004866:	3304      	adds	r3, #4
 8004868:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800486c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fd fc56 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8004878:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800487c:	3304      	adds	r3, #4
 800487e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004882:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fc4b 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 800488e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004892:	3304      	adds	r3, #4
 8004894:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004898:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd fc40 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 80048a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80048a8:	3304      	adds	r3, #4
 80048aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        
        /* Wait until the complete message has been processed */
        counter = 0;
 80048ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80048b6:	2010      	movs	r0, #16
 80048b8:	f7fd fe1c 	bl	80024f4 <CRYP_GetFlagStatus>
 80048bc:	4603      	mov	r3, r0
 80048be:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
          counter++;
 80048c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048ce:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80048d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d003      	beq.n	80048e4 <CRYP_AES_CCM+0x920>
 80048dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e8      	bne.n	80048b6 <CRYP_AES_CCM+0x8f2>

        if (busystatus != RESET)
 80048e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <CRYP_AES_CCM+0x930>
        {
          status = ERROR;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 80048f2:	e032      	b.n	800495a <CRYP_AES_CCM+0x996>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 80048f4:	bf00      	nop
 80048f6:	2004      	movs	r0, #4
 80048f8:	f7fd fdfc 	bl	80024f4 <CRYP_GetFlagStatus>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f9      	beq.n	80048f6 <CRYP_AES_CCM+0x932>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004902:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8004906:	f7fd fc1d 	bl	8002144 <CRYP_DataOut>
 800490a:	4603      	mov	r3, r0
 800490c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800490e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004912:	3304      	adds	r3, #4
 8004914:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004918:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800491c:	f7fd fc12 	bl	8002144 <CRYP_DataOut>
 8004920:	4603      	mov	r3, r0
 8004922:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004924:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004928:	3304      	adds	r3, #4
 800492a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800492e:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8004932:	f7fd fc07 	bl	8002144 <CRYP_DataOut>
 8004936:	4603      	mov	r3, r0
 8004938:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800493a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800493e:	3304      	adds	r3, #4
 8004940:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004944:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8004948:	f7fd fbfc 	bl	8002144 <CRYP_DataOut>
 800494c:	4603      	mov	r3, r0
 800494e:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004950:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004954:	3304      	adds	r3, #4
 8004956:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800495a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800495e:	3310      	adds	r3, #16
 8004960:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004964:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004968:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800496c:	429a      	cmp	r2, r3
 800496e:	d204      	bcs.n	800497a <CRYP_AES_CCM+0x9b6>
 8004970:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004974:	2b00      	cmp	r3, #0
 8004976:	f47f af67 	bne.w	8004848 <CRYP_AES_CCM+0x884>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 800497a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800497e:	f7fd fb87 	bl	8002090 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8004982:	2001      	movs	r0, #1
 8004984:	f7fd fbb0 	bl	80020e8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8004988:	f7fd fd9a 	bl	80024c0 <CRYP_GetCmdStatus>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <CRYP_AES_CCM+0x9d2>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8004992:	2300      	movs	r3, #0
 8004994:	e23d      	b.n	8004e12 <CRYP_AES_CCM+0xe4e>
    }
    
    ctraddr = (uint32_t)ctr;
 8004996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800499a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800499e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fd fbbd 	bl	8002124 <CRYP_DataIn>
    ctraddr+=4;
 80049aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049ae:	3304      	adds	r3, #4
 80049b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 80049b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fbb2 	bl	8002124 <CRYP_DataIn>
    ctraddr+=4;
 80049c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049c4:	3304      	adds	r3, #4
 80049c6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 80049ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fd fba7 	bl	8002124 <CRYP_DataIn>
    ctraddr+=4;
 80049d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049da:	3304      	adds	r3, #4
 80049dc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 80049e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fd fb9a 	bl	8002124 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 80049f0:	bf00      	nop
 80049f2:	2004      	movs	r0, #4
 80049f4:	f7fd fd7e 	bl	80024f4 <CRYP_GetFlagStatus>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f9      	beq.n	80049f2 <CRYP_AES_CCM+0xa2e>
    
    /* Read the Auth TAG in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 80049fe:	f7fd fba1 	bl	8002144 <CRYP_DataOut>
 8004a02:	4602      	mov	r2, r0
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	601a      	str	r2, [r3, #0]
    temptag[1] = CRYP_DataOut();
 8004a0a:	f7fd fb9b 	bl	8002144 <CRYP_DataOut>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	605a      	str	r2, [r3, #4]
    temptag[2] = CRYP_DataOut();
 8004a16:	f7fd fb95 	bl	8002144 <CRYP_DataOut>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	609a      	str	r2, [r3, #8]
    temptag[3] = CRYP_DataOut();
 8004a22:	f7fd fb8f 	bl	8002144 <CRYP_DataOut>
 8004a26:	4602      	mov	r2, r0
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	e1cf      	b.n	8004dd0 <CRYP_AES_CCM+0xe0c>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8004a30:	f7fd fb4a 	bl	80020c8 <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8004a34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd faa9 	bl	8001f90 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8004a3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd faf2 	bl	800202c <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004a48:	2304      	movs	r3, #4
 8004a4a:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 8004a4c:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8004a50:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8004a58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fd fa2f 	bl	8001ec0 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8004a62:	2000      	movs	r0, #0
 8004a64:	f7fd fb14 	bl	8002090 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 8004a68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004a70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd fb54 	bl	8002124 <CRYP_DataIn>
    b0addr+=4;
 8004a7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a80:	3304      	adds	r3, #4
 8004a82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004a86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fb49 	bl	8002124 <CRYP_DataIn>
    b0addr+=4;
 8004a92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a96:	3304      	adds	r3, #4
 8004a98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004a9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd fb3e 	bl	8002124 <CRYP_DataIn>
    b0addr+=4;
 8004aa8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004aac:	3304      	adds	r3, #4
 8004aae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8004ab2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fb33 	bl	8002124 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f7fd fb12 	bl	80020e8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 8004ac4:	bf00      	nop
 8004ac6:	f7fd fcfb 	bl	80024c0 <CRYP_GetCmdStatus>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d0fa      	beq.n	8004ac6 <CRYP_AES_CCM+0xb02>
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 8004ad0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d071      	beq.n	8004bbc <CRYP_AES_CCM+0xbf8>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8004ad8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004adc:	f7fd fad8 	bl	8002090 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fd fb01 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8004ae6:	f7fd fceb 	bl	80024c0 <CRYP_GetCmdStatus>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <CRYP_AES_CCM+0xb30>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8004af0:	2300      	movs	r3, #0
 8004af2:	e18e      	b.n	8004e12 <CRYP_AES_CCM+0xe4e>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004afa:	e037      	b.n	8004b6c <CRYP_AES_CCM+0xba8>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8004afc:	bf00      	nop
 8004afe:	2001      	movs	r0, #1
 8004b00:	f7fd fcf8 	bl	80024f4 <CRYP_GetFlagStatus>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f9      	beq.n	8004afe <CRYP_AES_CCM+0xb3a>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004b0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd fb07 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8004b16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004b20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fafc 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8004b2c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b30:	3304      	adds	r3, #4
 8004b32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004b36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fd faf1 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8004b42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b46:	3304      	adds	r3, #4
 8004b48:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8004b4c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fae6 	bl	8002124 <CRYP_DataIn>
        headeraddr+=4;
 8004b58:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8004b62:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b66:	3310      	adds	r3, #16
 8004b68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b6c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004b70:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d3c1      	bcc.n	8004afc <CRYP_AES_CCM+0xb38>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8004b78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004b80:	2010      	movs	r0, #16
 8004b82:	f7fd fcb7 	bl	80024f4 <CRYP_GetFlagStatus>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        counter++;
 8004b8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b98:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004b9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d003      	beq.n	8004bae <CRYP_AES_CCM+0xbea>
 8004ba6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e8      	bne.n	8004b80 <CRYP_AES_CCM+0xbbc>

      if (busystatus != RESET)
 8004bae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <CRYP_AES_CCM+0xbf8>
      {
        status = ERROR;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8004bbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 80ab 	beq.w	8004d1c <CRYP_AES_CCM+0xd58>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8004bc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004bca:	f7fd fa61 	bl	8002090 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8004bce:	2001      	movs	r0, #1
 8004bd0:	f7fd fa8a 	bl	80020e8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8004bd4:	f7fd fc74 	bl	80024c0 <CRYP_GetCmdStatus>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <CRYP_AES_CCM+0xc1e>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8004bde:	2300      	movs	r3, #0
 8004be0:	e117      	b.n	8004e12 <CRYP_AES_CCM+0xe4e>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004be8:	e08d      	b.n	8004d06 <CRYP_AES_CCM+0xd42>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8004bea:	bf00      	nop
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7fd fc81 	bl	80024f4 <CRYP_GetFlagStatus>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f9      	beq.n	8004bec <CRYP_AES_CCM+0xc28>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004bf8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fd fa90 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8004c04:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c08:	3304      	adds	r3, #4
 8004c0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004c0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd fa85 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8004c1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c1e:	3304      	adds	r3, #4
 8004c20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004c24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fa7a 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8004c30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c34:	3304      	adds	r3, #4
 8004c36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004c3a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fd fa6f 	bl	8002124 <CRYP_DataIn>
        inputaddr+=4;
 8004c46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8004c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004c58:	2010      	movs	r0, #16
 8004c5a:	f7fd fc4b 	bl	80024f4 <CRYP_GetFlagStatus>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
          counter++;
 8004c64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c70:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004c72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d003      	beq.n	8004c86 <CRYP_AES_CCM+0xcc2>
 8004c7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e8      	bne.n	8004c58 <CRYP_AES_CCM+0xc94>

        if (busystatus != RESET)
 8004c86:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <CRYP_AES_CCM+0xcd2>
        {
          status = ERROR;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8004c94:	e032      	b.n	8004cfc <CRYP_AES_CCM+0xd38>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8004c96:	bf00      	nop
 8004c98:	2004      	movs	r0, #4
 8004c9a:	f7fd fc2b 	bl	80024f4 <CRYP_GetFlagStatus>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f9      	beq.n	8004c98 <CRYP_AES_CCM+0xcd4>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004ca4:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8004ca8:	f7fd fa4c 	bl	8002144 <CRYP_DataOut>
 8004cac:	4603      	mov	r3, r0
 8004cae:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004cb0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004cba:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8004cbe:	f7fd fa41 	bl	8002144 <CRYP_DataOut>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004cc6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cca:	3304      	adds	r3, #4
 8004ccc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004cd0:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8004cd4:	f7fd fa36 	bl	8002144 <CRYP_DataOut>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004cdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004ce6:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8004cea:	f7fd fa2b 	bl	8002144 <CRYP_DataOut>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8004cf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8004cfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d00:	3310      	adds	r3, #16
 8004d02:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d06:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004d0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d204      	bcs.n	8004d1c <CRYP_AES_CCM+0xd58>
 8004d12:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f47f af67 	bne.w	8004bea <CRYP_AES_CCM+0xc26>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8004d1c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8004d20:	f7fd f9b6 	bl	8002090 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fd f9df 	bl	80020e8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8004d2a:	f7fd fbc9 	bl	80024c0 <CRYP_GetCmdStatus>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <CRYP_AES_CCM+0xd74>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8004d34:	2300      	movs	r3, #0
 8004d36:	e06c      	b.n	8004e12 <CRYP_AES_CCM+0xe4e>
    }
    
    ctraddr = (uint32_t)ctr;
 8004d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d3c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8004d40:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd f9ec 	bl	8002124 <CRYP_DataIn>
    ctraddr+=4;
 8004d4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d50:	3304      	adds	r3, #4
 8004d52:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8004d56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd f9e1 	bl	8002124 <CRYP_DataIn>
    ctraddr+=4;
 8004d62:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d66:	3304      	adds	r3, #4
 8004d68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8004d6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd f9d6 	bl	8002124 <CRYP_DataIn>
    ctraddr+=4;
 8004d78:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8004d82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fd f9c9 	bl	8002124 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 8004d92:	bf00      	nop
 8004d94:	2004      	movs	r0, #4
 8004d96:	f7fd fbad 	bl	80024f4 <CRYP_GetFlagStatus>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f9      	beq.n	8004d94 <CRYP_AES_CCM+0xdd0>
    
    /* Read the Authentaication TAG (MAC) in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8004da0:	f7fd f9d0 	bl	8002144 <CRYP_DataOut>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	601a      	str	r2, [r3, #0]
    temptag[1] = CRYP_DataOut();
 8004dac:	f7fd f9ca 	bl	8002144 <CRYP_DataOut>
 8004db0:	4602      	mov	r2, r0
 8004db2:	f107 0314 	add.w	r3, r7, #20
 8004db6:	605a      	str	r2, [r3, #4]
    temptag[2] = CRYP_DataOut();
 8004db8:	f7fd f9c4 	bl	8002144 <CRYP_DataOut>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	f107 0314 	add.w	r3, r7, #20
 8004dc2:	609a      	str	r2, [r3, #8]
    temptag[3] = CRYP_DataOut();
 8004dc4:	f7fd f9be 	bl	8002144 <CRYP_DataOut>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	f107 0314 	add.w	r3, r7, #20
 8004dce:	60da      	str	r2, [r3, #12]
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004dd6:	e011      	b.n	8004dfc <CRYP_AES_CCM+0xe38>
  {
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 8004dd8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004ddc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004de0:	4413      	add	r3, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	f107 0214 	add.w	r2, r7, #20
 8004de8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004dec:	4413      	add	r3, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	700b      	strb	r3, [r1, #0]
    temptag[2] = CRYP_DataOut();
    temptag[3] = CRYP_DataOut();
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8004df2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004df6:	3301      	adds	r3, #1
 8004df8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004dfc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004e00:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3e7      	bcc.n	8004dd8 <CRYP_AES_CCM+0xe14>
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
  }
  
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7fd f96d 	bl	80020e8 <CRYP_Cmd>

  return status;
 8004e0e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}

08004e1c <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b09d      	sub	sp, #116	; 0x74
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	65fb      	str	r3, [r7, #92]	; 0x5c
  ErrorStatus status = SUCCESS;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint32_t keyaddr    = (uint32_t)Key;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  uint32_t inputaddr  = (uint32_t)Input;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 8004e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e46:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t i = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8004e4c:	f107 0318 	add.w	r3, r7, #24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fd f8c9 	bl	8001fe8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d102      	bne.n	8004e62 <CRYP_DES_ECB+0x46>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e60:	e001      	b.n	8004e66 <CRYP_DES_ECB+0x4a>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004e62:	2304      	movs	r3, #4
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8004e66:	2310      	movs	r3, #16
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&DES_CRYP_InitStructure);
 8004e6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd f824 	bl	8001ec0 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e80:	ba1b      	rev	r3, r3
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e86:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8004e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	65bb      	str	r3, [r7, #88]	; 0x58
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e96:	ba1b      	rev	r3, r3
 8004e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004e9e:	f107 0318 	add.w	r3, r7, #24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fd f874 	bl	8001f90 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004ea8:	f7fd f90e 	bl	80020c8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004eac:	2001      	movs	r0, #1
 8004eae:	f7fd f91b 	bl	80020e8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8004eb2:	f7fd fb05 	bl	80024c0 <CRYP_GetCmdStatus>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <CRYP_DES_ECB+0xa4>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e04a      	b.n	8004f56 <CRYP_DES_ECB+0x13a>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec4:	e03a      	b.n	8004f3c <CRYP_DES_ECB+0x120>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fd f92a 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8004ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	66bb      	str	r3, [r7, #104]	; 0x68
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fd f922 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8004ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	66bb      	str	r3, [r7, #104]	; 0x68

/* Wait until the complete message has been processed */
    counter = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004eea:	2010      	movs	r0, #16
 8004eec:	f7fd fb02 	bl	80024f4 <CRYP_GetFlagStatus>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
      counter++;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d002      	beq.n	8004f08 <CRYP_DES_ECB+0xec>
 8004f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <CRYP_DES_ECB+0xce>

    if (busystatus != RESET)
 8004f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <CRYP_DES_ECB+0xfa>
   {
       status = ERROR;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004f14:	e00f      	b.n	8004f36 <CRYP_DES_ECB+0x11a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004f16:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8004f18:	f7fd f914 	bl	8002144 <CRYP_DataOut>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f22:	3304      	adds	r3, #4
 8004f24:	667b      	str	r3, [r7, #100]	; 0x64
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004f26:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8004f28:	f7fd f90c 	bl	8002144 <CRYP_DataOut>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f32:	3304      	adds	r3, #4
 8004f34:	667b      	str	r3, [r7, #100]	; 0x64
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f38:	3308      	adds	r3, #8
 8004f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d203      	bcs.n	8004f4c <CRYP_DES_ECB+0x130>
 8004f44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1bc      	bne.n	8004ec6 <CRYP_DES_ECB+0xaa>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f7fd f8cb 	bl	80020e8 <CRYP_Cmd>

  return status; 
 8004f52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3774      	adds	r7, #116	; 0x74
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}
 8004f5e:	bf00      	nop

08004f60 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b0a5      	sub	sp, #148	; 0x94
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 8004f88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t i = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8004f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd f822 	bl	8001fe8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d102      	bne.n	8004fb0 <CRYP_DES_CBC+0x50>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004faa:	2300      	movs	r3, #0
 8004fac:	647b      	str	r3, [r7, #68]	; 0x44
 8004fae:	e001      	b.n	8004fb4 <CRYP_DES_CBC+0x54>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 8004fb4:	2318      	movs	r3, #24
 8004fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&DES_CRYP_InitStructure);
 8004fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc ff7d 	bl	8001ec0 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fce:	ba1b      	rev	r3, r3
 8004fd0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd8:	3304      	adds	r3, #4
 8004fda:	67bb      	str	r3, [r7, #120]	; 0x78
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	ba1b      	rev	r3, r3
 8004fe6:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8004fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fea:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fc ffcd 	bl	8001f90 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ffe:	ba1b      	rev	r3, r3
 8005000:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8005002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005004:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8005006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005008:	3304      	adds	r3, #4
 800500a:	677b      	str	r3, [r7, #116]	; 0x74
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800500c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005014:	ba1b      	rev	r3, r3
 8005016:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800501a:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 800501c:	f107 0314 	add.w	r3, r7, #20
 8005020:	4618      	mov	r0, r3
 8005022:	f7fd f803 	bl	800202c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8005026:	f7fd f84f 	bl	80020c8 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800502a:	2001      	movs	r0, #1
 800502c:	f7fd f85c 	bl	80020e8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8005030:	f7fd fa46 	bl	80024c0 <CRYP_GetCmdStatus>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <CRYP_DES_CBC+0xde>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 800503a:	2300      	movs	r3, #0
 800503c:	e05b      	b.n	80050f6 <CRYP_DES_CBC+0x196>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800503e:	2300      	movs	r3, #0
 8005040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005044:	e048      	b.n	80050d8 <CRYP_DES_CBC+0x178>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd f869 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8005052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005056:	3304      	adds	r3, #4
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800505c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd f85e 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8005068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800506c:	3304      	adds	r3, #4
 800506e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005076:	2010      	movs	r0, #16
 8005078:	f7fd fa3c 	bl	80024f4 <CRYP_GetFlagStatus>
 800507c:	4603      	mov	r3, r0
 800507e:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3301      	adds	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d002      	beq.n	8005094 <CRYP_DES_CBC+0x134>
 800508e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <CRYP_DES_CBC+0x116>

    if (busystatus != RESET)
 8005094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <CRYP_DES_CBC+0x142>
   {
       status = ERROR;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80050a0:	e015      	b.n	80050ce <CRYP_DES_CBC+0x16e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80050a2:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80050a6:	f7fd f84d 	bl	8002144 <CRYP_DataOut>
 80050aa:	4603      	mov	r3, r0
 80050ac:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80050ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050b2:	3304      	adds	r3, #4
 80050b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80050b8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80050bc:	f7fd f842 	bl	8002144 <CRYP_DataOut>
 80050c0:	4603      	mov	r3, r0
 80050c2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80050c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c8:	3304      	adds	r3, #4
 80050ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80050ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050d2:	3308      	adds	r3, #8
 80050d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d203      	bcs.n	80050ec <CRYP_DES_CBC+0x18c>
 80050e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ac      	bne.n	8005046 <CRYP_DES_CBC+0xe6>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80050ec:	2000      	movs	r0, #0
 80050ee:	f7fc fffb 	bl	80020e8 <CRYP_Cmd>

  return status; 
 80050f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3794      	adds	r7, #148	; 0x94
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd90      	pop	{r4, r7, pc}
 80050fe:	bf00      	nop

08005100 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b0a5      	sub	sp, #148	; 0x94
 8005104:	af00      	add	r7, sp, #0
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 8005118:	2301      	movs	r3, #1
 800511a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 8005128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800512c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t i = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8005136:	f107 0318 	add.w	r3, r7, #24
 800513a:	4618      	mov	r0, r3
 800513c:	f7fc ff54 	bl	8001fe8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <CRYP_TDES_ECB+0x4c>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8005146:	2300      	movs	r3, #0
 8005148:	63bb      	str	r3, [r7, #56]	; 0x38
 800514a:	e001      	b.n	8005150 <CRYP_TDES_ECB+0x50>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800514c:	2304      	movs	r3, #4
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8005150:	2300      	movs	r3, #0
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&TDES_CRYP_InitStructure);
 8005158:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800515c:	4618      	mov	r0, r3
 800515e:	f7fc feaf 	bl	8001ec0 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800516a:	ba1b      	rev	r3, r3
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800516e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005170:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8005172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005174:	3304      	adds	r3, #4
 8005176:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8005178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800517e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005180:	ba1b      	rev	r3, r3
 8005182:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8005188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800518a:	3304      	adds	r3, #4
 800518c:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800518e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005196:	ba1b      	rev	r3, r3
 8005198:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 800519e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a0:	3304      	adds	r3, #4
 80051a2:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80051a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80051aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ac:	ba1b      	rev	r3, r3
 80051ae:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80051b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80051b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b6:	3304      	adds	r3, #4
 80051b8:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80051ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80051c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c2:	ba1b      	rev	r3, r3
 80051c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 80051c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 80051ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051cc:	3304      	adds	r3, #4
 80051ce:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80051d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d8:	ba1b      	rev	r3, r3
 80051da:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80051dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051de:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80051e0:	f107 0318 	add.w	r3, r7, #24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fc fed3 	bl	8001f90 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80051ea:	f7fc ff6d 	bl	80020c8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80051ee:	2001      	movs	r0, #1
 80051f0:	f7fc ff7a 	bl	80020e8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80051f4:	f7fd f964 	bl	80024c0 <CRYP_GetCmdStatus>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <CRYP_TDES_ECB+0x102>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80051fe:	2300      	movs	r3, #0
 8005200:	e05a      	b.n	80052b8 <CRYP_TDES_ECB+0x1b8>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8005202:	2300      	movs	r3, #0
 8005204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005208:	e048      	b.n	800529c <CRYP_TDES_ECB+0x19c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800520a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f7fc ff87 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8005216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800521a:	3304      	adds	r3, #4
 800521c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fc ff7c 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 800522c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005230:	3304      	adds	r3, #4
 8005232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800523a:	2010      	movs	r0, #16
 800523c:	f7fd f95a 	bl	80024f4 <CRYP_GetFlagStatus>
 8005240:	4603      	mov	r3, r0
 8005242:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3301      	adds	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d002      	beq.n	8005258 <CRYP_TDES_ECB+0x158>
 8005252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <CRYP_TDES_ECB+0x13a>

    if (busystatus != RESET)
 8005258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <CRYP_TDES_ECB+0x166>
    {
       status = ERROR;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005264:	e015      	b.n	8005292 <CRYP_TDES_ECB+0x192>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005266:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800526a:	f7fc ff6b 	bl	8002144 <CRYP_DataOut>
 800526e:	4603      	mov	r3, r0
 8005270:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005276:	3304      	adds	r3, #4
 8005278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800527c:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8005280:	f7fc ff60 	bl	8002144 <CRYP_DataOut>
 8005284:	4603      	mov	r3, r0
 8005286:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800528c:	3304      	adds	r3, #4
 800528e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8005292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005296:	3308      	adds	r3, #8
 8005298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800529c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d203      	bcs.n	80052ae <CRYP_TDES_ECB+0x1ae>
 80052a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ad      	bne.n	800520a <CRYP_TDES_ECB+0x10a>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80052ae:	2000      	movs	r0, #0
 80052b0:	f7fc ff1a 	bl	80020e8 <CRYP_Cmd>

  return status; 
 80052b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3794      	adds	r7, #148	; 0x94
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}

080052c0 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b0ad      	sub	sp, #180	; 0xb4
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ErrorStatus status = SUCCESS;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  uint32_t keyaddr    = (uint32_t)Key;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint32_t inputaddr  = (uint32_t)Input;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t outputaddr = (uint32_t)Output;
 80052ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t i = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8005300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005304:	4618      	mov	r0, r3
 8005306:	f7fc fe6f 	bl	8001fe8 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d102      	bne.n	8005316 <CRYP_TDES_CBC+0x56>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8005310:	2300      	movs	r3, #0
 8005312:	647b      	str	r3, [r7, #68]	; 0x44
 8005314:	e001      	b.n	800531a <CRYP_TDES_CBC+0x5a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8005316:	2304      	movs	r3, #4
 8005318:	647b      	str	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 800531a:	2308      	movs	r3, #8
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	64fb      	str	r3, [r7, #76]	; 0x4c

  CRYP_Init(&TDES_CRYP_InitStructure);
 8005322:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005326:	4618      	mov	r0, r3
 8005328:	f7fc fdca 	bl	8001ec0 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800532c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800533a:	ba1b      	rev	r3, r3
 800533c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800533e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8005342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005346:	3304      	adds	r3, #4
 8005348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800534c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800535a:	ba1b      	rev	r3, r3
 800535c:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 800535e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005360:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8005362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005366:	3304      	adds	r3, #4
 8005368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800536c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800537a:	ba1b      	rev	r3, r3
 800537c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800537e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8005382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005386:	3304      	adds	r3, #4
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800538c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800539a:	ba1b      	rev	r3, r3
 800539c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800539e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 80053a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053a6:	3304      	adds	r3, #4
 80053a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80053ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053ba:	ba1b      	rev	r3, r3
 80053bc:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80053be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 80053c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053c6:	3304      	adds	r3, #4
 80053c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80053cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053d6:	ba1b      	rev	r3, r3
 80053d8:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 80053da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053dc:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80053de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fdd4 	bl	8001f90 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80053e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80053f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f2:	ba1b      	rev	r3, r3
 80053f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80053fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053fe:	3304      	adds	r3, #4
 8005400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8005404:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800540c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800540e:	ba1b      	rev	r3, r3
 8005410:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8005412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005414:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8005416:	f107 0314 	add.w	r3, r7, #20
 800541a:	4618      	mov	r0, r3
 800541c:	f7fc fe06 	bl	800202c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8005420:	f7fc fe52 	bl	80020c8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8005424:	2001      	movs	r0, #1
 8005426:	f7fc fe5f 	bl	80020e8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800542a:	f7fd f849 	bl	80024c0 <CRYP_GetCmdStatus>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <CRYP_TDES_CBC+0x178>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8005434:	2300      	movs	r3, #0
 8005436:	e05e      	b.n	80054f6 <CRYP_TDES_CBC+0x236>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800543e:	e04b      	b.n	80054d8 <CRYP_TDES_CBC+0x218>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fc fe6c 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 800544c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005450:	3304      	adds	r3, #4
 8005452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7fc fe61 	bl	8002124 <CRYP_DataIn>
    inputaddr+=4;
 8005462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005466:	3304      	adds	r3, #4
 8005468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Wait until the complete message has been processed */
    counter = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005470:	2010      	movs	r0, #16
 8005472:	f7fd f83f 	bl	80024f4 <CRYP_GetFlagStatus>
 8005476:	4603      	mov	r3, r0
 8005478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      counter++;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	3301      	adds	r3, #1
 8005480:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d003      	beq.n	8005492 <CRYP_TDES_CBC+0x1d2>
 800548a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ee      	bne.n	8005470 <CRYP_TDES_CBC+0x1b0>

    if (busystatus != RESET)
 8005492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <CRYP_TDES_CBC+0x1e2>
   {
       status = ERROR;
 800549a:	2300      	movs	r3, #0
 800549c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80054a0:	e015      	b.n	80054ce <CRYP_TDES_CBC+0x20e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80054a2:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80054a6:	f7fc fe4d 	bl	8002144 <CRYP_DataOut>
 80054aa:	4603      	mov	r3, r0
 80054ac:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80054ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054b2:	3304      	adds	r3, #4
 80054b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80054b8:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80054bc:	f7fc fe42 	bl	8002144 <CRYP_DataOut>
 80054c0:	4603      	mov	r3, r0
 80054c2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80054c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054c8:	3304      	adds	r3, #4
 80054ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80054ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054d2:	3308      	adds	r3, #8
 80054d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80054dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d203      	bcs.n	80054ec <CRYP_TDES_CBC+0x22c>
 80054e4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1a9      	bne.n	8005440 <CRYP_TDES_CBC+0x180>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7fc fdfb 	bl	80020e8 <CRYP_Cmd>

  return status; 
 80054f2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	37b4      	adds	r7, #180	; 0xb4
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}
 80054fe:	bf00      	nop

08005500 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8005504:	2101      	movs	r1, #1
 8005506:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800550a:	f004 fc33 	bl	8009d74 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 800550e:	2100      	movs	r1, #0
 8005510:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8005514:	f004 fc2e 	bl	8009d74 <RCC_APB1PeriphResetCmd>
}
 8005518:	bf00      	nop
 800551a:	bd80      	pop	{r7, pc}

0800551c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800552e:	4b14      	ldr	r3, [pc, #80]	; (8005580 <DAC_Init+0x64>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8005534:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43db      	mvns	r3, r3
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8005554:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800555a:	4313      	orrs	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <DAC_Init+0x64>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6013      	str	r3, [r2, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40007400 	.word	0x40007400

08005584 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	60da      	str	r2, [r3, #12]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80055c2:	490d      	ldr	r1, [pc, #52]	; (80055f8 <DAC_Cmd+0x48>)
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <DAC_Cmd+0x48>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	2001      	movs	r0, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fa00 f303 	lsl.w	r3, r0, r3
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 80055d4:	e009      	b.n	80055ea <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80055d6:	4908      	ldr	r1, [pc, #32]	; (80055f8 <DAC_Cmd+0x48>)
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <DAC_Cmd+0x48>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	2001      	movs	r0, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	fa00 f303 	lsl.w	r3, r0, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	4013      	ands	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]
  }
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40007400 	.word	0x40007400

080055fc <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 800560e:	490e      	ldr	r1, [pc, #56]	; (8005648 <DAC_SoftwareTriggerCmd+0x4c>)
 8005610:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <DAC_SoftwareTriggerCmd+0x4c>)
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	2001      	movs	r0, #1
 800561a:	fa00 f303 	lsl.w	r3, r0, r3
 800561e:	4313      	orrs	r3, r2
 8005620:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 8005622:	e00a      	b.n	800563a <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8005624:	4908      	ldr	r1, [pc, #32]	; (8005648 <DAC_SoftwareTriggerCmd+0x4c>)
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <DAC_SoftwareTriggerCmd+0x4c>)
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	2001      	movs	r0, #1
 8005630:	fa00 f303 	lsl.w	r3, r0, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	4013      	ands	r3, r2
 8005638:	604b      	str	r3, [r1, #4]
  }
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40007400 	.word	0x40007400

0800564c <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d006      	beq.n	800566a <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 800565c:	4a09      	ldr	r2, [pc, #36]	; (8005684 <DAC_DualSoftwareTriggerCmd+0x38>)
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <DAC_DualSoftwareTriggerCmd+0x38>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f043 0303 	orr.w	r3, r3, #3
 8005666:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
 8005668:	e005      	b.n	8005676 <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 800566a:	4a06      	ldr	r2, [pc, #24]	; (8005684 <DAC_DualSoftwareTriggerCmd+0x38>)
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <DAC_DualSoftwareTriggerCmd+0x38>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f023 0303 	bic.w	r3, r3, #3
 8005674:	6053      	str	r3, [r2, #4]
  }
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40007400 	.word	0x40007400

08005688 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 800569c:	480c      	ldr	r0, [pc, #48]	; (80056d0 <DAC_WaveGenerationCmd+0x48>)
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <DAC_WaveGenerationCmd+0x48>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
 80056ae:	e009      	b.n	80056c4 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR |= DAC_Wave << DAC_Channel;
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 80056b0:	4807      	ldr	r0, [pc, #28]	; (80056d0 <DAC_WaveGenerationCmd+0x48>)
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <DAC_WaveGenerationCmd+0x48>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	fa01 f303 	lsl.w	r3, r1, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	4013      	ands	r3, r2
 80056c2:	6003      	str	r3, [r0, #0]
  }
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40007400 	.word	0x40007400

080056d4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80056e4:	4b08      	ldr	r3, [pc, #32]	; (8005708 <DAC_SetChannel1Data+0x34>)
 80056e6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	3308      	adds	r3, #8
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	461a      	mov	r2, r3
 80056f6:	887b      	ldrh	r3, [r7, #2]
 80056f8:	6013      	str	r3, [r2, #0]
}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40007400 	.word	0x40007400

0800570c <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <DAC_SetChannel2Data+0x34>)
 800571e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	3314      	adds	r3, #20
 8005728:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	461a      	mov	r2, r3
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	6013      	str	r3, [r2, #0]
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40007400 	.word	0x40007400

08005744 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	807b      	strh	r3, [r7, #2]
 8005750:	4613      	mov	r3, r2
 8005752:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	2300      	movs	r3, #0
 800575a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b08      	cmp	r3, #8
 8005760:	d105      	bne.n	800576e <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8005762:	887b      	ldrh	r3, [r7, #2]
 8005764:	021a      	lsls	r2, r3, #8
 8005766:	883b      	ldrh	r3, [r7, #0]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e004      	b.n	8005778 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 800576e:	887b      	ldrh	r3, [r7, #2]
 8005770:	041a      	lsls	r2, r3, #16
 8005772:	883b      	ldrh	r3, [r7, #0]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <DAC_SetDualChannelData+0x54>)
 800577a:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	3320      	adds	r3, #32
 8005784:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40007400 	.word	0x40007400

0800579c <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 80057a8:	4b08      	ldr	r3, [pc, #32]	; (80057cc <DAC_GetDataOutputValue+0x30>)
 80057aa:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	089a      	lsrs	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	332c      	adds	r3, #44	; 0x2c
 80057b6:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40007400 	.word	0x40007400

080057d0 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80057e2:	490e      	ldr	r1, [pc, #56]	; (800581c <DAC_DMACmd+0x4c>)
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <DAC_DMACmd+0x4c>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	fa00 f303 	lsl.w	r3, r0, r3
 80057f2:	4313      	orrs	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 80057f6:	e00a      	b.n	800580e <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80057f8:	4908      	ldr	r1, [pc, #32]	; (800581c <DAC_DMACmd+0x4c>)
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <DAC_DMACmd+0x4c>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	fa00 f303 	lsl.w	r3, r0, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	4013      	ands	r3, r2
 800580c:	600b      	str	r3, [r1, #0]
  }
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40007400 	.word	0x40007400

08005820 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8005834:	480c      	ldr	r0, [pc, #48]	; (8005868 <DAC_ITConfig+0x48>)
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <DAC_ITConfig+0x48>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
  }
}
 8005846:	e009      	b.n	800585c <DAC_ITConfig+0x3c>
    DAC->CR |=  (DAC_IT << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8005848:	4807      	ldr	r0, [pc, #28]	; (8005868 <DAC_ITConfig+0x48>)
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <DAC_ITConfig+0x48>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	4013      	ands	r3, r2
 800585a:	6003      	str	r3, [r0, #0]
  }
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40007400 	.word	0x40007400

0800586c <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <DAC_GetFlagStatus+0x38>)
 800587c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	4013      	ands	r3, r2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e001      	b.n	8005896 <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40007400 	.word	0x40007400

080058a8 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 80058b2:	4906      	ldr	r1, [pc, #24]	; (80058cc <DAC_ClearFlag+0x24>)
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	634b      	str	r3, [r1, #52]	; 0x34
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40007400 	.word	0x40007400

080058d0 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 80058e2:	4b10      	ldr	r3, [pc, #64]	; (8005924 <DAC_GetITStatus+0x54>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	4013      	ands	r3, r2
 80058f0:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 80058f2:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <DAC_GetITStatus+0x54>)
 80058f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <DAC_GetITStatus+0x40>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
 800590e:	e001      	b.n	8005914 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40007400 	.word	0x40007400

08005928 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8005932:	4906      	ldr	r1, [pc, #24]	; (800594c <DAC_ClearITPendingBit+0x24>)
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	634b      	str	r3, [r1, #52]	; 0x34
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40007400 	.word	0x40007400

08005950 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8005954:	4b03      	ldr	r3, [pc, #12]	; (8005964 <DBGMCU_GetREVID+0x14>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	0c1b      	lsrs	r3, r3, #16
}
 800595a:	4618      	mov	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	e0042000 	.word	0xe0042000

08005968 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <DBGMCU_GetDEVID+0x18>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	e0042000 	.word	0xe0042000

08005984 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d006      	beq.n	80059a4 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8005996:	490a      	ldr	r1, [pc, #40]	; (80059c0 <DBGMCU_Config+0x3c>)
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <DBGMCU_Config+0x3c>)
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4313      	orrs	r3, r2
 80059a0:	604b      	str	r3, [r1, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 80059a2:	e006      	b.n	80059b2 <DBGMCU_Config+0x2e>
  {
    DBGMCU->CR |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 80059a4:	4906      	ldr	r1, [pc, #24]	; (80059c0 <DBGMCU_Config+0x3c>)
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <DBGMCU_Config+0x3c>)
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	43db      	mvns	r3, r3
 80059ae:	4013      	ands	r3, r2
 80059b0:	604b      	str	r3, [r1, #4]
  }
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e0042000 	.word	0xe0042000

080059c4 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 80059d6:	490a      	ldr	r1, [pc, #40]	; (8005a00 <DBGMCU_APB1PeriphConfig+0x3c>)
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <DBGMCU_APB1PeriphConfig+0x3c>)
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
  }
}
 80059e2:	e006      	b.n	80059f2 <DBGMCU_APB1PeriphConfig+0x2e>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 80059e4:	4906      	ldr	r1, [pc, #24]	; (8005a00 <DBGMCU_APB1PeriphConfig+0x3c>)
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <DBGMCU_APB1PeriphConfig+0x3c>)
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	4013      	ands	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e0042000 	.word	0xe0042000

08005a04 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8005a16:	490a      	ldr	r1, [pc, #40]	; (8005a40 <DBGMCU_APB2PeriphConfig+0x3c>)
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <DBGMCU_APB2PeriphConfig+0x3c>)
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
  }
}
 8005a22:	e006      	b.n	8005a32 <DBGMCU_APB2PeriphConfig+0x2e>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8005a24:	4906      	ldr	r1, [pc, #24]	; (8005a40 <DBGMCU_APB2PeriphConfig+0x3c>)
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <DBGMCU_APB2PeriphConfig+0x3c>)
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60cb      	str	r3, [r1, #12]
  }
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	e0042000 	.word	0xe0042000

08005a44 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <DCMI_DeInit+0x38>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <DCMI_DeInit+0x38>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8005a54:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <DCMI_DeInit+0x38>)
 8005a56:	221f      	movs	r2, #31
 8005a58:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <DCMI_DeInit+0x38>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <DCMI_DeInit+0x38>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <DCMI_DeInit+0x38>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8005a6c:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <DCMI_DeInit+0x38>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a72:	bf00      	nop
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	50050000 	.word	0x50050000

08005a80 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <DCMI_Init+0x7c>)
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <DCMI_Init+0x7c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8005a9c:	4b17      	ldr	r3, [pc, #92]	; (8005afc <DCMI_Init+0x7c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005aa8:	f023 0302 	bic.w	r3, r3, #2
 8005aac:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	895b      	ldrh	r3, [r3, #10]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	461a      	mov	r2, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <DCMI_Init+0x7c>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	50050000 	.word	0x50050000

08005b00 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	819a      	strh	r2, [r3, #12]
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop

08005b40 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8005b48:	4a0b      	ldr	r2, [pc, #44]	; (8005b78 <DCMI_CROPConfig+0x38>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	041b      	lsls	r3, r3, #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8005b56:	430b      	orrs	r3, r1
 8005b58:	6213      	str	r3, [r2, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <DCMI_CROPConfig+0x38>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	889b      	ldrh	r3, [r3, #4]
 8005b66:	041b      	lsls	r3, r3, #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6253      	str	r3, [r2, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	50050000 	.word	0x50050000

08005b7c <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8005b8c:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <DCMI_CROPCmd+0x38>)
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <DCMI_CROPCmd+0x38>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f043 0304 	orr.w	r3, r3, #4
 8005b96:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
  }
}
 8005b98:	e005      	b.n	8005ba6 <DCMI_CROPCmd+0x2a>
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8005b9a:	4a06      	ldr	r2, [pc, #24]	; (8005bb4 <DCMI_CROPCmd+0x38>)
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <DCMI_CROPCmd+0x38>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f023 0304 	bic.w	r3, r3, #4
 8005ba4:	6013      	str	r3, [r2, #0]
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	50050000 	.word	0x50050000

08005bb8 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8005bc0:	490b      	ldr	r1, [pc, #44]	; (8005bf0 <DCMI_SetEmbeddedSynchroCodes+0x38>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	021b      	lsls	r3, r3, #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8005bce:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	789b      	ldrb	r3, [r3, #2]
 8005bd4:	041b      	lsls	r3, r3, #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8005bd6:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	061b      	lsls	r3, r3, #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8005bde:	4313      	orrs	r3, r2
 8005be0:	618b      	str	r3, [r1, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	50050000 	.word	0x50050000

08005bf4 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8005c04:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <DCMI_JPEGCmd+0x38>)
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <DCMI_JPEGCmd+0x38>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f043 0308 	orr.w	r3, r3, #8
 8005c0e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
  }
}
 8005c10:	e005      	b.n	8005c1e <DCMI_JPEGCmd+0x2a>
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8005c12:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <DCMI_JPEGCmd+0x38>)
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <DCMI_JPEGCmd+0x38>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f023 0308 	bic.w	r3, r3, #8
 8005c1c:	6013      	str	r3, [r2, #0]
  }
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	50050000 	.word	0x50050000

08005c30 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d006      	beq.n	8005c4e <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8005c40:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <DCMI_Cmd+0x38>)
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <DCMI_Cmd+0x38>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c4a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
  }
}
 8005c4c:	e005      	b.n	8005c5a <DCMI_Cmd+0x2a>
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8005c4e:	4a06      	ldr	r2, [pc, #24]	; (8005c68 <DCMI_Cmd+0x38>)
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <DCMI_Cmd+0x38>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c58:	6013      	str	r3, [r2, #0]
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	50050000 	.word	0x50050000

08005c6c <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8005c7c:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <DCMI_CaptureCmd+0x38>)
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <DCMI_CaptureCmd+0x38>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
  }
}
 8005c88:	e005      	b.n	8005c96 <DCMI_CaptureCmd+0x2a>
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8005c8a:	4a06      	ldr	r2, [pc, #24]	; (8005ca4 <DCMI_CaptureCmd+0x38>)
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <DCMI_CaptureCmd+0x38>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	6013      	str	r3, [r2, #0]
  }
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	50050000 	.word	0x50050000

08005ca8 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8005cac:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <DCMI_ReadData+0x14>)
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	50050000 	.word	0x50050000

08005cc0 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	460a      	mov	r2, r1
 8005cca:	80fb      	strh	r3, [r7, #6]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005cd0:	797b      	ldrb	r3, [r7, #5]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d006      	beq.n	8005ce4 <DCMI_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8005cd6:	490a      	ldr	r1, [pc, #40]	; (8005d00 <DCMI_ITConfig+0x40>)
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <DCMI_ITConfig+0x40>)
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60cb      	str	r3, [r1, #12]
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
  }  
}
 8005ce2:	e007      	b.n	8005cf4 <DCMI_ITConfig+0x34>
    DCMI->IER |= DCMI_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8005ce4:	4906      	ldr	r1, [pc, #24]	; (8005d00 <DCMI_ITConfig+0x40>)
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <DCMI_ITConfig+0x40>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	43d2      	mvns	r2, r2
 8005cee:	b292      	uxth	r2, r2
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60cb      	str	r3, [r1, #12]
  }  
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	50050000 	.word	0x50050000

08005d04 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	0b1b      	lsrs	r3, r3, #12
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <DCMI_GetFlagStatus+0x60>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e009      	b.n	8005d40 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d103      	bne.n	8005d3a <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <DCMI_GetFlagStatus+0x60>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	e002      	b.n	8005d40 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <DCMI_GetFlagStatus+0x60>)
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
 8005d4e:	e001      	b.n	8005d54 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8005d50:	2300      	movs	r3, #0
 8005d52:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	50050000 	.word	0x50050000

08005d68 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8005d72:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <DCMI_ClearFlag+0x1c>)
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	6153      	str	r3, [r2, #20]
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	50050000 	.word	0x50050000

08005d88 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <DCMI_GetITStatus+0x3c>)
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	4013      	ands	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	e001      	b.n	8005db4 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	50050000 	.word	0x50050000

08005dc8 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8005dd2:	4a04      	ldr	r2, [pc, #16]	; (8005de4 <DCMI_ClearITPendingBit+0x1c>)
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	6153      	str	r3, [r2, #20]
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	50050000 	.word	0x50050000

08005de8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f023 0201 	bic.w	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2221      	movs	r2, #33	; 0x21
 8005e1e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a46      	ldr	r2, [pc, #280]	; (8005f3c <DMA_DeInit+0x154>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005e28:	4b45      	ldr	r3, [pc, #276]	; (8005f40 <DMA_DeInit+0x158>)
 8005e2a:	223d      	movs	r2, #61	; 0x3d
 8005e2c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e2e:	e07e      	b.n	8005f2e <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a44      	ldr	r2, [pc, #272]	; (8005f44 <DMA_DeInit+0x15c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d104      	bne.n	8005e42 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8005e38:	4b41      	ldr	r3, [pc, #260]	; (8005f40 <DMA_DeInit+0x158>)
 8005e3a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005e3e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e40:	e075      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a40      	ldr	r2, [pc, #256]	; (8005f48 <DMA_DeInit+0x160>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d104      	bne.n	8005e54 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8005e4a:	4b3d      	ldr	r3, [pc, #244]	; (8005f40 <DMA_DeInit+0x158>)
 8005e4c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005e50:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e52:	e06c      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a3d      	ldr	r2, [pc, #244]	; (8005f4c <DMA_DeInit+0x164>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d104      	bne.n	8005e66 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005e5c:	4b38      	ldr	r3, [pc, #224]	; (8005f40 <DMA_DeInit+0x158>)
 8005e5e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005e62:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e64:	e063      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a39      	ldr	r2, [pc, #228]	; (8005f50 <DMA_DeInit+0x168>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d103      	bne.n	8005e76 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005e6e:	4b34      	ldr	r3, [pc, #208]	; (8005f40 <DMA_DeInit+0x158>)
 8005e70:	4a38      	ldr	r2, [pc, #224]	; (8005f54 <DMA_DeInit+0x16c>)
 8005e72:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e74:	e05b      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a37      	ldr	r2, [pc, #220]	; (8005f58 <DMA_DeInit+0x170>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d103      	bne.n	8005e86 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8005e7e:	4b30      	ldr	r3, [pc, #192]	; (8005f40 <DMA_DeInit+0x158>)
 8005e80:	4a36      	ldr	r2, [pc, #216]	; (8005f5c <DMA_DeInit+0x174>)
 8005e82:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e84:	e053      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a35      	ldr	r2, [pc, #212]	; (8005f60 <DMA_DeInit+0x178>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d103      	bne.n	8005e96 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8005e8e:	4b2c      	ldr	r3, [pc, #176]	; (8005f40 <DMA_DeInit+0x158>)
 8005e90:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <DMA_DeInit+0x17c>)
 8005e92:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e94:	e04b      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a33      	ldr	r2, [pc, #204]	; (8005f68 <DMA_DeInit+0x180>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d104      	bne.n	8005ea8 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8005e9e:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <DMA_DeInit+0x158>)
 8005ea0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005ea4:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005ea6:	e042      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <DMA_DeInit+0x184>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d103      	bne.n	8005eb8 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8005eb0:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <DMA_DeInit+0x188>)
 8005eb2:	223d      	movs	r2, #61	; 0x3d
 8005eb4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005eb6:	e03a      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <DMA_DeInit+0x18c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d104      	bne.n	8005eca <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8005ec0:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <DMA_DeInit+0x188>)
 8005ec2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005ec6:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005ec8:	e031      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2a      	ldr	r2, [pc, #168]	; (8005f78 <DMA_DeInit+0x190>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d104      	bne.n	8005edc <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8005ed2:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <DMA_DeInit+0x188>)
 8005ed4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005ed8:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005eda:	e028      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <DMA_DeInit+0x194>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d104      	bne.n	8005eee <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8005ee4:	4b22      	ldr	r3, [pc, #136]	; (8005f70 <DMA_DeInit+0x188>)
 8005ee6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005eea:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005eec:	e01f      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a23      	ldr	r2, [pc, #140]	; (8005f80 <DMA_DeInit+0x198>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d103      	bne.n	8005efe <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005ef6:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <DMA_DeInit+0x188>)
 8005ef8:	4a16      	ldr	r2, [pc, #88]	; (8005f54 <DMA_DeInit+0x16c>)
 8005efa:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005efc:	e017      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <DMA_DeInit+0x19c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d103      	bne.n	8005f0e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8005f06:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <DMA_DeInit+0x188>)
 8005f08:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <DMA_DeInit+0x174>)
 8005f0a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005f0c:	e00f      	b.n	8005f2e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1d      	ldr	r2, [pc, #116]	; (8005f88 <DMA_DeInit+0x1a0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d103      	bne.n	8005f1e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <DMA_DeInit+0x188>)
 8005f18:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <DMA_DeInit+0x17c>)
 8005f1a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005f1c:	e007      	b.n	8005f2e <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <DMA_DeInit+0x1a4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d103      	bne.n	8005f2e <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005f26:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <DMA_DeInit+0x188>)
 8005f28:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005f2c:	60da      	str	r2, [r3, #12]
    }
  }
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40026010 	.word	0x40026010
 8005f40:	40026000 	.word	0x40026000
 8005f44:	40026028 	.word	0x40026028
 8005f48:	40026040 	.word	0x40026040
 8005f4c:	40026058 	.word	0x40026058
 8005f50:	40026070 	.word	0x40026070
 8005f54:	2000003d 	.word	0x2000003d
 8005f58:	40026088 	.word	0x40026088
 8005f5c:	20000f40 	.word	0x20000f40
 8005f60:	400260a0 	.word	0x400260a0
 8005f64:	203d0000 	.word	0x203d0000
 8005f68:	400260b8 	.word	0x400260b8
 8005f6c:	40026410 	.word	0x40026410
 8005f70:	40026400 	.word	0x40026400
 8005f74:	40026428 	.word	0x40026428
 8005f78:	40026440 	.word	0x40026440
 8005f7c:	40026458 	.word	0x40026458
 8005f80:	40026470 	.word	0x40026470
 8005f84:	40026488 	.word	0x40026488
 8005f88:	400264a0 	.word	0x400264a0
 8005f8c:	400264b8 	.word	0x400264b8

08005f90 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4b25      	ldr	r3, [pc, #148]	; (800603c <DMA_Init+0xac>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005fba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005fc6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005fd2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005fde:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0307 	bic.w	r3, r3, #7
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	4313      	orrs	r3, r2
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60da      	str	r2, [r3, #12]
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f01c803f 	.word	0xf01c803f

08006040 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop

080060b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d006      	beq.n	80060d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f043 0201 	orr.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80060ce:	e005      	b.n	80060dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f023 0201 	bic.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
  }
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
  }
}
 8006104:	e005      	b.n	8006112 <DMA_PeriphIncOffsetSizeConfig+0x2a>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
  }
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
  }
}
 800613c:	e005      	b.n	800614a <DMA_FlowControllerConfig+0x2a>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 0220 	bic.w	r2, r3, #32
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
  }
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop

08006158 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8006164:	887a      	ldrh	r2, [r7, #2]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	605a      	str	r2, [r3, #4]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop

08006178 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	b29b      	uxth	r3, r3
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop

08006194 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d006      	beq.n	80061b4 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e005      	b.n	80061c0 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	611a      	str	r2, [r3, #16]
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop

080061d4 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d006      	beq.n	80061f4 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
  }
}
 80061f2:	e005      	b.n	8006200 <DMA_DoubleBufferModeCmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	601a      	str	r2, [r3, #0]
  }
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	611a      	str	r2, [r3, #16]
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
  }
}
 8006224:	e002      	b.n	800622c <DMA_MemoryTargetConfig+0x20>
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	60da      	str	r2, [r3, #12]
  }
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8006250:	2301      	movs	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e001      	b.n	800625a <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800625a:	68fb      	ldr	r3, [r7, #12]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e001      	b.n	800628a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ac:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 80062ae:	68fb      	ldr	r3, [r7, #12]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a15      	ldr	r2, [pc, #84]	; (8006328 <DMA_GetFlagStatus+0x6c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d802      	bhi.n	80062dc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <DMA_GetFlagStatus+0x70>)
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	e001      	b.n	80062e0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80062dc:	4b14      	ldr	r3, [pc, #80]	; (8006330 <DMA_GetFlagStatus+0x74>)
 80062de:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e002      	b.n	80062f8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80062fe:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006302:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
 8006312:	e001      	b.n	8006318 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	4002640f 	.word	0x4002640f
 800632c:	40026000 	.word	0x40026000
 8006330:	40026400 	.word	0x40026400

08006334 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a10      	ldr	r2, [pc, #64]	; (8006384 <DMA_ClearFlag+0x50>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d802      	bhi.n	800634c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <DMA_ClearFlag+0x54>)
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e001      	b.n	8006350 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <DMA_ClearFlag+0x58>)
 800634e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006360:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8006368:	e006      	b.n	8006378 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006370:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	6093      	str	r3, [r2, #8]
  }    
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	4002640f 	.word	0x4002640f
 8006388:	40026000 	.word	0x40026000
 800638c:	40026400 	.word	0x40026400

08006390 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00f      	beq.n	80063c8 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d006      	beq.n	80063bc <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	615a      	str	r2, [r3, #20]
 80063ba:	e005      	b.n	80063c8 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b80      	cmp	r3, #128	; 0x80
 80063cc:	d014      	beq.n	80063f8 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031e 	and.w	r3, r3, #30
 80063de:	431a      	orrs	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80063e4:	e008      	b.n	80063f8 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f003 031e 	and.w	r3, r3, #30
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <DMA_GetITStatus+0xa4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d802      	bhi.n	8006428 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006422:	4b22      	ldr	r3, [pc, #136]	; (80064ac <DMA_GetITStatus+0xa8>)
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	e001      	b.n	800642c <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006428:	4b21      	ldr	r3, [pc, #132]	; (80064b0 <DMA_GetITStatus+0xac>)
 800642a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006432:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	0adb      	lsrs	r3, r3, #11
 800643e:	f003 031e 	and.w	r3, r3, #30
 8006442:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4013      	ands	r3, r2
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	e004      	b.n	800645a <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006458:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e002      	b.n	8006472 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006478:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800647c:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	4013      	ands	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <DMA_GetITStatus+0x90>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
 8006492:	e001      	b.n	8006498 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8006494:	2300      	movs	r3, #0
 8006496:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
}
 800649a:	4618      	mov	r0, r3
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	4002640f 	.word	0x4002640f
 80064ac:	40026000 	.word	0x40026000
 80064b0:	40026400 	.word	0x40026400

080064b4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a10      	ldr	r2, [pc, #64]	; (8006504 <DMA_ClearITPendingBit+0x50>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d802      	bhi.n	80064cc <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <DMA_ClearITPendingBit+0x54>)
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	e001      	b.n	80064d0 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80064cc:	4b0f      	ldr	r3, [pc, #60]	; (800650c <DMA_ClearITPendingBit+0x58>)
 80064ce:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80064e0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80064e8:	e006      	b.n	80064f8 <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80064f0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	6093      	str	r3, [r2, #8]
  }   
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	4002640f 	.word	0x4002640f
 8006508:	40026000 	.word	0x40026000
 800650c:	40026400 	.word	0x40026400

08006510 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <EXTI_DeInit+0x2c>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <EXTI_DeInit+0x2c>)
 800651c:	2200      	movs	r2, #0
 800651e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <EXTI_DeInit+0x2c>)
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <EXTI_DeInit+0x2c>)
 8006528:	2200      	movs	r2, #0
 800652a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800652c:	4b03      	ldr	r3, [pc, #12]	; (800653c <EXTI_DeInit+0x2c>)
 800652e:	4a04      	ldr	r2, [pc, #16]	; (8006540 <EXTI_DeInit+0x30>)
 8006530:	615a      	str	r2, [r3, #20]
}
 8006532:	bf00      	nop
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40013c00 	.word	0x40013c00
 8006540:	007fffff 	.word	0x007fffff

08006544 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8006550:	4b34      	ldr	r3, [pc, #208]	; (8006624 <EXTI_Init+0xe0>)
 8006552:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	799b      	ldrb	r3, [r3, #6]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d04f      	beq.n	80065fc <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800655c:	4931      	ldr	r1, [pc, #196]	; (8006624 <EXTI_Init+0xe0>)
 800655e:	4b31      	ldr	r3, [pc, #196]	; (8006624 <EXTI_Init+0xe0>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	43db      	mvns	r3, r3
 8006568:	4013      	ands	r3, r2
 800656a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800656c:	492d      	ldr	r1, [pc, #180]	; (8006624 <EXTI_Init+0xe0>)
 800656e:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <EXTI_Init+0xe0>)
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	43db      	mvns	r3, r3
 8006578:	4013      	ands	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	791b      	ldrb	r3, [r3, #4]
 8006580:	461a      	mov	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	6811      	ldr	r1, [r2, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006596:	4923      	ldr	r1, [pc, #140]	; (8006624 <EXTI_Init+0xe0>)
 8006598:	4b22      	ldr	r3, [pc, #136]	; (8006624 <EXTI_Init+0xe0>)
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	4013      	ands	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80065a6:	491f      	ldr	r1, [pc, #124]	; (8006624 <EXTI_Init+0xe0>)
 80065a8:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <EXTI_Init+0xe0>)
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	4013      	ands	r3, r2
 80065b4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	795b      	ldrb	r3, [r3, #5]
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d10e      	bne.n	80065dc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80065be:	4919      	ldr	r1, [pc, #100]	; (8006624 <EXTI_Init+0xe0>)
 80065c0:	4b18      	ldr	r3, [pc, #96]	; (8006624 <EXTI_Init+0xe0>)
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80065cc:	4915      	ldr	r1, [pc, #84]	; (8006624 <EXTI_Init+0xe0>)
 80065ce:	4b15      	ldr	r3, [pc, #84]	; (8006624 <EXTI_Init+0xe0>)
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80065da:	e01d      	b.n	8006618 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <EXTI_Init+0xe0>)
 80065de:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	795b      	ldrb	r3, [r3, #5]
 80065e4:	461a      	mov	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	6811      	ldr	r1, [r2, #0]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80065fa:	e00d      	b.n	8006618 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	791b      	ldrb	r3, [r3, #4]
 8006600:	461a      	mov	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	6811      	ldr	r1, [r2, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	43d2      	mvns	r2, r2
 8006614:	400a      	ands	r2, r1
 8006616:	601a      	str	r2, [r3, #0]
  }
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40013c00 	.word	0x40013c00

08006628 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	220c      	movs	r2, #12
 8006640:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	719a      	strb	r2, [r3, #6]
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800665c:	4905      	ldr	r1, [pc, #20]	; (8006674 <EXTI_GenerateSWInterrupt+0x20>)
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <EXTI_GenerateSWInterrupt+0x20>)
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40013c00 	.word	0x40013c00

08006678 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8006684:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <EXTI_GetFlagStatus+0x30>)
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
 8006694:	e001      	b.n	800669a <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	40013c00 	.word	0x40013c00

080066ac <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80066b4:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <EXTI_ClearFlag+0x1c>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6153      	str	r3, [r2, #20]
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40013c00 	.word	0x40013c00

080066cc <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <EXTI_GetITStatus+0x44>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4013      	ands	r3, r2
 80066e4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <EXTI_GetITStatus+0x44>)
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <EXTI_GetITStatus+0x32>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80066f8:	2301      	movs	r3, #1
 80066fa:	73fb      	strb	r3, [r7, #15]
 80066fc:	e001      	b.n	8006702 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	40013c00 	.word	0x40013c00

08006714 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800671c:	4a04      	ldr	r2, [pc, #16]	; (8006730 <EXTI_ClearITPendingBit+0x1c>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6153      	str	r3, [r2, #20]
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40013c00 	.word	0x40013c00

08006734 <FLASH_SetLatency>:
  *          For STM32F40xx/41xx and STM32F427x/437x devices this parameter can be   
  *          a value between FLASH_Latency_0 and FLASH_Latency_7.   
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <FLASH_SetLatency+0x1c>)
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40023c00 	.word	0x40023c00

08006754 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8006764:	4a09      	ldr	r2, [pc, #36]	; (800678c <FLASH_PrefetchBufferCmd+0x38>)
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <FLASH_PrefetchBufferCmd+0x38>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800676e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8006770:	e005      	b.n	800677e <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8006772:	4a06      	ldr	r2, [pc, #24]	; (800678c <FLASH_PrefetchBufferCmd+0x38>)
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <FLASH_PrefetchBufferCmd+0x38>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800677c:	6013      	str	r3, [r2, #0]
  }
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40023c00 	.word	0x40023c00

08006790 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d006      	beq.n	80067ae <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 80067a0:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <FLASH_InstructionCacheCmd+0x38>)
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <FLASH_InstructionCacheCmd+0x38>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067aa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
  }
}
 80067ac:	e005      	b.n	80067ba <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 80067ae:	4a06      	ldr	r2, [pc, #24]	; (80067c8 <FLASH_InstructionCacheCmd+0x38>)
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <FLASH_InstructionCacheCmd+0x38>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b8:	6013      	str	r3, [r2, #0]
  }
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40023c00 	.word	0x40023c00

080067cc <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80067dc:	4a09      	ldr	r2, [pc, #36]	; (8006804 <FLASH_DataCacheCmd+0x38>)
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <FLASH_DataCacheCmd+0x38>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067e6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
  }
}
 80067e8:	e005      	b.n	80067f6 <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80067ea:	4a06      	ldr	r2, [pc, #24]	; (8006804 <FLASH_DataCacheCmd+0x38>)
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <FLASH_DataCacheCmd+0x38>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067f4:	6013      	str	r3, [r2, #0]
  }
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40023c00 	.word	0x40023c00

08006808 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 800680c:	4a05      	ldr	r2, [pc, #20]	; (8006824 <FLASH_InstructionCacheReset+0x1c>)
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <FLASH_InstructionCacheReset+0x1c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006816:	6013      	str	r3, [r2, #0]
}
 8006818:	bf00      	nop
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40023c00 	.word	0x40023c00

08006828 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 800682c:	4a05      	ldr	r2, [pc, #20]	; (8006844 <FLASH_DataCacheReset+0x1c>)
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <FLASH_DataCacheReset+0x1c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006836:	6013      	str	r3, [r2, #0]
}
 8006838:	bf00      	nop
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40023c00 	.word	0x40023c00

08006848 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800684c:	4b07      	ldr	r3, [pc, #28]	; (800686c <FLASH_Unlock+0x24>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	da05      	bge.n	8006860 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <FLASH_Unlock+0x24>)
 8006856:	4a06      	ldr	r2, [pc, #24]	; (8006870 <FLASH_Unlock+0x28>)
 8006858:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <FLASH_Unlock+0x24>)
 800685c:	4a05      	ldr	r2, [pc, #20]	; (8006874 <FLASH_Unlock+0x2c>)
 800685e:	605a      	str	r2, [r3, #4]
  }  
}
 8006860:	bf00      	nop
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40023c00 	.word	0x40023c00
 8006870:	45670123 	.word	0x45670123
 8006874:	cdef89ab 	.word	0xcdef89ab

08006878 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800687c:	4a05      	ldr	r2, [pc, #20]	; (8006894 <FLASH_Lock+0x1c>)
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <FLASH_Lock+0x1c>)
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006886:	6113      	str	r3, [r2, #16]
}
 8006888:	bf00      	nop
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40023c00 	.word	0x40023c00

08006898 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80068a8:	2308      	movs	r3, #8
 80068aa:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e010      	b.n	80068da <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d103      	bne.n	80068c6 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80068be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e009      	b.n	80068da <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d103      	bne.n	80068d4 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80068cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e002      	b.n	80068da <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80068d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80068d8:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80068da:	f000 fb33 	bl	8006f44 <FLASH_WaitForLastOperation>
 80068de:	4603      	mov	r3, r0
 80068e0:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d12f      	bne.n	8006948 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80068e8:	4a1a      	ldr	r2, [pc, #104]	; (8006954 <FLASH_EraseSector+0xbc>)
 80068ea:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <FLASH_EraseSector+0xbc>)
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 80068f4:	4917      	ldr	r1, [pc, #92]	; (8006954 <FLASH_EraseSector+0xbc>)
 80068f6:	4b17      	ldr	r3, [pc, #92]	; (8006954 <FLASH_EraseSector+0xbc>)
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8006900:	4a14      	ldr	r2, [pc, #80]	; (8006954 <FLASH_EraseSector+0xbc>)
 8006902:	4b14      	ldr	r3, [pc, #80]	; (8006954 <FLASH_EraseSector+0xbc>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800690a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800690c:	4911      	ldr	r1, [pc, #68]	; (8006954 <FLASH_EraseSector+0xbc>)
 800690e:	4b11      	ldr	r3, [pc, #68]	; (8006954 <FLASH_EraseSector+0xbc>)
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4313      	orrs	r3, r2
 8006916:	f043 0302 	orr.w	r3, r3, #2
 800691a:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800691c:	4a0d      	ldr	r2, [pc, #52]	; (8006954 <FLASH_EraseSector+0xbc>)
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <FLASH_EraseSector+0xbc>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006926:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006928:	f000 fb0c 	bl	8006f44 <FLASH_WaitForLastOperation>
 800692c:	4603      	mov	r3, r0
 800692e:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8006930:	4a08      	ldr	r2, [pc, #32]	; (8006954 <FLASH_EraseSector+0xbc>)
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <FLASH_EraseSector+0xbc>)
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f023 0302 	bic.w	r3, r3, #2
 800693a:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 800693c:	4a05      	ldr	r2, [pc, #20]	; (8006954 <FLASH_EraseSector+0xbc>)
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <FLASH_EraseSector+0xbc>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006946:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8006948:	7afb      	ldrb	r3, [r7, #11]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40023c00 	.word	0x40023c00

08006958 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8006966:	2308      	movs	r3, #8
 8006968:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800696a:	f000 faeb 	bl	8006f44 <FLASH_WaitForLastOperation>
 800696e:	4603      	mov	r3, r0
 8006970:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d102      	bne.n	800697e <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e010      	b.n	80069a0 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d103      	bne.n	800698c <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e009      	b.n	80069a0 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d103      	bne.n	800699a <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e002      	b.n	80069a0 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800699a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800699e:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 80069a0:	7afb      	ldrb	r3, [r7, #11]
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d121      	bne.n	80069ea <FLASH_EraseAllSectors+0x92>
    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
#endif /* STM32F427X */

#ifdef STM32F40XX
    FLASH->CR &= CR_PSIZE_MASK;
 80069a6:	4a13      	ldr	r2, [pc, #76]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069a8:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 80069b2:	4910      	ldr	r1, [pc, #64]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_MER;
 80069be:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f043 0304 	orr.w	r3, r3, #4
 80069c8:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80069ca:	4a0a      	ldr	r2, [pc, #40]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d4:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80069d6:	f000 fab5 	bl	8006f44 <FLASH_WaitForLastOperation>
 80069da:	4603      	mov	r3, r0
 80069dc:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 80069de:	4a05      	ldr	r2, [pc, #20]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <FLASH_EraseAllSectors+0x9c>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f023 0304 	bic.w	r3, r3, #4
 80069e8:	6113      	str	r3, [r2, #16]
#endif /* STM32F40XX */

  }   
  /* Return the Erase Status */
  return status;
 80069ea:	7afb      	ldrb	r3, [r7, #11]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40023c00 	.word	0x40023c00

080069f8 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 80069f8:	b590      	push	{r4, r7, lr}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8006a04:	2308      	movs	r3, #8
 8006a06:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006a08:	f000 fa9c 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d120      	bne.n	8006a58 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006a16:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a20:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006a22:	4a10      	ldr	r2, [pc, #64]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a2c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006a2e:	4a0d      	ldr	r2, [pc, #52]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a30:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	6113      	str	r3, [r2, #16]
  
    *(__IO uint64_t*)Address = Data;
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	e897 0018 	ldmia.w	r7, {r3, r4}
 8006a40:	e882 0018 	stmia.w	r2, {r3, r4}
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006a44:	f000 fa7e 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006a4c:	4a05      	ldr	r2, [pc, #20]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <FLASH_ProgramDoubleWord+0x6c>)
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd90      	pop	{r4, r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40023c00 	.word	0x40023c00

08006a68 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8006a72:	2308      	movs	r3, #8
 8006a74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006a76:	f000 fa65 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d11e      	bne.n	8006ac2 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006a84:	4a11      	ldr	r2, [pc, #68]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8006a90:	4a0e      	ldr	r2, [pc, #56]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006a92:	4b0e      	ldr	r3, [pc, #56]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a9a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006a9c:	4a0b      	ldr	r2, [pc, #44]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006aae:	f000 fa49 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006ab6:	4a05      	ldr	r2, [pc, #20]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006ab8:	4b04      	ldr	r3, [pc, #16]	; (8006acc <FLASH_ProgramWord+0x64>)
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40023c00 	.word	0x40023c00

08006ad0 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8006adc:	2308      	movs	r3, #8
 8006ade:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006ae0:	f000 fa30 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d11e      	bne.n	8006b2c <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006aee:	4a12      	ldr	r2, [pc, #72]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006af0:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af8:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006afa:	4a0f      	ldr	r2, [pc, #60]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006afc:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b04:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006b06:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	887a      	ldrh	r2, [r7, #2]
 8006b16:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006b18:	f000 fa14 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006b20:	4a05      	ldr	r2, [pc, #20]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <FLASH_ProgramHalfWord+0x68>)
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	40023c00 	.word	0x40023c00

08006b3c <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8006b48:	2308      	movs	r3, #8
 8006b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006b4c:	f000 f9fa 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d11c      	bne.n	8006b94 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b5c:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006b6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	6113      	str	r3, [r2, #16]
  
    *(__IO uint8_t*)Address = Data;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	78fa      	ldrb	r2, [r7, #3]
 8006b7e:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006b80:	f000 f9e0 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006b88:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <FLASH_ProgramByte+0x64>)
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	6113      	str	r3, [r2, #16]
  } 

  /* Return the Program Status */
  return status;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40023c00 	.word	0x40023c00

08006ba4 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <FLASH_OB_Unlock+0x28>)
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <FLASH_OB_Unlock+0x28>)
 8006bb6:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <FLASH_OB_Unlock+0x2c>)
 8006bb8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8006bba:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <FLASH_OB_Unlock+0x28>)
 8006bbc:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <FLASH_OB_Unlock+0x30>)
 8006bbe:	609a      	str	r2, [r3, #8]
  }  
}
 8006bc0:	bf00      	nop
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40023c00 	.word	0x40023c00
 8006bd0:	08192a3b 	.word	0x08192a3b
 8006bd4:	4c5d6e7f 	.word	0x4c5d6e7f

08006bd8 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8006bdc:	4a05      	ldr	r2, [pc, #20]	; (8006bf4 <FLASH_OB_Lock+0x1c>)
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <FLASH_OB_Lock+0x1c>)
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	6153      	str	r3, [r2, #20]
}
 8006be8:	bf00      	nop
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40023c00 	.word	0x40023c00

08006bf8 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8006c04:	2308      	movs	r3, #8
 8006c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8006c08:	f000 f99c 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d119      	bne.n	8006c4a <FLASH_OB_WRPConfig+0x52>
  { 
    if(NewState != DISABLE)
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8006c1c:	490d      	ldr	r1, [pc, #52]	; (8006c54 <FLASH_OB_WRPConfig+0x5c>)
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <FLASH_OB_WRPConfig+0x5c>)
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 8006c32:	e00a      	b.n	8006c4a <FLASH_OB_WRPConfig+0x52>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8006c34:	4907      	ldr	r1, [pc, #28]	; (8006c54 <FLASH_OB_WRPConfig+0x5c>)
 8006c36:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <FLASH_OB_WRPConfig+0x5c>)
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	b21a      	sxth	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	b21b      	sxth	r3, r3
 8006c42:	4313      	orrs	r3, r2
 8006c44:	b21b      	sxth	r3, r3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	800b      	strh	r3, [r1, #0]
    }
  }
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023c16 	.word	0x40023c16

08006c58 <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8006c64:	2308      	movs	r3, #8
 8006c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8006c68:	f000 f96c 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d119      	bne.n	8006caa <FLASH_OB_WRP1Config+0x52>
  { 
    if(NewState != DISABLE)
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 8006c7c:	490d      	ldr	r1, [pc, #52]	; (8006cb4 <FLASH_OB_WRP1Config+0x5c>)
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <FLASH_OB_WRP1Config+0x5c>)
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 8006c92:	e00a      	b.n	8006caa <FLASH_OB_WRP1Config+0x52>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8006c94:	4907      	ldr	r1, [pc, #28]	; (8006cb4 <FLASH_OB_WRP1Config+0x5c>)
 8006c96:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <FLASH_OB_WRP1Config+0x5c>)
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	b21a      	sxth	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	b21b      	sxth	r3, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	b21b      	sxth	r3, r3
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	800b      	strh	r3, [r1, #0]
    }
  }
}
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40023c1a 	.word	0x40023c1a

08006cb8 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8006cc6:	f000 f93d 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d102      	bne.n	8006cda <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8006cd4:	4a03      	ldr	r2, [pc, #12]	; (8006ce4 <FLASH_OB_RDPConfig+0x2c>)
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	7013      	strb	r3, [r2, #0]

  }
}
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40023c15 	.word	0x40023c15

08006ce8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	71fb      	strb	r3, [r7, #7]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	71bb      	strb	r3, [r7, #6]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8006cfa:	23ff      	movs	r3, #255	; 0xff
 8006cfc:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8006cfe:	2308      	movs	r3, #8
 8006d00:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006d02:	f000 f91f 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d111      	bne.n	8006d34 <FLASH_OB_UserConfig+0x4c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <FLASH_OB_UserConfig+0x54>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8006d1c:	4907      	ldr	r1, [pc, #28]	; (8006d3c <FLASH_OB_UserConfig+0x54>)
 8006d1e:	79ba      	ldrb	r2, [r7, #6]
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	797b      	ldrb	r3, [r7, #5]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	700b      	strb	r3, [r1, #0]
  }  
}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40023c14 	.word	0x40023c14

08006d40 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8006d4a:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <FLASH_OB_BORConfig+0x38>)
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <FLASH_OB_BORConfig+0x38>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f023 030c 	bic.w	r3, r3, #12
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8006d5a:	4907      	ldr	r1, [pc, #28]	; (8006d78 <FLASH_OB_BORConfig+0x38>)
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <FLASH_OB_BORConfig+0x38>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	700b      	strb	r3, [r1, #0]

}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40023c14 	.word	0x40023c14

08006d7c <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8006d82:	2308      	movs	r3, #8
 8006d84:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8006d86:	4a08      	ldr	r2, [pc, #32]	; (8006da8 <FLASH_OB_Launch+0x2c>)
 8006d88:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <FLASH_OB_Launch+0x2c>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f043 0302 	orr.w	r3, r3, #2
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006d96:	f000 f8d5 	bl	8006f44 <FLASH_WaitForLastOperation>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	71fb      	strb	r3, [r7, #7]

  return status;
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40023c14 	.word	0x40023c14

08006dac <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <FLASH_OB_GetUser+0x18>)
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	b2db      	uxtb	r3, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40023c00 	.word	0x40023c00

08006dc8 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <FLASH_OB_GetWRP+0x14>)
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	40023c16 	.word	0x40023c16

08006de0 <FLASH_OB_GetWRP1>:
  * @note   This function can be used only for STM32F427x/437x devices.  
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 8006de4:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <FLASH_OB_GetWRP1+0x14>)
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40023c1a 	.word	0x40023c1a

08006df8 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <FLASH_OB_GetRDP+0x2c>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2baa      	cmp	r3, #170	; 0xaa
 8006e0a:	d002      	beq.n	8006e12 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	71fb      	strb	r3, [r7, #7]
 8006e10:	e001      	b.n	8006e16 <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 8006e12:	2300      	movs	r3, #0
 8006e14:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8006e16:	79fb      	ldrb	r3, [r7, #7]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	40023c15 	.word	0x40023c15

08006e28 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <FLASH_OB_GetBOR+0x1c>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	b2db      	uxtb	r3, r3
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40023c14 	.word	0x40023c14

08006e48 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8006e5a:	490a      	ldr	r1, [pc, #40]	; (8006e84 <FLASH_ITConfig+0x3c>)
 8006e5c:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <FLASH_ITConfig+0x3c>)
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
  }
}
 8006e66:	e006      	b.n	8006e76 <FLASH_ITConfig+0x2e>
    FLASH->CR |= FLASH_IT;
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8006e68:	4906      	ldr	r1, [pc, #24]	; (8006e84 <FLASH_ITConfig+0x3c>)
 8006e6a:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <FLASH_ITConfig+0x3c>)
 8006e6c:	691a      	ldr	r2, [r3, #16]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	4013      	ands	r3, r2
 8006e74:	610b      	str	r3, [r1, #16]
  }
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40023c00 	.word	0x40023c00

08006e88 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <FLASH_GetFlagStatus+0x30>)
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e001      	b.n	8006eaa <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	40023c00 	.word	0x40023c00

08006ebc <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag  
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006ec4:	4a04      	ldr	r2, [pc, #16]	; (8006ed8 <FLASH_ClearFlag+0x1c>)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60d3      	str	r3, [r2, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40023c00 	.word	0x40023c00

08006edc <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006ee6:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <FLASH_GetStatus+0x64>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	71fb      	strb	r3, [r7, #7]
 8006ef6:	e01c      	b.n	8006f32 <FLASH_GetStatus+0x56>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8006ef8:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <FLASH_GetStatus+0x64>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8006f04:	2305      	movs	r3, #5
 8006f06:	71fb      	strb	r3, [r7, #7]
 8006f08:	e013      	b.n	8006f32 <FLASH_GetStatus+0x56>
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <FLASH_GetStatus+0x64>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <FLASH_GetStatus+0x40>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8006f16:	2306      	movs	r3, #6
 8006f18:	71fb      	strb	r3, [r7, #7]
 8006f1a:	e00a      	b.n	8006f32 <FLASH_GetStatus+0x56>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8006f1c:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <FLASH_GetStatus+0x64>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <FLASH_GetStatus+0x52>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8006f28:	2307      	movs	r3, #7
 8006f2a:	71fb      	strb	r3, [r7, #7]
 8006f2c:	e001      	b.n	8006f32 <FLASH_GetStatus+0x56>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8006f2e:	2308      	movs	r3, #8
 8006f30:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8006f32:	79fb      	ldrb	r3, [r7, #7]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40023c00 	.word	0x40023c00

08006f44 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8006f4e:	f7ff ffc5 	bl	8006edc <FLASH_GetStatus>
 8006f52:	4603      	mov	r3, r0
 8006f54:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8006f56:	e003      	b.n	8006f60 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8006f58:	f7ff ffc0 	bl	8006edc <FLASH_GetStatus>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d0f7      	beq.n	8006f58 <FLASH_WaitForLastOperation+0x14>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	b2db      	uxtb	r3, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d107      	bne.n	8006f92 <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8006f82:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f243 01db 	movw	r1, #12507	; 0x30db
 8006f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006f90:	e006      	b.n	8006fa0 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8006f92:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8006f9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8006fa0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006fac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8006fb0:	4a05      	ldr	r2, [pc, #20]	; (8006fc8 <FSMC_NORSRAMDeInit+0x54>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006fb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	a0000104 	.word	0xa0000104

08006fcc <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006fd4:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6851      	ldr	r1, [r2, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006fe4:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68d2      	ldr	r2, [r2, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8006fea:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6912      	ldr	r2, [r2, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8006ff0:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6952      	ldr	r2, [r2, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8006ff6:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6992      	ldr	r2, [r2, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8006ffc:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	69d2      	ldr	r2, [r2, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8007002:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6a12      	ldr	r2, [r2, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8007008:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6a52      	ldr	r2, [r2, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 800700e:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6a92      	ldr	r2, [r2, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8007014:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800701a:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6b12      	ldr	r2, [r2, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8007020:	430a      	orrs	r2, r1
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8007022:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b08      	cmp	r3, #8
 800702c:	d10d      	bne.n	800704a <FSMC_NORSRAMInit+0x7e>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800702e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8007042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 800704a:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3301      	adds	r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007058:	6811      	ldr	r1, [r2, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800705e:	6852      	ldr	r2, [r2, #4]
 8007060:	0112      	lsls	r2, r2, #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8007062:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007068:	6892      	ldr	r2, [r2, #8]
 800706a:	0212      	lsls	r2, r2, #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 800706c:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007072:	68d2      	ldr	r2, [r2, #12]
 8007074:	0412      	lsls	r2, r2, #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8007076:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800707c:	6912      	ldr	r2, [r2, #16]
 800707e:	0512      	lsls	r2, r2, #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8007080:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007086:	6952      	ldr	r2, [r2, #20]
 8007088:	0612      	lsls	r2, r2, #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 800708a:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007090:	6992      	ldr	r2, [r2, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8007092:	430a      	orrs	r2, r1
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8007094:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a0:	d120      	bne.n	80070e4 <FSMC_NORSRAMInit+0x118>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80070a2:	4817      	ldr	r0, [pc, #92]	; (8007100 <FSMC_NORSRAMInit+0x134>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070ac:	6811      	ldr	r1, [r2, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070b2:	6852      	ldr	r2, [r2, #4]
 80070b4:	0112      	lsls	r2, r2, #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 80070b6:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070bc:	6892      	ldr	r2, [r2, #8]
 80070be:	0212      	lsls	r2, r2, #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 80070c0:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070c6:	6912      	ldr	r2, [r2, #16]
 80070c8:	0512      	lsls	r2, r2, #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 80070ca:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070d0:	6952      	ldr	r2, [r2, #20]
 80070d2:	0612      	lsls	r2, r2, #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80070d4:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070da:	6992      	ldr	r2, [r2, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80070dc:	430a      	orrs	r2, r1
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80070de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
  }
}
 80070e2:	e006      	b.n	80070f2 <FSMC_NORSRAMInit+0x126>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 80070e4:	4a06      	ldr	r2, [pc, #24]	; (8007100 <FSMC_NORSRAMInit+0x134>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80070ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	a0000104 	.word	0xa0000104

08007104 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2202      	movs	r2, #2
 8007116:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007148:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007150:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007162:	220f      	movs	r2, #15
 8007164:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	220f      	movs	r2, #15
 800716c:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007172:	22ff      	movs	r2, #255	; 0xff
 8007174:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	220f      	movs	r2, #15
 800717c:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	220f      	movs	r2, #15
 8007184:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718a:	220f      	movs	r2, #15
 800718c:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	2200      	movs	r2, #0
 8007194:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	220f      	movs	r2, #15
 800719c:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	220f      	movs	r2, #15
 80071a4:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	22ff      	movs	r2, #255	; 0xff
 80071ac:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	220f      	movs	r2, #15
 80071b4:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	220f      	movs	r2, #15
 80071bc:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	220f      	movs	r2, #15
 80071c4:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	2200      	movs	r2, #0
 80071cc:	619a      	str	r2, [r3, #24]
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop

080071dc <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <FSMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 80071ee:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80071f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071fc:	f043 0201 	orr.w	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
  }
}
 8007206:	e00b      	b.n	8007220 <FSMC_NORSRAMCmd+0x44>
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8007208:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800720c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <FSMC_NORSRAMCmd+0x50>)
 8007218:	4013      	ands	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  }
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	000ffffe 	.word	0x000ffffe

08007230 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b10      	cmp	r3, #16
 800723c:	d10e      	bne.n	800725c <FSMC_NANDDeInit+0x2c>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <FSMC_NANDDeInit+0x54>)
 8007240:	2218      	movs	r2, #24
 8007242:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 8007244:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <FSMC_NANDDeInit+0x54>)
 8007246:	2240      	movs	r2, #64	; 0x40
 8007248:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800724a:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <FSMC_NANDDeInit+0x54>)
 800724c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007250:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <FSMC_NANDDeInit+0x54>)
 8007254:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007258:	60da      	str	r2, [r3, #12]
    FSMC_Bank3->PCR3 = 0x00000018;
    FSMC_Bank3->SR3 = 0x00000040;
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
  }  
}
 800725a:	e00d      	b.n	8007278 <FSMC_NANDDeInit+0x48>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <FSMC_NANDDeInit+0x58>)
 800725e:	2218      	movs	r2, #24
 8007260:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <FSMC_NANDDeInit+0x58>)
 8007264:	2240      	movs	r2, #64	; 0x40
 8007266:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8007268:	4b07      	ldr	r3, [pc, #28]	; (8007288 <FSMC_NANDDeInit+0x58>)
 800726a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800726e:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8007270:	4b05      	ldr	r3, [pc, #20]	; (8007288 <FSMC_NANDDeInit+0x58>)
 8007272:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007276:	60da      	str	r2, [r3, #12]
  }  
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	a0000060 	.word	0xa0000060
 8007288:	a0000080 	.word	0xa0000080

0800728c <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 80072a8:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 80072ae:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80072b4:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80072bc:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80072c4:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 80072c6:	f043 0308 	orr.w	r3, r3, #8
 80072ca:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	021b      	lsls	r3, r3, #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80072da:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	041b      	lsls	r3, r3, #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80072e4:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	061b      	lsls	r3, r3, #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	021b      	lsls	r3, r3, #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007300:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	041b      	lsls	r3, r3, #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800730a:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	061b      	lsls	r3, r3, #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b10      	cmp	r3, #16
 800731e:	d109      	bne.n	8007334 <FSMC_NANDInit+0xa8>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8007320:	4a0c      	ldr	r2, [pc, #48]	; (8007354 <FSMC_NANDInit+0xc8>)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	6013      	str	r3, [r2, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8007326:	4a0b      	ldr	r2, [pc, #44]	; (8007354 <FSMC_NANDInit+0xc8>)
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	6093      	str	r3, [r2, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 800732c:	4a09      	ldr	r2, [pc, #36]	; (8007354 <FSMC_NANDInit+0xc8>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	60d3      	str	r3, [r2, #12]
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
    FSMC_Bank3->PMEM3 = tmppmem;
    FSMC_Bank3->PATT3 = tmppatt;
  }
}
 8007332:	e008      	b.n	8007346 <FSMC_NANDInit+0xba>
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8007334:	4a08      	ldr	r2, [pc, #32]	; (8007358 <FSMC_NANDInit+0xcc>)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	6013      	str	r3, [r2, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 800733a:	4a07      	ldr	r2, [pc, #28]	; (8007358 <FSMC_NANDInit+0xcc>)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6093      	str	r3, [r2, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8007340:	4a05      	ldr	r2, [pc, #20]	; (8007358 <FSMC_NANDInit+0xcc>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	60d3      	str	r3, [r2, #12]
  }
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	a0000060 	.word	0xa0000060
 8007358:	a0000080 	.word	0xa0000080

0800735c <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2210      	movs	r2, #16
 8007368:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	22fc      	movs	r2, #252	; 0xfc
 8007394:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	22fc      	movs	r2, #252	; 0xfc
 800739c:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	22fc      	movs	r2, #252	; 0xfc
 80073a4:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	22fc      	movs	r2, #252	; 0xfc
 80073ac:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	22fc      	movs	r2, #252	; 0xfc
 80073b4:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	22fc      	movs	r2, #252	; 0xfc
 80073bc:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	22fc      	movs	r2, #252	; 0xfc
 80073c4:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	22fc      	movs	r2, #252	; 0xfc
 80073cc:	60da      	str	r2, [r3, #12]
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop

080073dc <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d010      	beq.n	8007410 <FSMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d106      	bne.n	8007402 <FSMC_NANDCmd+0x26>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 80073f4:	4a11      	ldr	r2, [pc, #68]	; (800743c <FSMC_NANDCmd+0x60>)
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <FSMC_NANDCmd+0x60>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f043 0304 	orr.w	r3, r3, #4
 80073fe:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 8007400:	e016      	b.n	8007430 <FSMC_NANDCmd+0x54>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8007402:	4a0f      	ldr	r2, [pc, #60]	; (8007440 <FSMC_NANDCmd+0x64>)
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <FSMC_NANDCmd+0x64>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f043 0304 	orr.w	r3, r3, #4
 800740c:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 800740e:	e00f      	b.n	8007430 <FSMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b10      	cmp	r3, #16
 8007414:	d106      	bne.n	8007424 <FSMC_NANDCmd+0x48>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8007416:	4909      	ldr	r1, [pc, #36]	; (800743c <FSMC_NANDCmd+0x60>)
 8007418:	4b08      	ldr	r3, [pc, #32]	; (800743c <FSMC_NANDCmd+0x60>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <FSMC_NANDCmd+0x68>)
 800741e:	4013      	ands	r3, r2
 8007420:	600b      	str	r3, [r1, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 8007422:	e005      	b.n	8007430 <FSMC_NANDCmd+0x54>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8007424:	4906      	ldr	r1, [pc, #24]	; (8007440 <FSMC_NANDCmd+0x64>)
 8007426:	4b06      	ldr	r3, [pc, #24]	; (8007440 <FSMC_NANDCmd+0x64>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <FSMC_NANDCmd+0x68>)
 800742c:	4013      	ands	r3, r2
 800742e:	600b      	str	r3, [r1, #0]
    }
  }
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	a0000060 	.word	0xa0000060
 8007440:	a0000080 	.word	0xa0000080
 8007444:	000ffffb 	.word	0x000ffffb

08007448 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d010      	beq.n	800747c <FSMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b10      	cmp	r3, #16
 800745e:	d106      	bne.n	800746e <FSMC_NANDECCCmd+0x26>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8007460:	4a11      	ldr	r2, [pc, #68]	; (80074a8 <FSMC_NANDECCCmd+0x60>)
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <FSMC_NANDECCCmd+0x60>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746a:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 800746c:	e016      	b.n	800749c <FSMC_NANDECCCmd+0x54>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800746e:	4a0f      	ldr	r2, [pc, #60]	; (80074ac <FSMC_NANDECCCmd+0x64>)
 8007470:	4b0e      	ldr	r3, [pc, #56]	; (80074ac <FSMC_NANDECCCmd+0x64>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007478:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 800747a:	e00f      	b.n	800749c <FSMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b10      	cmp	r3, #16
 8007480:	d106      	bne.n	8007490 <FSMC_NANDECCCmd+0x48>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8007482:	4909      	ldr	r1, [pc, #36]	; (80074a8 <FSMC_NANDECCCmd+0x60>)
 8007484:	4b08      	ldr	r3, [pc, #32]	; (80074a8 <FSMC_NANDECCCmd+0x60>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <FSMC_NANDECCCmd+0x68>)
 800748a:	4013      	ands	r3, r2
 800748c:	600b      	str	r3, [r1, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 800748e:	e005      	b.n	800749c <FSMC_NANDECCCmd+0x54>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8007490:	4906      	ldr	r1, [pc, #24]	; (80074ac <FSMC_NANDECCCmd+0x64>)
 8007492:	4b06      	ldr	r3, [pc, #24]	; (80074ac <FSMC_NANDECCCmd+0x64>)
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <FSMC_NANDECCCmd+0x68>)
 8007498:	4013      	ands	r3, r2
 800749a:	600b      	str	r3, [r1, #0]
    }
  }
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	a0000060 	.word	0xa0000060
 80074ac:	a0000080 	.word	0xa0000080
 80074b0:	000fffbf 	.word	0x000fffbf

080074b4 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b10      	cmp	r3, #16
 80074c4:	d103      	bne.n	80074ce <FSMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <FSMC_GetECC+0x30>)
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e002      	b.n	80074d4 <FSMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <FSMC_GetECC+0x34>)
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 80074d4:	68fb      	ldr	r3, [r7, #12]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	a0000060 	.word	0xa0000060
 80074e8:	a0000080 	.word	0xa0000080

080074ec <FSMC_PCCARDDeInit>:
  * @brief  De-initializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <FSMC_PCCARDDeInit+0x34>)
 80074f2:	2218      	movs	r2, #24
 80074f4:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 80074f6:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <FSMC_PCCARDDeInit+0x34>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 80074fc:	4b08      	ldr	r3, [pc, #32]	; (8007520 <FSMC_PCCARDDeInit+0x34>)
 80074fe:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007502:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <FSMC_PCCARDDeInit+0x34>)
 8007506:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800750a:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 800750c:	4b04      	ldr	r3, [pc, #16]	; (8007520 <FSMC_PCCARDDeInit+0x34>)
 800750e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007512:	611a      	str	r2, [r3, #16]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	a00000a0 	.word	0xa00000a0

08007524 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 800752c:	4927      	ldr	r1, [pc, #156]	; (80075cc <FSMC_PCCARDInit+0xa8>)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	025b      	lsls	r3, r3, #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8007538:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	035b      	lsls	r3, r3, #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8007540:	4313      	orrs	r3, r2
 8007542:	f043 0310 	orr.w	r3, r3, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8007546:	600b      	str	r3, [r1, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007548:	4920      	ldr	r1, [pc, #128]	; (80075cc <FSMC_PCCARDInit+0xa8>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	681a      	ldr	r2, [r3, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	021b      	lsls	r3, r3, #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007558:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	041b      	lsls	r3, r3, #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007562:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	061b      	lsls	r3, r3, #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800756c:	4313      	orrs	r3, r2
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800756e:	608b      	str	r3, [r1, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007570:	4916      	ldr	r1, [pc, #88]	; (80075cc <FSMC_PCCARDInit+0xa8>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	681a      	ldr	r2, [r3, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	021b      	lsls	r3, r3, #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007580:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	041b      	lsls	r3, r3, #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800758a:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	061b      	lsls	r3, r3, #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007594:	4313      	orrs	r3, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007596:	60cb      	str	r3, [r1, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8007598:	490c      	ldr	r1, [pc, #48]	; (80075cc <FSMC_PCCARDInit+0xa8>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	681a      	ldr	r2, [r3, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	021b      	lsls	r3, r3, #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80075a8:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	041b      	lsls	r3, r3, #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80075b2:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	061b      	lsls	r3, r3, #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80075bc:	4313      	orrs	r3, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80075be:	610b      	str	r3, [r1, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	a00000a0 	.word	0xa00000a0

080075d0 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	22fc      	movs	r2, #252	; 0xfc
 80075f0:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	22fc      	movs	r2, #252	; 0xfc
 80075f8:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	22fc      	movs	r2, #252	; 0xfc
 8007600:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	22fc      	movs	r2, #252	; 0xfc
 8007608:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	22fc      	movs	r2, #252	; 0xfc
 8007610:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	22fc      	movs	r2, #252	; 0xfc
 8007618:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	22fc      	movs	r2, #252	; 0xfc
 8007620:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	22fc      	movs	r2, #252	; 0xfc
 8007628:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	22fc      	movs	r2, #252	; 0xfc
 8007630:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	22fc      	movs	r2, #252	; 0xfc
 8007638:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	22fc      	movs	r2, #252	; 0xfc
 8007640:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	22fc      	movs	r2, #252	; 0xfc
 8007648:	60da      	str	r2, [r3, #12]
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop

08007658 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d006      	beq.n	8007676 <FSMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <FSMC_PCCARDCmd+0x38>)
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <FSMC_PCCARDCmd+0x38>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f043 0304 	orr.w	r3, r3, #4
 8007672:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
  }
}
 8007674:	e005      	b.n	8007682 <FSMC_PCCARDCmd+0x2a>
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8007676:	4906      	ldr	r1, [pc, #24]	; (8007690 <FSMC_PCCARDCmd+0x38>)
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <FSMC_PCCARDCmd+0x38>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <FSMC_PCCARDCmd+0x3c>)
 800767e:	4013      	ands	r3, r2
 8007680:	600b      	str	r3, [r1, #0]
  }
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	a00000a0 	.word	0xa00000a0
 8007694:	000ffffb 	.word	0x000ffffb

08007698 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01b      	beq.n	80076e4 <FSMC_ITConfig+0x4c>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d106      	bne.n	80076c0 <FSMC_ITConfig+0x28>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 80076b2:	491e      	ldr	r1, [pc, #120]	; (800772c <FSMC_ITConfig+0x94>)
 80076b4:	4b1d      	ldr	r3, [pc, #116]	; (800772c <FSMC_ITConfig+0x94>)
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	604b      	str	r3, [r1, #4]
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
    }
  }
}
 80076be:	e02f      	b.n	8007720 <FSMC_ITConfig+0x88>
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c6:	d106      	bne.n	80076d6 <FSMC_ITConfig+0x3e>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 80076c8:	4919      	ldr	r1, [pc, #100]	; (8007730 <FSMC_ITConfig+0x98>)
 80076ca:	4b19      	ldr	r3, [pc, #100]	; (8007730 <FSMC_ITConfig+0x98>)
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	604b      	str	r3, [r1, #4]
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
    }
  }
}
 80076d4:	e024      	b.n	8007720 <FSMC_ITConfig+0x88>
      FSMC_Bank3->SR3 |= FSMC_IT;
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 80076d6:	4917      	ldr	r1, [pc, #92]	; (8007734 <FSMC_ITConfig+0x9c>)
 80076d8:	4b16      	ldr	r3, [pc, #88]	; (8007734 <FSMC_ITConfig+0x9c>)
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4313      	orrs	r3, r2
 80076e0:	604b      	str	r3, [r1, #4]
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
    }
  }
}
 80076e2:	e01d      	b.n	8007720 <FSMC_ITConfig+0x88>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d107      	bne.n	80076fa <FSMC_ITConfig+0x62>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 80076ea:	4910      	ldr	r1, [pc, #64]	; (800772c <FSMC_ITConfig+0x94>)
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <FSMC_ITConfig+0x94>)
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	43db      	mvns	r3, r3
 80076f4:	4013      	ands	r3, r2
 80076f6:	604b      	str	r3, [r1, #4]
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
    }
  }
}
 80076f8:	e012      	b.n	8007720 <FSMC_ITConfig+0x88>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007700:	d107      	bne.n	8007712 <FSMC_ITConfig+0x7a>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8007702:	490b      	ldr	r1, [pc, #44]	; (8007730 <FSMC_ITConfig+0x98>)
 8007704:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <FSMC_ITConfig+0x98>)
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	43db      	mvns	r3, r3
 800770c:	4013      	ands	r3, r2
 800770e:	604b      	str	r3, [r1, #4]
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
    }
  }
}
 8007710:	e006      	b.n	8007720 <FSMC_ITConfig+0x88>
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8007712:	4908      	ldr	r1, [pc, #32]	; (8007734 <FSMC_ITConfig+0x9c>)
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <FSMC_ITConfig+0x9c>)
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	43db      	mvns	r3, r3
 800771c:	4013      	ands	r3, r2
 800771e:	604b      	str	r3, [r1, #4]
    }
  }
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	a0000060 	.word	0xa0000060
 8007730:	a0000080 	.word	0xa0000080
 8007734:	a00000a0 	.word	0xa00000a0

08007738 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b10      	cmp	r3, #16
 800774e:	d103      	bne.n	8007758 <FSMC_GetFlagStatus+0x20>
  {
    tmpsr = FSMC_Bank2->SR2;
 8007750:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <FSMC_GetFlagStatus+0x58>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	e00a      	b.n	800776e <FSMC_GetFlagStatus+0x36>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775e:	d103      	bne.n	8007768 <FSMC_GetFlagStatus+0x30>
  {
    tmpsr = FSMC_Bank3->SR3;
 8007760:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <FSMC_GetFlagStatus+0x5c>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	60bb      	str	r3, [r7, #8]
 8007766:	e002      	b.n	800776e <FSMC_GetFlagStatus+0x36>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8007768:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <FSMC_GetFlagStatus+0x60>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	4013      	ands	r3, r2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <FSMC_GetFlagStatus+0x46>
  {
    bitstatus = SET;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
 800777c:	e001      	b.n	8007782 <FSMC_GetFlagStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	a0000060 	.word	0xa0000060
 8007794:	a0000080 	.word	0xa0000080
 8007798:	a00000a0 	.word	0xa00000a0

0800779c <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b10      	cmp	r3, #16
 80077aa:	d107      	bne.n	80077bc <FSMC_ClearFlag+0x20>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 80077ac:	4910      	ldr	r1, [pc, #64]	; (80077f0 <FSMC_ClearFlag+0x54>)
 80077ae:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <FSMC_ClearFlag+0x54>)
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	4013      	ands	r3, r2
 80077b8:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
  }
}
 80077ba:	e012      	b.n	80077e2 <FSMC_ClearFlag+0x46>
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c2:	d107      	bne.n	80077d4 <FSMC_ClearFlag+0x38>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 80077c4:	490b      	ldr	r1, [pc, #44]	; (80077f4 <FSMC_ClearFlag+0x58>)
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <FSMC_ClearFlag+0x58>)
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	43db      	mvns	r3, r3
 80077ce:	4013      	ands	r3, r2
 80077d0:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
  }
}
 80077d2:	e006      	b.n	80077e2 <FSMC_ClearFlag+0x46>
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 80077d4:	4908      	ldr	r1, [pc, #32]	; (80077f8 <FSMC_ClearFlag+0x5c>)
 80077d6:	4b08      	ldr	r3, [pc, #32]	; (80077f8 <FSMC_ClearFlag+0x5c>)
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	43db      	mvns	r3, r3
 80077de:	4013      	ands	r3, r2
 80077e0:	604b      	str	r3, [r1, #4]
  }
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	a0000060 	.word	0xa0000060
 80077f4:	a0000080 	.word	0xa0000080
 80077f8:	a00000a0 	.word	0xa00000a0

080077fc <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b10      	cmp	r3, #16
 800781a:	d103      	bne.n	8007824 <FSMC_GetITStatus+0x28>
  {
    tmpsr = FSMC_Bank2->SR2;
 800781c:	4b14      	ldr	r3, [pc, #80]	; (8007870 <FSMC_GetITStatus+0x74>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e00a      	b.n	800783a <FSMC_GetITStatus+0x3e>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782a:	d103      	bne.n	8007834 <FSMC_GetITStatus+0x38>
  {
    tmpsr = FSMC_Bank3->SR3;
 800782c:	4b11      	ldr	r3, [pc, #68]	; (8007874 <FSMC_GetITStatus+0x78>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	e002      	b.n	800783a <FSMC_GetITStatus+0x3e>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8007834:	4b10      	ldr	r3, [pc, #64]	; (8007878 <FSMC_GetITStatus+0x7c>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	4013      	ands	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	08da      	lsrs	r2, r3, #3
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4013      	ands	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <FSMC_GetITStatus+0x62>
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <FSMC_GetITStatus+0x62>
  {
    bitstatus = SET;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
 800785c:	e001      	b.n	8007862 <FSMC_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
 800785e:	2300      	movs	r3, #0
 8007860:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 8007862:	7dfb      	ldrb	r3, [r7, #23]
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	a0000060 	.word	0xa0000060
 8007874:	a0000080 	.word	0xa0000080
 8007878:	a00000a0 	.word	0xa00000a0

0800787c <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b10      	cmp	r3, #16
 800788a:	d108      	bne.n	800789e <FSMC_ClearITPendingBit+0x22>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800788c:	4911      	ldr	r1, [pc, #68]	; (80078d4 <FSMC_ClearITPendingBit+0x58>)
 800788e:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <FSMC_ClearITPendingBit+0x58>)
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	43db      	mvns	r3, r3
 8007898:	4013      	ands	r3, r2
 800789a:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
  }
}
 800789c:	e014      	b.n	80078c8 <FSMC_ClearITPendingBit+0x4c>
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a4:	d108      	bne.n	80078b8 <FSMC_ClearITPendingBit+0x3c>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 80078a6:	490c      	ldr	r1, [pc, #48]	; (80078d8 <FSMC_ClearITPendingBit+0x5c>)
 80078a8:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <FSMC_ClearITPendingBit+0x5c>)
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	08db      	lsrs	r3, r3, #3
 80078b0:	43db      	mvns	r3, r3
 80078b2:	4013      	ands	r3, r2
 80078b4:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
  }
}
 80078b6:	e007      	b.n	80078c8 <FSMC_ClearITPendingBit+0x4c>
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 80078b8:	4908      	ldr	r1, [pc, #32]	; (80078dc <FSMC_ClearITPendingBit+0x60>)
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <FSMC_ClearITPendingBit+0x60>)
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	08db      	lsrs	r3, r3, #3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	4013      	ands	r3, r2
 80078c6:	604b      	str	r3, [r1, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	a0000060 	.word	0xa0000060
 80078d8:	a0000080 	.word	0xa0000080
 80078dc:	a00000a0 	.word	0xa00000a0

080078e0 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a3c      	ldr	r2, [pc, #240]	; (80079dc <GPIO_DeInit+0xfc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d108      	bne.n	8007902 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80078f0:	2101      	movs	r1, #1
 80078f2:	2001      	movs	r0, #1
 80078f4:	f002 f9de 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80078f8:	2100      	movs	r1, #0
 80078fa:	2001      	movs	r0, #1
 80078fc:	f002 f9da 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8007900:	e068      	b.n	80079d4 <GPIO_DeInit+0xf4>
  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a36      	ldr	r2, [pc, #216]	; (80079e0 <GPIO_DeInit+0x100>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800790a:	2101      	movs	r1, #1
 800790c:	2002      	movs	r0, #2
 800790e:	f002 f9d1 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8007912:	2100      	movs	r1, #0
 8007914:	2002      	movs	r0, #2
 8007916:	f002 f9cd 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800791a:	e05b      	b.n	80079d4 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a31      	ldr	r2, [pc, #196]	; (80079e4 <GPIO_DeInit+0x104>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d108      	bne.n	8007936 <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8007924:	2101      	movs	r1, #1
 8007926:	2004      	movs	r0, #4
 8007928:	f002 f9c4 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800792c:	2100      	movs	r1, #0
 800792e:	2004      	movs	r0, #4
 8007930:	f002 f9c0 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8007934:	e04e      	b.n	80079d4 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a2b      	ldr	r2, [pc, #172]	; (80079e8 <GPIO_DeInit+0x108>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d108      	bne.n	8007950 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800793e:	2101      	movs	r1, #1
 8007940:	2008      	movs	r0, #8
 8007942:	f002 f9b7 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8007946:	2100      	movs	r1, #0
 8007948:	2008      	movs	r0, #8
 800794a:	f002 f9b3 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800794e:	e041      	b.n	80079d4 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a26      	ldr	r2, [pc, #152]	; (80079ec <GPIO_DeInit+0x10c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d108      	bne.n	800796a <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8007958:	2101      	movs	r1, #1
 800795a:	2010      	movs	r0, #16
 800795c:	f002 f9aa 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8007960:	2100      	movs	r1, #0
 8007962:	2010      	movs	r0, #16
 8007964:	f002 f9a6 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8007968:	e034      	b.n	80079d4 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a20      	ldr	r2, [pc, #128]	; (80079f0 <GPIO_DeInit+0x110>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d108      	bne.n	8007984 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8007972:	2101      	movs	r1, #1
 8007974:	2020      	movs	r0, #32
 8007976:	f002 f99d 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800797a:	2100      	movs	r1, #0
 800797c:	2020      	movs	r0, #32
 800797e:	f002 f999 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8007982:	e027      	b.n	80079d4 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <GPIO_DeInit+0x114>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d108      	bne.n	800799e <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800798c:	2101      	movs	r1, #1
 800798e:	2040      	movs	r0, #64	; 0x40
 8007990:	f002 f990 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8007994:	2100      	movs	r1, #0
 8007996:	2040      	movs	r0, #64	; 0x40
 8007998:	f002 f98c 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800799c:	e01a      	b.n	80079d4 <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <GPIO_DeInit+0x118>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d108      	bne.n	80079b8 <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80079a6:	2101      	movs	r1, #1
 80079a8:	2080      	movs	r0, #128	; 0x80
 80079aa:	f002 f983 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80079ae:	2100      	movs	r1, #0
 80079b0:	2080      	movs	r0, #128	; 0x80
 80079b2:	f002 f97f 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80079b6:	e00d      	b.n	80079d4 <GPIO_DeInit+0xf4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <GPIO_DeInit+0x11c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d109      	bne.n	80079d4 <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80079c0:	2101      	movs	r1, #1
 80079c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079c6:	f002 f975 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80079ca:	2100      	movs	r1, #0
 80079cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079d0:	f002 f970 	bl	8009cb4 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80079d4:	bf00      	nop
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40020000 	.word	0x40020000
 80079e0:	40020400 	.word	0x40020400
 80079e4:	40020800 	.word	0x40020800
 80079e8:	40020c00 	.word	0x40020c00
 80079ec:	40021000 	.word	0x40021000
 80079f0:	40021400 	.word	0x40021400
 80079f4:	40021800 	.word	0x40021800
 80079f8:	40021c00 	.word	0x40021c00
 80079fc:	40022000 	.word	0x40022000

08007a00 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e076      	b.n	8007b0a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d165      	bne.n	8007b04 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	2103      	movs	r1, #3
 8007a42:	fa01 f303 	lsl.w	r3, r1, r3
 8007a46:	43db      	mvns	r3, r3
 8007a48:	401a      	ands	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	791b      	ldrb	r3, [r3, #4]
 8007a56:	4619      	mov	r1, r3
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d003      	beq.n	8007a76 <GPIO_Init+0x76>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	791b      	ldrb	r3, [r3, #4]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d12e      	bne.n	8007ad4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	2103      	movs	r1, #3
 8007a80:	fa01 f303 	lsl.w	r3, r1, r3
 8007a84:	43db      	mvns	r3, r3
 8007a86:	401a      	ands	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	795b      	ldrb	r3, [r3, #5]
 8007a94:	4619      	mov	r1, r3
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2101      	movs	r1, #1
 8007aae:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	401a      	ands	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	799b      	ldrb	r3, [r3, #6]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	2103      	movs	r1, #3
 8007ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	401a      	ands	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	79db      	ldrb	r3, [r3, #7]
 8007af4:	4619      	mov	r1, r3
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3301      	adds	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b0f      	cmp	r3, #15
 8007b0e:	d985      	bls.n	8007a1c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8007b10:	bf00      	nop
 8007b12:	371c      	adds	r7, #28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	71da      	strb	r2, [r3, #7]
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8007b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8007b62:	887a      	ldrh	r2, [r7, #2]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8007b70:	887a      	ldrh	r2, [r7, #2]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	60fb      	str	r3, [r7, #12]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
 8007bb4:	e001      	b.n	8007bba <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	b29b      	uxth	r3, r3
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop

08007be4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	887b      	ldrh	r3, [r7, #2]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
 8007c04:	e001      	b.n	8007c0a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	b29b      	uxth	r3, r3
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop

08007c34 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	887a      	ldrh	r2, [r7, #2]
 8007c44:	831a      	strh	r2, [r3, #24]
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop

08007c54 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	887a      	ldrh	r2, [r7, #2]
 8007c64:	835a      	strh	r2, [r3, #26]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop

08007c74 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	807b      	strh	r3, [r7, #2]
 8007c80:	4613      	mov	r3, r2
 8007c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8007c84:	787b      	ldrb	r3, [r7, #1]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	887a      	ldrh	r2, [r7, #2]
 8007c8e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8007c90:	e002      	b.n	8007c98 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	887a      	ldrh	r2, [r7, #2]
 8007c96:	835a      	strh	r2, [r3, #26]
  }
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8007cb0:	887a      	ldrh	r2, [r7, #2]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	615a      	str	r2, [r3, #20]
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop

08007cc4 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	695a      	ldr	r2, [r3, #20]
 8007cd4:	887b      	ldrh	r3, [r7, #2]
 8007cd6:	405a      	eors	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	615a      	str	r2, [r3, #20]
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	807b      	strh	r3, [r7, #2]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007d00:	787a      	ldrb	r2, [r7, #1]
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	08db      	lsrs	r3, r3, #3
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	4618      	mov	r0, r3
 8007d18:	887b      	ldrh	r3, [r7, #2]
 8007d1a:	08db      	lsrs	r3, r3, #3
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3208      	adds	r2, #8
 8007d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d28:	887b      	ldrh	r3, [r7, #2]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	210f      	movs	r1, #15
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	43db      	mvns	r3, r3
 8007d38:	ea02 0103 	and.w	r1, r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f100 0208 	add.w	r2, r0, #8
 8007d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8007d46:	887b      	ldrh	r3, [r7, #2]
 8007d48:	08db      	lsrs	r3, r3, #3
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3208      	adds	r2, #8
 8007d52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8007d5c:	887b      	ldrh	r3, [r7, #2]
 8007d5e:	08db      	lsrs	r3, r3, #3
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3208      	adds	r2, #8
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop

08007d7c <HASH_DeInit>:
  * @brief  De-initializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8007d80:	2101      	movs	r1, #1
 8007d82:	2020      	movs	r0, #32
 8007d84:	f001 ffb6 	bl	8009cf4 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8007d88:	2100      	movs	r1, #0
 8007d8a:	2020      	movs	r0, #32
 8007d8c:	f001 ffb2 	bl	8009cf4 <RCC_AHB2PeriphResetCmd>
}
 8007d90:	bf00      	nop
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HASH_Init+0x6c>)
 8007d9e:	4b18      	ldr	r3, [pc, #96]	; (8007e00 <HASH_Init+0x6c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007daa:	6013      	str	r3, [r2, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007dac:	4814      	ldr	r0, [pc, #80]	; (8007e00 <HASH_Init+0x6c>)
 8007dae:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <HASH_Init+0x6c>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6819      	ldr	r1, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007dba:	4319      	orrs	r1, r3
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 8007dc0:	430b      	orrs	r3, r1
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	6003      	str	r3, [r0, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b40      	cmp	r3, #64	; 0x40
 8007dcc:	d10c      	bne.n	8007de8 <HASH_Init+0x54>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8007dce:	4a0c      	ldr	r2, [pc, #48]	; (8007e00 <HASH_Init+0x6c>)
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <HASH_Init+0x6c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd8:	6013      	str	r3, [r2, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8007dda:	4909      	ldr	r1, [pc, #36]	; (8007e00 <HASH_Init+0x6c>)
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <HASH_Init+0x6c>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	600b      	str	r3, [r1, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8007de8:	4a05      	ldr	r2, [pc, #20]	; (8007e00 <HASH_Init+0x6c>)
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HASH_Init+0x6c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f043 0304 	orr.w	r3, r3, #4
 8007df2:	6013      	str	r3, [r2, #0]
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	50060400 	.word	0x50060400

08007e04 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	60da      	str	r2, [r3, #12]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8007e34:	4a05      	ldr	r2, [pc, #20]	; (8007e4c <HASH_Reset+0x1c>)
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HASH_Reset+0x1c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f043 0304 	orr.w	r3, r3, #4
 8007e3e:	6013      	str	r3, [r2, #0]
}
 8007e40:	bf00      	nop
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	50060400 	.word	0x50060400

08007e50 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8007e5a:	4a09      	ldr	r2, [pc, #36]	; (8007e80 <HASH_SetLastWordValidBitsNbr+0x30>)
 8007e5c:	4b08      	ldr	r3, [pc, #32]	; (8007e80 <HASH_SetLastWordValidBitsNbr+0x30>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f023 031f 	bic.w	r3, r3, #31
 8007e64:	6093      	str	r3, [r2, #8]
  HASH->STR |= ValidNumber;
 8007e66:	4906      	ldr	r1, [pc, #24]	; (8007e80 <HASH_SetLastWordValidBitsNbr+0x30>)
 8007e68:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <HASH_SetLastWordValidBitsNbr+0x30>)
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	88fb      	ldrh	r3, [r7, #6]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	608b      	str	r3, [r1, #8]
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	50060400 	.word	0x50060400

08007e84 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8007e8c:	4a04      	ldr	r2, [pc, #16]	; (8007ea0 <HASH_DataIn+0x1c>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6053      	str	r3, [r2, #4]
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	50060400 	.word	0x50060400

08007ea4 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <HASH_GetInFIFOWordsNbr+0x1c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	b2db      	uxtb	r3, r3
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	50060400 	.word	0x50060400

08007ec4 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8007ecc:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <HASH_GetDigest+0x54>)
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <HASH_GetDigest+0x54>)
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8007edc:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <HASH_GetDigest+0x54>)
 8007ede:	695a      	ldr	r2, [r3, #20]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <HASH_GetDigest+0x54>)
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <HASH_GetDigest+0x54>)
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	611a      	str	r2, [r3, #16]
  HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 8007ef4:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HASH_GetDigest+0x58>)
 8007ef6:	695a      	ldr	r2, [r3, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	615a      	str	r2, [r3, #20]
  HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 8007efc:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <HASH_GetDigest+0x58>)
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	619a      	str	r2, [r3, #24]
  HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <HASH_GetDigest+0x58>)
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	61da      	str	r2, [r3, #28]
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	50060400 	.word	0x50060400
 8007f1c:	50060710 	.word	0x50060710

08007f20 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 8007f24:	4a05      	ldr	r2, [pc, #20]	; (8007f3c <HASH_StartDigest+0x1c>)
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HASH_StartDigest+0x1c>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f2e:	6093      	str	r3, [r2, #8]
}
 8007f30:	bf00      	nop
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	50060400 	.word	0x50060400

08007f40 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 8007f4c:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <HASH_SaveContext+0x58>)
 8007f4e:	6a1a      	ldr	r2, [r3, #32]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 8007f54:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <HASH_SaveContext+0x58>)
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <HASH_SaveContext+0x58>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	609a      	str	r2, [r3, #8]
  for(i=0; i<=53;i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
 8007f68:	e00d      	b.n	8007f86 <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	490a      	ldr	r1, [pc, #40]	; (8007f98 <HASH_SaveContext+0x58>)
 8007f6e:	7bfa      	ldrb	r2, [r7, #15]
 8007f70:	323e      	adds	r2, #62	; 0x3e
 8007f72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	3302      	adds	r3, #2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=53;i++)
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	3301      	adds	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b35      	cmp	r3, #53	; 0x35
 8007f8a:	d9ee      	bls.n	8007f6a <HASH_SaveContext+0x2a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8007f8c:	bf00      	nop
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	50060400 	.word	0x50060400

08007f9c <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8007fa8:	4a16      	ldr	r2, [pc, #88]	; (8008004 <HASH_RestoreContext+0x68>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6213      	str	r3, [r2, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8007fb0:	4a14      	ldr	r2, [pc, #80]	; (8008004 <HASH_RestoreContext+0x68>)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	6093      	str	r3, [r2, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 8007fb8:	4a12      	ldr	r2, [pc, #72]	; (8008004 <HASH_RestoreContext+0x68>)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	6013      	str	r3, [r2, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8007fc0:	4a10      	ldr	r2, [pc, #64]	; (8008004 <HASH_RestoreContext+0x68>)
 8007fc2:	4b10      	ldr	r3, [pc, #64]	; (8008004 <HASH_RestoreContext+0x68>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f043 0304 	orr.w	r3, r3, #4
 8007fca:	6013      	str	r3, [r2, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
 8007fd0:	e00e      	b.n	8007ff0 <HASH_RestoreContext+0x54>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8007fd2:	480c      	ldr	r0, [pc, #48]	; (8008004 <HASH_RestoreContext+0x68>)
 8007fd4:	7bf9      	ldrb	r1, [r7, #15]
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	3302      	adds	r3, #2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	f101 033e 	add.w	r3, r1, #62	; 0x3e
 8007fe6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	3301      	adds	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	2b35      	cmp	r3, #53	; 0x35
 8007ff4:	d9ed      	bls.n	8007fd2 <HASH_RestoreContext+0x36>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	50060400 	.word	0x50060400

08008008 <HASH_AutoStartDigest>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_AutoStartDigest(FunctionalState NewState)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d006      	beq.n	8008026 <HASH_AutoStartDigest+0x1e>
  {
    /* Enable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR &= ~HASH_CR_MDMAT;
 8008018:	4a09      	ldr	r2, [pc, #36]	; (8008040 <HASH_AutoStartDigest+0x38>)
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <HASH_AutoStartDigest+0x38>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008022:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
  }
}
 8008024:	e005      	b.n	8008032 <HASH_AutoStartDigest+0x2a>
    HASH->CR &= ~HASH_CR_MDMAT;
  }
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
 8008026:	4a06      	ldr	r2, [pc, #24]	; (8008040 <HASH_AutoStartDigest+0x38>)
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <HASH_AutoStartDigest+0x38>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008030:	6013      	str	r3, [r2, #0]
  }
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	50060400 	.word	0x50060400

08008044 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d006      	beq.n	8008062 <HASH_DMACmd+0x1e>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8008054:	4a09      	ldr	r2, [pc, #36]	; (800807c <HASH_DMACmd+0x38>)
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <HASH_DMACmd+0x38>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f043 0308 	orr.w	r3, r3, #8
 800805e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
  }
}
 8008060:	e005      	b.n	800806e <HASH_DMACmd+0x2a>
    HASH->CR |= HASH_CR_DMAE;
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 8008062:	4a06      	ldr	r2, [pc, #24]	; (800807c <HASH_DMACmd+0x38>)
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <HASH_DMACmd+0x38>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f023 0308 	bic.w	r3, r3, #8
 800806c:	6013      	str	r3, [r2, #0]
  }
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	50060400 	.word	0x50060400

08008080 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d006      	beq.n	80080a0 <HASH_ITConfig+0x20>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8008092:	490a      	ldr	r1, [pc, #40]	; (80080bc <HASH_ITConfig+0x3c>)
 8008094:	4b09      	ldr	r3, [pc, #36]	; (80080bc <HASH_ITConfig+0x3c>)
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4313      	orrs	r3, r2
 800809c:	620b      	str	r3, [r1, #32]
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
  }
}
 800809e:	e006      	b.n	80080ae <HASH_ITConfig+0x2e>
    HASH->IMR |= HASH_IT;
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
 80080a0:	4906      	ldr	r1, [pc, #24]	; (80080bc <HASH_ITConfig+0x3c>)
 80080a2:	4b06      	ldr	r3, [pc, #24]	; (80080bc <HASH_ITConfig+0x3c>)
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	43db      	mvns	r3, r3
 80080aa:	4013      	ands	r3, r2
 80080ac:	620b      	str	r3, [r1, #32]
  }
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	50060400 	.word	0x50060400

080080c0 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HASH_GetFlagStatus+0x22>
  {
    tempreg = HASH->CR;
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <HASH_GetFlagStatus+0x4c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	e002      	b.n	80080e8 <HASH_GetFlagStatus+0x28>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <HASH_GetFlagStatus+0x4c>)
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HASH_GetFlagStatus+0x38>
  {
    /* HASH is set */
    bitstatus = SET;
 80080f2:	2301      	movs	r3, #1
 80080f4:	73fb      	strb	r3, [r7, #15]
 80080f6:	e001      	b.n	80080fc <HASH_GetFlagStatus+0x3c>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	50060400 	.word	0x50060400

08008110 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint32_t HASH_FLAG)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 8008118:	4a04      	ldr	r2, [pc, #16]	; (800812c <HASH_ClearFlag+0x1c>)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	43db      	mvns	r3, r3
 800811e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	50060400 	.word	0x50060400

08008130 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint32_t HASH_IT)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <HASH_GetITStatus+0x40>)
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8008146:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <HASH_GetITStatus+0x40>)
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	401a      	ands	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HASH_GetITStatus+0x2c>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
 800815a:	e001      	b.n	8008160 <HASH_GetITStatus+0x30>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	50060400 	.word	0x50060400

08008174 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint32_t HASH_IT)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint32_t)(~HASH_IT);
 800817c:	4a04      	ldr	r2, [pc, #16]	; (8008190 <HASH_ClearITPendingBit+0x1c>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	43db      	mvns	r3, r3
 8008182:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	50060400 	.word	0x50060400

08008194 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b0a0      	sub	sp, #128	; 0x80
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	673b      	str	r3, [r7, #112]	; 0x70
  ErrorStatus status = SUCCESS;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t inputaddr  = (uint32_t)Input;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t outputaddr = (uint32_t)Output;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	66fb      	str	r3, [r7, #108]	; 0x6c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 80081ce:	f7ff fdd5 	bl	8007d7c <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 80081d2:	2380      	movs	r3, #128	; 0x80
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 80081d6:	2300      	movs	r3, #0
 80081d8:	643b      	str	r3, [r7, #64]	; 0x40
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80081da:	2320      	movs	r3, #32
 80081dc:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&MD5_HASH_InitStructure);
 80081de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fdd6 	bl	8007d94 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80081e8:	8b7b      	ldrh	r3, [r7, #26]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fe2f 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80081f2:	2300      	movs	r3, #0
 80081f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081f6:	e00a      	b.n	800820e <HASH_MD5+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80081f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fe41 	bl	8007e84 <HASH_DataIn>
    inputaddr+=4;
 8008202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008204:	3304      	adds	r3, #4
 8008206:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800820a:	3304      	adds	r3, #4
 800820c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800820e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	d3f0      	bcc.n	80081f8 <HASH_MD5+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8008216:	f7ff fe83 	bl	8007f20 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800821a:	2008      	movs	r0, #8
 800821c:	f7ff ff50 	bl	80080c0 <HASH_GetFlagStatus>
 8008220:	4603      	mov	r3, r0
 8008222:	673b      	str	r3, [r7, #112]	; 0x70
    counter++;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	3301      	adds	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008230:	d002      	beq.n	8008238 <HASH_MD5+0xa4>
 8008232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1f0      	bne.n	800821a <HASH_MD5+0x86>

  if (busystatus != RESET)
 8008238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HASH_MD5+0xb2>
  {
     status = ERROR;
 800823e:	2300      	movs	r3, #0
 8008240:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008244:	e02d      	b.n	80082a2 <HASH_MD5+0x10e>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8008246:	f107 031c 	add.w	r3, r7, #28
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff fe3a 	bl	8007ec4 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8008250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	66ba      	str	r2, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008256:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008258:	ba12      	rev	r2, r2
 800825a:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 800825c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800825e:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8008260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008262:	3304      	adds	r3, #4
 8008264:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8008266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008268:	6a3a      	ldr	r2, [r7, #32]
 800826a:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800826c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800826e:	ba12      	rev	r2, r2
 8008270:	653a      	str	r2, [r7, #80]	; 0x50
  return(result);
 8008272:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008274:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8008276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008278:	3304      	adds	r3, #4
 800827a:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800827c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008280:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008282:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008284:	ba12      	rev	r2, r2
 8008286:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8008288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800828a:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800828c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828e:	3304      	adds	r3, #4
 8008290:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8008292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008296:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008298:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800829a:	ba12      	rev	r2, r2
 800829c:	65ba      	str	r2, [r7, #88]	; 0x58
  return(result);
 800829e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082a0:	601a      	str	r2, [r3, #0]
  }
  return status; 
 80082a2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3780      	adds	r7, #128	; 0x80
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop

080082b0 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b0a0      	sub	sp, #128	; 0x80
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 80082e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082e4:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	b29b      	uxth	r3, r3
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	b29b      	uxth	r3, r3
 8008304:	82bb      	strh	r3, [r7, #20]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8008306:	f7ff fd39 	bl	8007d7c <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	63bb      	str	r3, [r7, #56]	; 0x38
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800830e:	2340      	movs	r3, #64	; 0x40
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008312:	2320      	movs	r3, #32
 8008314:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b40      	cmp	r3, #64	; 0x40
 800831a:	d903      	bls.n	8008324 <HMAC_MD5+0x74>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800831c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008320:	647b      	str	r3, [r7, #68]	; 0x44
 8008322:	e001      	b.n	8008328 <HMAC_MD5+0x78>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8008324:	2300      	movs	r3, #0
 8008326:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8008328:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fd31 	bl	8007d94 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008332:	8abb      	ldrh	r3, [r7, #20]
 8008334:	b29b      	uxth	r3, r3
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fd8a 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800833c:	2300      	movs	r3, #0
 800833e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008340:	e00a      	b.n	8008358 <HMAC_MD5+0xa8>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8008342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fd9c 	bl	8007e84 <HASH_DataIn>
    keyaddr+=4;
 800834c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800834e:	3304      	adds	r3, #4
 8008350:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8008352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008354:	3304      	adds	r3, #4
 8008356:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008358:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	429a      	cmp	r2, r3
 800835e:	d3f0      	bcc.n	8008342 <HMAC_MD5+0x92>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 8008360:	f7ff fdde 	bl	8007f20 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008364:	2008      	movs	r0, #8
 8008366:	f7ff feab 	bl	80080c0 <HASH_GetFlagStatus>
 800836a:	4603      	mov	r3, r0
 800836c:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837a:	d002      	beq.n	8008382 <HMAC_MD5+0xd2>
 800837c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f0      	bne.n	8008364 <HMAC_MD5+0xb4>

  if (busystatus != RESET)
 8008382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HMAC_MD5+0xe0>
  {
     status = ERROR;
 8008388:	2300      	movs	r3, #0
 800838a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800838e:	e091      	b.n	80084b4 <HMAC_MD5+0x204>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8008390:	8afb      	ldrh	r3, [r7, #22]
 8008392:	b29b      	uxth	r3, r3
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff fd5b 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800839a:	2300      	movs	r3, #0
 800839c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800839e:	e00a      	b.n	80083b6 <HMAC_MD5+0x106>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80083a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff fd6d 	bl	8007e84 <HASH_DataIn>
      inputaddr+=4;
 80083aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083ac:	3304      	adds	r3, #4
 80083ae:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80083b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083b2:	3304      	adds	r3, #4
 80083b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d3f0      	bcc.n	80083a0 <HMAC_MD5+0xf0>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 80083be:	f7ff fdaf 	bl	8007f20 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	613b      	str	r3, [r7, #16]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80083c6:	2008      	movs	r0, #8
 80083c8:	f7ff fe7a 	bl	80080c0 <HASH_GetFlagStatus>
 80083cc:	4603      	mov	r3, r0
 80083ce:	66fb      	str	r3, [r7, #108]	; 0x6c
       counter++;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083dc:	d002      	beq.n	80083e4 <HMAC_MD5+0x134>
 80083de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f0      	bne.n	80083c6 <HMAC_MD5+0x116>

    if (busystatus != RESET)
 80083e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HMAC_MD5+0x142>
    {
      status = ERROR;
 80083ea:	2300      	movs	r3, #0
 80083ec:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80083f0:	e060      	b.n	80084b4 <HMAC_MD5+0x204>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80083f2:	8abb      	ldrh	r3, [r7, #20]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fd2a 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 8008400:	2300      	movs	r3, #0
 8008402:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008404:	e00a      	b.n	800841c <HMAC_MD5+0x16c>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8008406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fd3a 	bl	8007e84 <HASH_DataIn>
        keyaddr+=4;
 8008410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008412:	3304      	adds	r3, #4
 8008414:	677b      	str	r3, [r7, #116]	; 0x74
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8008416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008418:	3304      	adds	r3, #4
 800841a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800841c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	d3f0      	bcc.n	8008406 <HMAC_MD5+0x156>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8008424:	f7ff fd7c 	bl	8007f20 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8008428:	2300      	movs	r3, #0
 800842a:	613b      	str	r3, [r7, #16]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800842c:	2008      	movs	r0, #8
 800842e:	f7ff fe47 	bl	80080c0 <HASH_GetFlagStatus>
 8008432:	4603      	mov	r3, r0
 8008434:	66fb      	str	r3, [r7, #108]	; 0x6c
          counter++;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3301      	adds	r3, #1
 800843a:	613b      	str	r3, [r7, #16]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008442:	d002      	beq.n	800844a <HMAC_MD5+0x19a>
 8008444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f0      	bne.n	800842c <HMAC_MD5+0x17c>

      if (busystatus != RESET)
 800844a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HMAC_MD5+0x1a8>
      {
         status = ERROR;
 8008450:	2300      	movs	r3, #0
 8008452:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008456:	e02d      	b.n	80084b4 <HMAC_MD5+0x204>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8008458:	f107 0318 	add.w	r3, r7, #24
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fd31 	bl	8007ec4 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8008462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008468:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800846a:	ba12      	rev	r2, r2
 800846c:	64ba      	str	r2, [r7, #72]	; 0x48
  return(result);
 800846e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008470:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8008472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008474:	3304      	adds	r3, #4
 8008476:	66bb      	str	r3, [r7, #104]	; 0x68
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8008478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800847e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008480:	ba12      	rev	r2, r2
 8008482:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 8008484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008486:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8008488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800848a:	3304      	adds	r3, #4
 800848c:	66bb      	str	r3, [r7, #104]	; 0x68
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800848e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008490:	6a3a      	ldr	r2, [r7, #32]
 8008492:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008496:	ba12      	rev	r2, r2
 8008498:	653a      	str	r2, [r7, #80]	; 0x50
  return(result);
 800849a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800849c:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800849e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a0:	3304      	adds	r3, #4
 80084a2:	66bb      	str	r3, [r7, #104]	; 0x68
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 80084a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80084aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ac:	ba12      	rev	r2, r2
 80084ae:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80084b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084b2:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 80084b4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3780      	adds	r7, #128	; 0x80
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b0a2      	sub	sp, #136	; 0x88
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __IO uint32_t counter = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	67bb      	str	r3, [r7, #120]	; 0x78
  ErrorStatus status = SUCCESS;
 80084de:	2301      	movs	r3, #1
 80084e0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  uint32_t inputaddr  = (uint32_t)Input;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t outputaddr = (uint32_t)Output;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	677b      	str	r3, [r7, #116]	; 0x74

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 80084fc:	f7ff fc3e 	bl	8007d7c <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8008504:	2300      	movs	r3, #0
 8008506:	643b      	str	r3, [r7, #64]	; 0x40
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008508:	2320      	movs	r3, #32
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&SHA1_HASH_InitStructure);
 800850c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fc3f 	bl	8007d94 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8008516:	8b7b      	ldrh	r3, [r7, #26]
 8008518:	b29b      	uxth	r3, r3
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fc98 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008520:	2300      	movs	r3, #0
 8008522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008526:	e00c      	b.n	8008542 <HASH_SHA1+0x82>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8008528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fca9 	bl	8007e84 <HASH_DataIn>
    inputaddr+=4;
 8008532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008534:	3304      	adds	r3, #4
 8008536:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800853c:	3304      	adds	r3, #4
 800853e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008542:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	429a      	cmp	r2, r3
 800854a:	d3ed      	bcc.n	8008528 <HASH_SHA1+0x68>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800854c:	f7ff fce8 	bl	8007f20 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008550:	2008      	movs	r0, #8
 8008552:	f7ff fdb5 	bl	80080c0 <HASH_GetFlagStatus>
 8008556:	4603      	mov	r3, r0
 8008558:	67bb      	str	r3, [r7, #120]	; 0x78
    counter++;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	3301      	adds	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008566:	d002      	beq.n	800856e <HASH_SHA1+0xae>
 8008568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1f0      	bne.n	8008550 <HASH_SHA1+0x90>

  if (busystatus != RESET)
 800856e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <HASH_SHA1+0xbc>
  {
     status = ERROR;
 8008574:	2300      	movs	r3, #0
 8008576:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800857a:	e038      	b.n	80085ee <HASH_SHA1+0x12e>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800857c:	f107 031c 	add.w	r3, r7, #28
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff fc9f 	bl	8007ec4 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8008586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008588:	69fa      	ldr	r2, [r7, #28]
 800858a:	673a      	str	r2, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800858c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800858e:	ba12      	rev	r2, r2
 8008590:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 8008592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008594:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8008596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008598:	3304      	adds	r3, #4
 800859a:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800859c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800859e:	6a3a      	ldr	r2, [r7, #32]
 80085a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80085a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085a4:	ba12      	rev	r2, r2
 80085a6:	653a      	str	r2, [r7, #80]	; 0x50
  return(result);
 80085a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085aa:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80085ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ae:	3304      	adds	r3, #4
 80085b0:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 80085b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b6:	66ba      	str	r2, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80085b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085ba:	ba12      	rev	r2, r2
 80085bc:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80085be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085c0:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80085c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c4:	3304      	adds	r3, #4
 80085c6:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 80085c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085cc:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80085ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085d0:	ba12      	rev	r2, r2
 80085d2:	65ba      	str	r2, [r7, #88]	; 0x58
  return(result);
 80085d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d6:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80085d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085da:	3304      	adds	r3, #4
 80085dc:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 80085de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e2:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80085e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085e6:	ba12      	rev	r2, r2
 80085e8:	65fa      	str	r2, [r7, #92]	; 0x5c
  return(result);
 80085ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085ec:	601a      	str	r2, [r3, #0]
  }
  return status;
 80085ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3788      	adds	r7, #136	; 0x88
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop

080085fc <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b0a2      	sub	sp, #136	; 0x88
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __IO uint32_t counter = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  uint32_t keyaddr    = (uint32_t)Key;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t inputaddr  = (uint32_t)Input;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t outputaddr = (uint32_t)Output;
 800862e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008632:	673b      	str	r3, [r7, #112]	; 0x70

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	b29b      	uxth	r3, r3
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	b29b      	uxth	r3, r3
 8008642:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	b29b      	uxth	r3, r3
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	b29b      	uxth	r3, r3
 8008652:	82bb      	strh	r3, [r7, #20]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8008654:	f7ff fb92 	bl	8007d7c <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8008658:	2300      	movs	r3, #0
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800865c:	2340      	movs	r3, #64	; 0x40
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008660:	2320      	movs	r3, #32
 8008662:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d903      	bls.n	8008672 <HMAC_SHA1+0x76>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800866a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800866e:	647b      	str	r3, [r7, #68]	; 0x44
 8008670:	e001      	b.n	8008676 <HMAC_SHA1+0x7a>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8008672:	2300      	movs	r3, #0
 8008674:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8008676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fb8a 	bl	8007d94 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008680:	8abb      	ldrh	r3, [r7, #20]
 8008682:	b29b      	uxth	r3, r3
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fbe3 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800868a:	2300      	movs	r3, #0
 800868c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008690:	e00c      	b.n	80086ac <HMAC_SHA1+0xb0>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8008692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fbf4 	bl	8007e84 <HASH_DataIn>
    keyaddr+=4;
 800869c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800869e:	3304      	adds	r3, #4
 80086a0:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80086a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086a6:	3304      	adds	r3, #4
 80086a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d3ed      	bcc.n	8008692 <HMAC_SHA1+0x96>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 80086b6:	f7ff fc33 	bl	8007f20 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80086ba:	2008      	movs	r0, #8
 80086bc:	f7ff fd00 	bl	80080c0 <HASH_GetFlagStatus>
 80086c0:	4603      	mov	r3, r0
 80086c2:	677b      	str	r3, [r7, #116]	; 0x74
    counter++;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	3301      	adds	r3, #1
 80086c8:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d002      	beq.n	80086d8 <HMAC_SHA1+0xdc>
 80086d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1f0      	bne.n	80086ba <HMAC_SHA1+0xbe>

  if (busystatus != RESET)
 80086d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HMAC_SHA1+0xea>
  {
     status = ERROR;
 80086de:	2300      	movs	r3, #0
 80086e0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80086e4:	e0a4      	b.n	8008830 <HMAC_SHA1+0x234>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80086e6:	8afb      	ldrh	r3, [r7, #22]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fbb0 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80086f0:	2300      	movs	r3, #0
 80086f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086f6:	e00c      	b.n	8008712 <HMAC_SHA1+0x116>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80086f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fbc1 	bl	8007e84 <HASH_DataIn>
      inputaddr+=4;
 8008702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008704:	3304      	adds	r3, #4
 8008706:	67bb      	str	r3, [r7, #120]	; 0x78
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8008708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800870c:	3304      	adds	r3, #4
 800870e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008712:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	d3ed      	bcc.n	80086f8 <HMAC_SHA1+0xfc>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800871c:	f7ff fc00 	bl	8007f20 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008724:	2008      	movs	r0, #8
 8008726:	f7ff fccb 	bl	80080c0 <HASH_GetFlagStatus>
 800872a:	4603      	mov	r3, r0
 800872c:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3301      	adds	r3, #1
 8008732:	613b      	str	r3, [r7, #16]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873a:	d002      	beq.n	8008742 <HMAC_SHA1+0x146>
 800873c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f0      	bne.n	8008724 <HMAC_SHA1+0x128>

    if (busystatus != RESET)
 8008742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <HMAC_SHA1+0x154>
    {
      status = ERROR;
 8008748:	2300      	movs	r3, #0
 800874a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800874e:	e06f      	b.n	8008830 <HMAC_SHA1+0x234>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008750:	8abb      	ldrh	r3, [r7, #20]
 8008752:	b29b      	uxth	r3, r3
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fb7b 	bl	8007e50 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	67fb      	str	r3, [r7, #124]	; 0x7c
      for(i=0; i<Keylen; i+=4)
 800875e:	2300      	movs	r3, #0
 8008760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008764:	e00c      	b.n	8008780 <HMAC_SHA1+0x184>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8008766:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff fb8a 	bl	8007e84 <HASH_DataIn>
        keyaddr+=4;
 8008770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008772:	3304      	adds	r3, #4
 8008774:	67fb      	str	r3, [r7, #124]	; 0x7c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8008776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800877a:	3304      	adds	r3, #4
 800877c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008780:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	429a      	cmp	r2, r3
 8008788:	d3ed      	bcc.n	8008766 <HMAC_SHA1+0x16a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800878a:	f7ff fbc9 	bl	8007f20 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800878e:	2300      	movs	r3, #0
 8008790:	613b      	str	r3, [r7, #16]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008792:	2008      	movs	r0, #8
 8008794:	f7ff fc94 	bl	80080c0 <HASH_GetFlagStatus>
 8008798:	4603      	mov	r3, r0
 800879a:	677b      	str	r3, [r7, #116]	; 0x74
        counter++;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	3301      	adds	r3, #1
 80087a0:	613b      	str	r3, [r7, #16]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a8:	d002      	beq.n	80087b0 <HMAC_SHA1+0x1b4>
 80087aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1f0      	bne.n	8008792 <HMAC_SHA1+0x196>

      if (busystatus != RESET)
 80087b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HMAC_SHA1+0x1c2>
      {
        status = ERROR;
 80087b6:	2300      	movs	r3, #0
 80087b8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80087bc:	e038      	b.n	8008830 <HMAC_SHA1+0x234>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 80087be:	f107 0318 	add.w	r3, r7, #24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff fb7e 	bl	8007ec4 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 80087c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80087ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087d0:	ba12      	rev	r2, r2
 80087d2:	64ba      	str	r2, [r7, #72]	; 0x48
  return(result);
 80087d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d6:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 80087d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087da:	3304      	adds	r3, #4
 80087dc:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 80087de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	66ba      	str	r2, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80087e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087e6:	ba12      	rev	r2, r2
 80087e8:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 80087ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087ec:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 80087ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087f0:	3304      	adds	r3, #4
 80087f2:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 80087f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087f6:	6a3a      	ldr	r2, [r7, #32]
 80087f8:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80087fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087fc:	ba12      	rev	r2, r2
 80087fe:	653a      	str	r2, [r7, #80]	; 0x50
  return(result);
 8008800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008802:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8008804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008806:	3304      	adds	r3, #4
 8008808:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800880a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800880c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880e:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008812:	ba12      	rev	r2, r2
 8008814:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8008816:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008818:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800881a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800881c:	3304      	adds	r3, #4
 800881e:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8008820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008824:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008826:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008828:	ba12      	rev	r2, r2
 800882a:	65ba      	str	r2, [r7, #88]	; 0x58
  return(result);
 800882c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800882e:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 8008830:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
}
 8008834:	4618      	mov	r0, r3
 8008836:	3788      	adds	r7, #136	; 0x88
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a17      	ldr	r2, [pc, #92]	; (80088a4 <I2C_DeInit+0x68>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d10a      	bne.n	8008862 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800884c:	2101      	movs	r1, #1
 800884e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008852:	f001 fa8f 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8008856:	2100      	movs	r1, #0
 8008858:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800885c:	f001 fa8a 	bl	8009d74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8008860:	e01c      	b.n	800889c <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a10      	ldr	r2, [pc, #64]	; (80088a8 <I2C_DeInit+0x6c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d10a      	bne.n	8008880 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800886a:	2101      	movs	r1, #1
 800886c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008870:	f001 fa80 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8008874:	2100      	movs	r1, #0
 8008876:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800887a:	f001 fa7b 	bl	8009d74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800887e:	e00d      	b.n	800889c <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <I2C_DeInit+0x70>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d109      	bne.n	800889c <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8008888:	2101      	movs	r1, #1
 800888a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800888e:	f001 fa71 	bl	8009d74 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8008892:	2100      	movs	r1, #0
 8008894:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008898:	f001 fa6c 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40005400 	.word	0x40005400
 80088a8:	40005800 	.word	0x40005800
 80088ac:	40005c00 	.word	0x40005c00

080088b0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	; 0x28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80088be:	2300      	movs	r3, #0
 80088c0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80088c2:	2304      	movs	r3, #4
 80088c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80088c6:	4b57      	ldr	r3, [pc, #348]	; (8008a24 <I2C_Init+0x174>)
 80088c8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	889b      	ldrh	r3, [r3, #4]
 80088ce:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80088d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80088d8:	f107 030c 	add.w	r3, r7, #12
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 f831 	bl	8009944 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4a4f      	ldr	r2, [pc, #316]	; (8008a28 <I2C_Init+0x178>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	0c9b      	lsrs	r3, r3, #18
 80088f0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80088f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80088f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088f6:	4313      	orrs	r3, r2
 80088f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80088fe:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a44      	ldr	r2, [pc, #272]	; (8008a2c <I2C_Init+0x17c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d815      	bhi.n	800894a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	fbb2 f3f3 	udiv	r3, r2, r3
 800892a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800892c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800892e:	2b03      	cmp	r3, #3
 8008930:	d801      	bhi.n	8008936 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8008932:	2304      	movs	r3, #4
 8008934:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8008936:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800893a:	4313      	orrs	r3, r2
 800893c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800893e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008940:	3301      	adds	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	841a      	strh	r2, [r3, #32]
 8008948:	e040      	b.n	80089cc <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	88db      	ldrh	r3, [r3, #6]
 800894e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8008952:	4293      	cmp	r3, r2
 8008954:	d109      	bne.n	800896a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4613      	mov	r3, r2
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	4413      	add	r3, r2
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008968:	e00e      	b.n	8008988 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009a      	lsls	r2, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	69fa      	ldr	r2, [r7, #28]
 800897a:	fbb2 f3f3 	udiv	r3, r2, r3
 800897e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8008980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008986:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8008988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800898a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8008992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008994:	f043 0301 	orr.w	r3, r3, #1
 8008998:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800899a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800899c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800899e:	4313      	orrs	r3, r2
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089aa:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80089ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089b2:	fb02 f303 	mul.w	r3, r2, r3
 80089b6:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <I2C_Init+0x180>)
 80089b8:	fb82 1203 	smull	r1, r2, r2, r3
 80089bc:	1192      	asrs	r2, r2, #6
 80089be:	17db      	asrs	r3, r3, #31
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3301      	adds	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80089d0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f043 0301 	orr.w	r3, r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80089e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089ea:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80089ee:	f023 0302 	bic.w	r3, r3, #2
 80089f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	889a      	ldrh	r2, [r3, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	895b      	ldrh	r3, [r3, #10]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a02:	4313      	orrs	r3, r2
 8008a04:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a0a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	899a      	ldrh	r2, [r3, #12]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	891b      	ldrh	r3, [r3, #8]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	811a      	strh	r2, [r3, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	3728      	adds	r7, #40	; 0x28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	007a1200 	.word	0x007a1200
 8008a28:	431bde83 	.word	0x431bde83
 8008a2c:	000186a0 	.word	0x000186a0
 8008a30:	10624dd3 	.word	0x10624dd3

08008a34 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a42:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8008a50:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a64:	819a      	strh	r2, [r3, #12]
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop

08008a74 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f043 0301 	orr.w	r3, r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8008a96:	e007      	b.n	8008aa8 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	801a      	strh	r2, [r3, #0]
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d008      	beq.n	8008ad8 <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f023 0310 	bic.w	r3, r3, #16
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	849a      	strh	r2, [r3, #36]	; 0x24
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
  }
}
 8008ad6:	e007      	b.n	8008ae8 <I2C_AnalogFilterCmd+0x34>
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	f043 0310 	orr.w	r3, r3, #16
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b08:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 8008b0a:	89fb      	ldrh	r3, [r7, #14]
 8008b0c:	f023 030f 	bic.w	r3, r3, #15
 8008b10:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8008b12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b16:	f003 030f 	and.w	r3, r3, #15
 8008b1a:	b21a      	sxth	r2, r3
 8008b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	b21b      	sxth	r3, r3
 8008b24:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	89fa      	ldrh	r2, [r7, #14]
 8008b2a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8008b2c:	bf00      	nop
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8008b5a:	e007      	b.n	8008b6c <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	801a      	strh	r2, [r3, #0]
  }
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8008b9a:	e007      	b.n	8008bac <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	801a      	strh	r2, [r3, #0]
  }
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8008bc8:	78bb      	ldrb	r3, [r7, #2]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	f043 0301 	orr.w	r3, r3, #1
 8008bd4:	70fb      	strb	r3, [r7, #3]
 8008bd6:	e003      	b.n	8008be0 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	821a      	strh	r2, [r3, #16]
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d008      	beq.n	8008c18 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8008c16:	e007      	b.n	8008c28 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	801a      	strh	r2, [r3, #0]
  }
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	899b      	ldrh	r3, [r3, #12]
 8008c48:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8008c4a:	89fb      	ldrh	r3, [r7, #14]
 8008c4c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8008c50:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	b21b      	sxth	r3, r3
 8008c56:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008c5a:	b21a      	sxth	r2, r3
 8008c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	b21b      	sxth	r3, r3
 8008c64:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	89fa      	ldrh	r2, [r7, #14]
 8008c6a:	819a      	strh	r2, [r3, #12]
}
 8008c6c:	bf00      	nop
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d008      	beq.n	8008c9c <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	899b      	ldrh	r3, [r3, #12]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
  }
}
 8008c9a:	e007      	b.n	8008cac <I2C_DualAddressCmd+0x34>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	899b      	ldrh	r3, [r3, #12]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f023 0301 	bic.w	r3, r3, #1
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	819a      	strh	r2, [r3, #12]
  }
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d008      	beq.n	8008cdc <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
  }
}
 8008cda:	e007      	b.n	8008cec <I2C_GeneralCallCmd+0x34>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	801a      	strh	r2, [r3, #0]
  }
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
  }
}
 8008d1e:	e007      	b.n	8008d30 <I2C_SoftwareResetCmd+0x38>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	801a      	strh	r2, [r3, #0]
  }
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d108      	bne.n	8008d60 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
  }
}
 8008d5e:	e007      	b.n	8008d70 <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	801a      	strh	r2, [r3, #0]
  }
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8008d88:	887b      	ldrh	r3, [r7, #2]
 8008d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d8e:	d008      	beq.n	8008da2 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	8b9b      	ldrh	r3, [r3, #28]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	839a      	strh	r2, [r3, #28]
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
  }
}
 8008da0:	e007      	b.n	8008db2 <I2C_FastModeDutyCycleConfig+0x36>
    I2Cx->CCR &= I2C_DutyCycle_2;
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	8b9b      	ldrh	r3, [r3, #28]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	839a      	strh	r2, [r3, #28]
  }
}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop

08008dc0 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8008dcc:	887b      	ldrh	r3, [r7, #2]
 8008dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd2:	d108      	bne.n	8008de6 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 8008de4:	e007      	b.n	8008df6 <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	801a      	strh	r2, [r3, #0]
  }
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop

08008e04 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8008e10:	887b      	ldrh	r3, [r7, #2]
 8008e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e16:	d108      	bne.n	8008e2a <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
  }
}
 8008e28:	e007      	b.n	8008e3a <I2C_SMBusAlertConfig+0x36>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	801a      	strh	r2, [r3, #0]
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop

08008e48 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	f043 0310 	orr.w	r3, r3, #16
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
  }
}
 8008e6a:	e007      	b.n	8008e7c <I2C_ARPCmd+0x34>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f023 0310 	bic.w	r3, r3, #16
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	801a      	strh	r2, [r3, #0]
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	821a      	strh	r2, [r3, #16]
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	8a1b      	ldrh	r3, [r3, #16]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d008      	beq.n	8008ee8 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
  }
}
 8008ee6:	e007      	b.n	8008ef8 <I2C_TransmitPEC+0x34>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	801a      	strh	r2, [r3, #0]
  }
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8008f10:	887b      	ldrh	r3, [r7, #2]
 8008f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f16:	d108      	bne.n	8008f2a <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
  }
}
 8008f28:	e007      	b.n	8008f3a <I2C_PECPositionConfig+0x36>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	801a      	strh	r2, [r3, #0]
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop

08008f48 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f043 0320 	orr.w	r3, r3, #32
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
  }
}
 8008f6a:	e007      	b.n	8008f7c <I2C_CalculatePEC+0x34>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f023 0320 	bic.w	r3, r3, #32
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	801a      	strh	r2, [r3, #0]
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	8b1b      	ldrh	r3, [r3, #24]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	b2db      	uxtb	r3, r3
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d008      	beq.n	8008fcc <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	889b      	ldrh	r3, [r3, #4]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 8008fca:	e007      	b.n	8008fdc <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	889b      	ldrh	r3, [r3, #4]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	809a      	strh	r2, [r3, #4]
  }
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d008      	beq.n	800900c <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	889b      	ldrh	r3, [r3, #4]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009004:	b29a      	uxth	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 800900a:	e007      	b.n	800901c <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	889b      	ldrh	r3, [r3, #4]
 8009010:	b29b      	uxth	r3, r3
 8009012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	809a      	strh	r2, [r3, #4]
  }
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800903c:	78fa      	ldrb	r2, [r7, #3]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4413      	add	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop

08009058 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	807b      	strh	r3, [r7, #2]
 8009064:	4613      	mov	r3, r2
 8009066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8009068:	787b      	ldrb	r3, [r7, #1]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d008      	beq.n	8009080 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	889b      	ldrh	r3, [r3, #4]
 8009072:	b29a      	uxth	r2, r3
 8009074:	887b      	ldrh	r3, [r7, #2]
 8009076:	4313      	orrs	r3, r2
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 800907e:	e009      	b.n	8009094 <I2C_ITConfig+0x3c>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	889b      	ldrh	r3, [r3, #4]
 8009084:	b29a      	uxth	r2, r3
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	43db      	mvns	r3, r3
 800908a:	b29b      	uxth	r3, r3
 800908c:	4013      	ands	r3, r2
 800908e:	b29a      	uxth	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	809a      	strh	r2, [r3, #4]
  }
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	2300      	movs	r3, #0
 80090b4:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80090b6:	2300      	movs	r3, #0
 80090b8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	8a9b      	ldrh	r3, [r3, #20]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8b1b      	ldrh	r3, [r3, #24]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	041b      	lsls	r3, r3, #16
 80090ce:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090da:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	401a      	ands	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d102      	bne.n	80090ee <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80090e8:	2301      	movs	r3, #1
 80090ea:	75fb      	strb	r3, [r7, #23]
 80090ec:	e001      	b.n	80090f2 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80090ee:	2300      	movs	r3, #0
 80090f0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	613b      	str	r3, [r7, #16]
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8a9b      	ldrh	r3, [r3, #20]
 8009118:	b29b      	uxth	r3, r3
 800911a:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8b1b      	ldrh	r3, [r3, #24]
 8009120:	b29b      	uxth	r3, r3
 8009122:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	041b      	lsls	r3, r3, #16
 8009128:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009134:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8009136:	697b      	ldr	r3, [r7, #20]
}
 8009138:	4618      	mov	r0, r3
 800913a:	371c      	adds	r7, #28
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800914e:	2300      	movs	r3, #0
 8009150:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	613b      	str	r3, [r7, #16]
 8009156:	2300      	movs	r3, #0
 8009158:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	0f1b      	lsrs	r3, r3, #28
 8009162:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800916a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3314      	adds	r3, #20
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e005      	b.n	8009186 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	0c1b      	lsrs	r3, r3, #16
 800917e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3318      	adds	r3, #24
 8009184:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	4013      	ands	r3, r2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8009192:	2301      	movs	r3, #1
 8009194:	75fb      	strb	r3, [r7, #23]
 8009196:	e001      	b.n	800919c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8009198:	2300      	movs	r3, #0
 800919a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop

080091ac <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091c0:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	43db      	mvns	r3, r3
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	829a      	strh	r2, [r3, #20]
}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop

080091dc <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	0c1b      	lsrs	r3, r3, #16
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	8892      	ldrh	r2, [r2, #4]
 80091f6:	b292      	uxth	r2, r2
 80091f8:	4013      	ands	r3, r2
 80091fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091fe:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009206:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8a9b      	ldrh	r3, [r3, #20]
 800920c:	b29b      	uxth	r3, r3
 800920e:	461a      	mov	r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	4013      	ands	r3, r2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d005      	beq.n	8009224 <I2C_GetITStatus+0x48>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
 8009222:	e001      	b.n	8009228 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop

08009238 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800924c:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	b29b      	uxth	r3, r3
 8009252:	43db      	mvns	r3, r3
 8009254:	b29a      	uxth	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	829a      	strh	r2, [r3, #20]
}
 800925a:	bf00      	nop
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop

08009268 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8009272:	4a04      	ldr	r2, [pc, #16]	; (8009284 <IWDG_WriteAccessCmd+0x1c>)
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	6013      	str	r3, [r2, #0]
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	40003000 	.word	0x40003000

08009288 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8009292:	4a04      	ldr	r2, [pc, #16]	; (80092a4 <IWDG_SetPrescaler+0x1c>)
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	6053      	str	r3, [r2, #4]
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	40003000 	.word	0x40003000

080092a8 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 80092b2:	4a04      	ldr	r2, [pc, #16]	; (80092c4 <IWDG_SetReload+0x1c>)
 80092b4:	88fb      	ldrh	r3, [r7, #6]
 80092b6:	6093      	str	r3, [r2, #8]
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	40003000 	.word	0x40003000

080092c8 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 80092cc:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <IWDG_ReloadCounter+0x18>)
 80092ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	40003000 	.word	0x40003000

080092e4 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <IWDG_Enable+0x18>)
 80092ea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80092ee:	601a      	str	r2, [r3, #0]
}
 80092f0:	bf00      	nop
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40003000 	.word	0x40003000

08009300 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <IWDG_GetFlagStatus+0x34>)
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	4013      	ands	r3, r2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800931a:	2301      	movs	r3, #1
 800931c:	73fb      	strb	r3, [r7, #15]
 800931e:	e001      	b.n	8009324 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	40003000 	.word	0x40003000

08009338 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800933c:	2101      	movs	r1, #1
 800933e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009342:	f000 fd17 	bl	8009d74 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8009346:	2100      	movs	r1, #0
 8009348:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800934c:	f000 fd12 	bl	8009d74 <RCC_APB1PeriphResetCmd>
}
 8009350:	bf00      	nop
 8009352:	bd80      	pop	{r7, pc}

08009354 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800935e:	4a04      	ldr	r2, [pc, #16]	; (8009370 <PWR_BackupAccessCmd+0x1c>)
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	6013      	str	r3, [r2, #0]
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	420e0020 	.word	0x420e0020

08009374 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8009380:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <PWR_PVDLevelConfig+0x34>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800938c:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8009396:	4a04      	ldr	r2, [pc, #16]	; (80093a8 <PWR_PVDLevelConfig+0x34>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6013      	str	r3, [r2, #0]
}
 800939c:	bf00      	nop
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	40007000 	.word	0x40007000

080093ac <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 80093b6:	4a04      	ldr	r2, [pc, #16]	; (80093c8 <PWR_PVDCmd+0x1c>)
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	6013      	str	r3, [r2, #0]
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	420e0010 	.word	0x420e0010

080093cc <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 80093d6:	4a04      	ldr	r2, [pc, #16]	; (80093e8 <PWR_WakeUpPinCmd+0x1c>)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	6013      	str	r3, [r2, #0]
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	420e00a0 	.word	0x420e00a0

080093ec <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 80093f6:	4a04      	ldr	r2, [pc, #16]	; (8009408 <PWR_BackupRegulatorCmd+0x1c>)
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	6013      	str	r3, [r2, #0]
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	420e00a4 	.word	0x420e00a4

0800940c <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 8009418:	4b09      	ldr	r3, [pc, #36]	; (8009440 <PWR_MainRegulatorModeConfig+0x34>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009424:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4313      	orrs	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800942e:	4a04      	ldr	r2, [pc, #16]	; (8009440 <PWR_MainRegulatorModeConfig+0x34>)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6013      	str	r3, [r2, #0]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40007000 	.word	0x40007000

08009444 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800944e:	4a04      	ldr	r2, [pc, #16]	; (8009460 <PWR_FlashPowerDownCmd+0x1c>)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	6013      	str	r3, [r2, #0]
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	420e0024 	.word	0x420e0024

08009464 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8009474:	4b12      	ldr	r3, [pc, #72]	; (80094c0 <PWR_EnterSTOPMode+0x5c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800948a:	4a0d      	ldr	r2, [pc, #52]	; (80094c0 <PWR_EnterSTOPMode+0x5c>)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8009490:	4a0c      	ldr	r2, [pc, #48]	; (80094c4 <PWR_EnterSTOPMode+0x60>)
 8009492:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <PWR_EnterSTOPMode+0x60>)
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f043 0304 	orr.w	r3, r3, #4
 800949a:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <PWR_EnterSTOPMode+0x42>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80094a2:	bf30      	wfi
 80094a4:	e000      	b.n	80094a8 <PWR_EnterSTOPMode+0x44>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 80094a6:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 80094a8:	4a06      	ldr	r2, [pc, #24]	; (80094c4 <PWR_EnterSTOPMode+0x60>)
 80094aa:	4b06      	ldr	r3, [pc, #24]	; (80094c4 <PWR_EnterSTOPMode+0x60>)
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f023 0304 	bic.w	r3, r3, #4
 80094b2:	6113      	str	r3, [r2, #16]
}
 80094b4:	bf00      	nop
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	40007000 	.word	0x40007000
 80094c4:	e000ed00 	.word	0xe000ed00

080094c8 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 80094c8:	b480      	push	{r7}
 80094ca:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 80094cc:	4a0b      	ldr	r2, [pc, #44]	; (80094fc <PWR_EnterSTANDBYMode+0x34>)
 80094ce:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <PWR_EnterSTANDBYMode+0x34>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f043 0304 	orr.w	r3, r3, #4
 80094d6:	6013      	str	r3, [r2, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80094d8:	4a08      	ldr	r2, [pc, #32]	; (80094fc <PWR_EnterSTANDBYMode+0x34>)
 80094da:	4b08      	ldr	r3, [pc, #32]	; (80094fc <PWR_EnterSTANDBYMode+0x34>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f043 0302 	orr.w	r3, r3, #2
 80094e2:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80094e4:	4a06      	ldr	r2, [pc, #24]	; (8009500 <PWR_EnterSTANDBYMode+0x38>)
 80094e6:	4b06      	ldr	r3, [pc, #24]	; (8009500 <PWR_EnterSTANDBYMode+0x38>)
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f043 0304 	orr.w	r3, r3, #4
 80094ee:	6113      	str	r3, [r2, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80094f0:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80094f2:	bf00      	nop
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	40007000 	.word	0x40007000
 8009500:	e000ed00 	.word	0xe000ed00

08009504 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8009510:	4b08      	ldr	r3, [pc, #32]	; (8009534 <PWR_GetFlagStatus+0x30>)
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4013      	ands	r3, r2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
 8009520:	e001      	b.n	8009526 <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	40007000 	.word	0x40007000

08009538 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8009540:	4906      	ldr	r1, [pc, #24]	; (800955c <PWR_ClearFlag+0x24>)
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <PWR_ClearFlag+0x24>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4313      	orrs	r3, r2
 800954c:	600b      	str	r3, [r1, #0]
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40007000 	.word	0x40007000

08009560 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009564:	4a12      	ldr	r2, [pc, #72]	; (80095b0 <RCC_DeInit+0x50>)
 8009566:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <RCC_DeInit+0x50>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f043 0301 	orr.w	r3, r3, #1
 800956e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009570:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <RCC_DeInit+0x50>)
 8009572:	2200      	movs	r2, #0
 8009574:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8009576:	4a0e      	ldr	r2, [pc, #56]	; (80095b0 <RCC_DeInit+0x50>)
 8009578:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <RCC_DeInit+0x50>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8009580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009584:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009586:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <RCC_DeInit+0x50>)
 8009588:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <RCC_DeInit+0x54>)
 800958a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800958c:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <RCC_DeInit+0x50>)
 800958e:	4a0a      	ldr	r2, [pc, #40]	; (80095b8 <RCC_DeInit+0x58>)
 8009590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009594:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <RCC_DeInit+0x50>)
 8009596:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <RCC_DeInit+0x50>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800959e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <RCC_DeInit+0x50>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	40023800 	.word	0x40023800
 80095b4:	24003010 	.word	0x24003010
 80095b8:	20003000 	.word	0x20003000

080095bc <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80095c6:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <RCC_HSEConfig+0x24>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80095cc:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <RCC_HSEConfig+0x24>)
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	7013      	strb	r3, [r2, #0]
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40023802 	.word	0x40023802

080095e4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80095ee:	2300      	movs	r3, #0
 80095f0:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80095f2:	2300      	movs	r3, #0
 80095f4:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80095f6:	2031      	movs	r0, #49	; 0x31
 80095f8:	f000 fcc2 	bl	8009f80 <RCC_GetFlagStatus>
 80095fc:	4603      	mov	r3, r0
 80095fe:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800960c:	d002      	beq.n	8009614 <RCC_WaitForHSEStartUp+0x30>
 800960e:	79bb      	ldrb	r3, [r7, #6]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0f0      	beq.n	80095f6 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8009614:	2031      	movs	r0, #49	; 0x31
 8009616:	f000 fcb3 	bl	8009f80 <RCC_GetFlagStatus>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8009620:	2301      	movs	r3, #1
 8009622:	71fb      	strb	r3, [r7, #7]
 8009624:	e001      	b.n	800962a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8009626:	2300      	movs	r3, #0
 8009628:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800962a:	79fb      	ldrb	r3, [r7, #7]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <RCC_AdjustHSICalibrationValue+0x38>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800964e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800965a:	4a04      	ldr	r2, [pc, #16]	; (800966c <RCC_AdjustHSICalibrationValue+0x38>)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6013      	str	r3, [r2, #0]
}
 8009660:	bf00      	nop
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	40023800 	.word	0x40023800

08009670 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800967a:	4a04      	ldr	r2, [pc, #16]	; (800968c <RCC_HSICmd+0x1c>)
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	6013      	str	r3, [r2, #0]
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	42470000 	.word	0x42470000

08009690 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800969a:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <RCC_LSEConfig+0x40>)
 800969c:	2200      	movs	r2, #0
 800969e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <RCC_LSEConfig+0x40>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d002      	beq.n	80096b2 <RCC_LSEConfig+0x22>
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d004      	beq.n	80096ba <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 80096b0:	e007      	b.n	80096c2 <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <RCC_LSEConfig+0x40>)
 80096b4:	2201      	movs	r2, #1
 80096b6:	701a      	strb	r2, [r3, #0]
      break;
 80096b8:	e003      	b.n	80096c2 <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80096ba:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <RCC_LSEConfig+0x40>)
 80096bc:	2205      	movs	r2, #5
 80096be:	701a      	strb	r2, [r3, #0]
      break;
 80096c0:	bf00      	nop
    default:
      break;
  }
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40023870 	.word	0x40023870

080096d4 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80096de:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <RCC_LSICmd+0x1c>)
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	42470e80 	.word	0x42470e80

080096f4 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8009702:	490b      	ldr	r1, [pc, #44]	; (8009730 <RCC_PLLConfig+0x3c>)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	019a      	lsls	r2, r3, #6
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	431a      	orrs	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	085b      	lsrs	r3, r3, #1
 8009710:	3b01      	subs	r3, #1
 8009712:	041b      	lsls	r3, r3, #16
 8009714:	431a      	orrs	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	061b      	lsls	r3, r3, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800971e:	4313      	orrs	r3, r2
 8009720:	604b      	str	r3, [r1, #4]
                 (PLLQ << 24);
}
 8009722:	bf00      	nop
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	40023800 	.word	0x40023800

08009734 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800973e:	4a04      	ldr	r2, [pc, #16]	; (8009750 <RCC_PLLCmd+0x1c>)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	6013      	str	r3, [r2, #0]
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	42470060 	.word	0x42470060

08009754 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800975e:	4907      	ldr	r1, [pc, #28]	; (800977c <RCC_PLLI2SConfig+0x28>)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	019a      	lsls	r2, r3, #6
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	071b      	lsls	r3, r3, #28
 8009768:	4313      	orrs	r3, r2
 800976a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 800976e:	bf00      	nop
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	40023800 	.word	0x40023800

08009780 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800978a:	4a04      	ldr	r2, [pc, #16]	; (800979c <RCC_PLLI2SCmd+0x1c>)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	6013      	str	r3, [r2, #0]
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	42470068 	.word	0x42470068

080097a0 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80097aa:	4a04      	ldr	r2, [pc, #16]	; (80097bc <RCC_ClockSecuritySystemCmd+0x1c>)
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	6013      	str	r3, [r2, #0]
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	4247004c 	.word	0x4247004c

080097c0 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80097ce:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <RCC_MCO1Config+0x3c>)
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80097da:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80097e8:	4a04      	ldr	r2, [pc, #16]	; (80097fc <RCC_MCO1Config+0x3c>)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6093      	str	r3, [r2, #8]
}
 80097ee:	bf00      	nop
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40023800 	.word	0x40023800

08009800 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800980e:	4b0b      	ldr	r3, [pc, #44]	; (800983c <RCC_MCO2Config+0x3c>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800981a:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	4313      	orrs	r3, r2
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	4313      	orrs	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8009828:	4a04      	ldr	r2, [pc, #16]	; (800983c <RCC_MCO2Config+0x3c>)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6093      	str	r3, [r2, #8]
}
 800982e:	bf00      	nop
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	40023800 	.word	0x40023800

08009840 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <RCC_SYSCLKConfig+0x34>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f023 0303 	bic.w	r3, r3, #3
 8009858:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4313      	orrs	r3, r2
 8009860:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8009862:	4a04      	ldr	r2, [pc, #16]	; (8009874 <RCC_SYSCLKConfig+0x34>)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6093      	str	r3, [r2, #8]
}
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	40023800 	.word	0x40023800

08009878 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <RCC_GetSYSCLKSource+0x1c>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	f003 030c 	and.w	r3, r3, #12
 8009886:	b2db      	uxtb	r3, r3
}
 8009888:	4618      	mov	r0, r3
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40023800 	.word	0x40023800

08009898 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80098a4:	4b09      	ldr	r3, [pc, #36]	; (80098cc <RCC_HCLKConfig+0x34>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80098ba:	4a04      	ldr	r2, [pc, #16]	; (80098cc <RCC_HCLKConfig+0x34>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6093      	str	r3, [r2, #8]
}
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	40023800 	.word	0x40023800

080098d0 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80098dc:	4b09      	ldr	r3, [pc, #36]	; (8009904 <RCC_PCLK1Config+0x34>)
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80098e8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80098f2:	4a04      	ldr	r2, [pc, #16]	; (8009904 <RCC_PCLK1Config+0x34>)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6093      	str	r3, [r2, #8]
}
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	40023800 	.word	0x40023800

08009908 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8009914:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <RCC_PCLK2Config+0x38>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009920:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800992c:	4a04      	ldr	r2, [pc, #16]	; (8009940 <RCC_PCLK2Config+0x38>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6093      	str	r3, [r2, #8]
}
 8009932:	bf00      	nop
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	40023800 	.word	0x40023800

08009944 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009944:	b480      	push	{r7}
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800994c:	2300      	movs	r3, #0
 800994e:	61bb      	str	r3, [r7, #24]
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	2300      	movs	r3, #0
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	2302      	movs	r3, #2
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	2302      	movs	r3, #2
 8009962:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009964:	4b48      	ldr	r3, [pc, #288]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f003 030c 	and.w	r3, r3, #12
 800996c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2b04      	cmp	r3, #4
 8009972:	d007      	beq.n	8009984 <RCC_GetClocksFreq+0x40>
 8009974:	2b08      	cmp	r3, #8
 8009976:	d009      	beq.n	800998c <RCC_GetClocksFreq+0x48>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d13f      	bne.n	80099fc <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a43      	ldr	r2, [pc, #268]	; (8009a8c <RCC_GetClocksFreq+0x148>)
 8009980:	601a      	str	r2, [r3, #0]
      break;
 8009982:	e03f      	b.n	8009a04 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a42      	ldr	r2, [pc, #264]	; (8009a90 <RCC_GetClocksFreq+0x14c>)
 8009988:	601a      	str	r2, [r3, #0]
      break;
 800998a:	e03b      	b.n	8009a04 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800998c:	4b3e      	ldr	r3, [pc, #248]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009994:	0d9b      	lsrs	r3, r3, #22
 8009996:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009998:	4b3b      	ldr	r3, [pc, #236]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099a0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00d      	beq.n	80099c4 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80099a8:	4a39      	ldr	r2, [pc, #228]	; (8009a90 <RCC_GetClocksFreq+0x14c>)
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80099b0:	4b35      	ldr	r3, [pc, #212]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 80099b2:	6859      	ldr	r1, [r3, #4]
 80099b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099b8:	400b      	ands	r3, r1
 80099ba:	099b      	lsrs	r3, r3, #6
 80099bc:	fb03 f302 	mul.w	r3, r3, r2
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	e00c      	b.n	80099de <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80099c4:	4a31      	ldr	r2, [pc, #196]	; (8009a8c <RCC_GetClocksFreq+0x148>)
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80099cc:	4b2e      	ldr	r3, [pc, #184]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 80099ce:	6859      	ldr	r1, [r3, #4]
 80099d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099d4:	400b      	ands	r3, r1
 80099d6:	099b      	lsrs	r3, r3, #6
 80099d8:	fb03 f302 	mul.w	r3, r3, r2
 80099dc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80099de:	4b2a      	ldr	r3, [pc, #168]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80099e6:	0c1b      	lsrs	r3, r3, #16
 80099e8:	3301      	adds	r3, #1
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80099ee:	69fa      	ldr	r2, [r7, #28]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	601a      	str	r2, [r3, #0]
      break;
 80099fa:	e003      	b.n	8009a04 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a23      	ldr	r2, [pc, #140]	; (8009a8c <RCC_GetClocksFreq+0x148>)
 8009a00:	601a      	str	r2, [r3, #0]
      break;
 8009a02:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009a04:	4b20      	ldr	r3, [pc, #128]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	091b      	lsrs	r3, r3, #4
 8009a12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009a14:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <RCC_GetClocksFreq+0x150>)
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	4413      	add	r3, r2
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	40da      	lsrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8009a2c:	4b16      	ldr	r3, [pc, #88]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009a34:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	0a9b      	lsrs	r3, r3, #10
 8009a3a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009a3c:	4a15      	ldr	r2, [pc, #84]	; (8009a94 <RCC_GetClocksFreq+0x150>)
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	4413      	add	r3, r2
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	40da      	lsrs	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8009a54:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <RCC_GetClocksFreq+0x144>)
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a5c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	0b5b      	lsrs	r3, r3, #13
 8009a62:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009a64:	4a0b      	ldr	r2, [pc, #44]	; (8009a94 <RCC_GetClocksFreq+0x150>)
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	4413      	add	r3, r2
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	40da      	lsrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	60da      	str	r2, [r3, #12]
}
 8009a7c:	bf00      	nop
 8009a7e:	3724      	adds	r7, #36	; 0x24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	40023800 	.word	0x40023800
 8009a8c:	00f42400 	.word	0x00f42400
 8009a90:	017d7840 	.word	0x017d7840
 8009a94:	20000004 	.word	0x20000004

08009a98 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aae:	d111      	bne.n	8009ad4 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8009ab0:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <RCC_RTCCLKConfig+0x58>)
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009abc:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8009ace:	4a08      	ldr	r2, [pc, #32]	; (8009af0 <RCC_RTCCLKConfig+0x58>)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8009ad4:	4906      	ldr	r1, [pc, #24]	; (8009af0 <RCC_RTCCLKConfig+0x58>)
 8009ad6:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <RCC_RTCCLKConfig+0x58>)
 8009ad8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	670b      	str	r3, [r1, #112]	; 0x70
}
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	40023800 	.word	0x40023800

08009af4 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8009afe:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <RCC_RTCCLKCmd+0x1c>)
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	6013      	str	r3, [r2, #0]
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	42470e3c 	.word	0x42470e3c

08009b14 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8009b1e:	4a04      	ldr	r2, [pc, #16]	; (8009b30 <RCC_BackupResetCmd+0x1c>)
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	6013      	str	r3, [r2, #0]
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	42470e40 	.word	0x42470e40

08009b34 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8009b3c:	4a04      	ldr	r2, [pc, #16]	; (8009b50 <RCC_I2SCLKConfig+0x1c>)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6013      	str	r3, [r2, #0]
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	4247015c 	.word	0x4247015c

08009b54 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8009b5c:	4a04      	ldr	r2, [pc, #16]	; (8009b70 <RCC_TIMCLKPresConfig+0x1c>)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6013      	str	r3, [r2, #0]
  
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	424711e0 	.word	0x424711e0

08009b74 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d006      	beq.n	8009b94 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8009b86:	490a      	ldr	r1, [pc, #40]	; (8009bb0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8009b92:	e006      	b.n	8009ba2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8009b94:	4906      	ldr	r1, [pc, #24]	; (8009bb0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009b96:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	43db      	mvns	r3, r3
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	40023800 	.word	0x40023800

08009bb4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d006      	beq.n	8009bd4 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8009bc6:	490a      	ldr	r1, [pc, #40]	; (8009bf0 <RCC_AHB2PeriphClockCmd+0x3c>)
 8009bc8:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <RCC_AHB2PeriphClockCmd+0x3c>)
 8009bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 8009bd2:	e006      	b.n	8009be2 <RCC_AHB2PeriphClockCmd+0x2e>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8009bd4:	4906      	ldr	r1, [pc, #24]	; (8009bf0 <RCC_AHB2PeriphClockCmd+0x3c>)
 8009bd6:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <RCC_AHB2PeriphClockCmd+0x3c>)
 8009bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	43db      	mvns	r3, r3
 8009bde:	4013      	ands	r3, r2
 8009be0:	634b      	str	r3, [r1, #52]	; 0x34
  }
}
 8009be2:	bf00      	nop
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	40023800 	.word	0x40023800

08009bf4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d006      	beq.n	8009c14 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8009c06:	490a      	ldr	r1, [pc, #40]	; (8009c30 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 8009c12:	e006      	b.n	8009c22 <RCC_AHB3PeriphClockCmd+0x2e>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8009c14:	4906      	ldr	r1, [pc, #24]	; (8009c30 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009c16:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	43db      	mvns	r3, r3
 8009c1e:	4013      	ands	r3, r2
 8009c20:	638b      	str	r3, [r1, #56]	; 0x38
  }
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	40023800 	.word	0x40023800

08009c34 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d006      	beq.n	8009c54 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009c46:	490a      	ldr	r1, [pc, #40]	; (8009c70 <RCC_APB1PeriphClockCmd+0x3c>)
 8009c48:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <RCC_APB1PeriphClockCmd+0x3c>)
 8009c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8009c52:	e006      	b.n	8009c62 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8009c54:	4906      	ldr	r1, [pc, #24]	; (8009c70 <RCC_APB1PeriphClockCmd+0x3c>)
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <RCC_APB1PeriphClockCmd+0x3c>)
 8009c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	4013      	ands	r3, r2
 8009c60:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	40023800 	.word	0x40023800

08009c74 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d006      	beq.n	8009c94 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009c86:	490a      	ldr	r1, [pc, #40]	; (8009cb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8009c88:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8009c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8009c92:	e006      	b.n	8009ca2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009c94:	4906      	ldr	r1, [pc, #24]	; (8009cb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <RCC_APB2PeriphClockCmd+0x3c>)
 8009c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	40023800 	.word	0x40023800

08009cb4 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d006      	beq.n	8009cd4 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8009cc6:	490a      	ldr	r1, [pc, #40]	; (8009cf0 <RCC_AHB1PeriphResetCmd+0x3c>)
 8009cc8:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <RCC_AHB1PeriphResetCmd+0x3c>)
 8009cca:	691a      	ldr	r2, [r3, #16]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
 8009cd2:	e006      	b.n	8009ce2 <RCC_AHB1PeriphResetCmd+0x2e>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8009cd4:	4906      	ldr	r1, [pc, #24]	; (8009cf0 <RCC_AHB1PeriphResetCmd+0x3c>)
 8009cd6:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <RCC_AHB1PeriphResetCmd+0x3c>)
 8009cd8:	691a      	ldr	r2, [r3, #16]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	43db      	mvns	r3, r3
 8009cde:	4013      	ands	r3, r2
 8009ce0:	610b      	str	r3, [r1, #16]
  }
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40023800 	.word	0x40023800

08009cf4 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d006      	beq.n	8009d14 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8009d06:	490a      	ldr	r1, [pc, #40]	; (8009d30 <RCC_AHB2PeriphResetCmd+0x3c>)
 8009d08:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <RCC_AHB2PeriphResetCmd+0x3c>)
 8009d0a:	695a      	ldr	r2, [r3, #20]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
 8009d12:	e006      	b.n	8009d22 <RCC_AHB2PeriphResetCmd+0x2e>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8009d14:	4906      	ldr	r1, [pc, #24]	; (8009d30 <RCC_AHB2PeriphResetCmd+0x3c>)
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <RCC_AHB2PeriphResetCmd+0x3c>)
 8009d18:	695a      	ldr	r2, [r3, #20]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	43db      	mvns	r3, r3
 8009d1e:	4013      	ands	r3, r2
 8009d20:	614b      	str	r3, [r1, #20]
  }
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	40023800 	.word	0x40023800

08009d34 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d006      	beq.n	8009d54 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8009d46:	490a      	ldr	r1, [pc, #40]	; (8009d70 <RCC_AHB3PeriphResetCmd+0x3c>)
 8009d48:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <RCC_AHB3PeriphResetCmd+0x3c>)
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
 8009d52:	e006      	b.n	8009d62 <RCC_AHB3PeriphResetCmd+0x2e>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8009d54:	4906      	ldr	r1, [pc, #24]	; (8009d70 <RCC_AHB3PeriphResetCmd+0x3c>)
 8009d56:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <RCC_AHB3PeriphResetCmd+0x3c>)
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	43db      	mvns	r3, r3
 8009d5e:	4013      	ands	r3, r2
 8009d60:	618b      	str	r3, [r1, #24]
  }
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	40023800 	.word	0x40023800

08009d74 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d006      	beq.n	8009d94 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8009d86:	490a      	ldr	r1, [pc, #40]	; (8009db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8009d88:	4b09      	ldr	r3, [pc, #36]	; (8009db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8009d8a:	6a1a      	ldr	r2, [r3, #32]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8009d92:	e006      	b.n	8009da2 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8009d94:	4906      	ldr	r1, [pc, #24]	; (8009db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8009d96:	4b06      	ldr	r3, [pc, #24]	; (8009db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8009d98:	6a1a      	ldr	r2, [r3, #32]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	4013      	ands	r3, r2
 8009da0:	620b      	str	r3, [r1, #32]
  }
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	40023800 	.word	0x40023800

08009db4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d006      	beq.n	8009dd4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8009dc6:	490a      	ldr	r1, [pc, #40]	; (8009df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8009dc8:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8009dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8009dd2:	e006      	b.n	8009de2 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8009dd4:	4906      	ldr	r1, [pc, #24]	; (8009df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8009dd6:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8009dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	4013      	ands	r3, r2
 8009de0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	40023800 	.word	0x40023800

08009df4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d006      	beq.n	8009e14 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8009e06:	490a      	ldr	r1, [pc, #40]	; (8009e30 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8009e08:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8009e0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	650b      	str	r3, [r1, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
 8009e12:	e006      	b.n	8009e22 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8009e14:	4906      	ldr	r1, [pc, #24]	; (8009e30 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 8009e18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	43db      	mvns	r3, r3
 8009e1e:	4013      	ands	r3, r2
 8009e20:	650b      	str	r3, [r1, #80]	; 0x50
  }
}
 8009e22:	bf00      	nop
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	40023800 	.word	0x40023800

08009e34 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d006      	beq.n	8009e54 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8009e46:	490a      	ldr	r1, [pc, #40]	; (8009e70 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009e48:	4b09      	ldr	r3, [pc, #36]	; (8009e70 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009e4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	654b      	str	r3, [r1, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
 8009e52:	e006      	b.n	8009e62 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8009e54:	4906      	ldr	r1, [pc, #24]	; (8009e70 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009e56:	4b06      	ldr	r3, [pc, #24]	; (8009e70 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 8009e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	43db      	mvns	r3, r3
 8009e5e:	4013      	ands	r3, r2
 8009e60:	654b      	str	r3, [r1, #84]	; 0x54
  }
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	40023800 	.word	0x40023800

08009e74 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d006      	beq.n	8009e94 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8009e86:	490a      	ldr	r1, [pc, #40]	; (8009eb0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009e88:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009e8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	658b      	str	r3, [r1, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
 8009e92:	e006      	b.n	8009ea2 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8009e94:	4906      	ldr	r1, [pc, #24]	; (8009eb0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009e96:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 8009e98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	658b      	str	r3, [r1, #88]	; 0x58
  }
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	40023800 	.word	0x40023800

08009eb4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8009ec6:	490a      	ldr	r1, [pc, #40]	; (8009ef0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8009ec8:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8009eca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	660b      	str	r3, [r1, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
 8009ed2:	e006      	b.n	8009ee2 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8009ed4:	4906      	ldr	r1, [pc, #24]	; (8009ef0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8009ed6:	4b06      	ldr	r3, [pc, #24]	; (8009ef0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 8009ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	43db      	mvns	r3, r3
 8009ede:	4013      	ands	r3, r2
 8009ee0:	660b      	str	r3, [r1, #96]	; 0x60
  }
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	40023800 	.word	0x40023800

08009ef4 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8009f06:	490a      	ldr	r1, [pc, #40]	; (8009f30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8009f08:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8009f0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	664b      	str	r3, [r1, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
 8009f12:	e006      	b.n	8009f22 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8009f14:	4906      	ldr	r1, [pc, #24]	; (8009f30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8009f16:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 8009f18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	4013      	ands	r3, r2
 8009f20:	664b      	str	r3, [r1, #100]	; 0x64
  }
}
 8009f22:	bf00      	nop
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	40023800 	.word	0x40023800

08009f34 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	460a      	mov	r2, r1
 8009f3e:	71fb      	strb	r3, [r7, #7]
 8009f40:	4613      	mov	r3, r2
 8009f42:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009f44:	79bb      	ldrb	r3, [r7, #6]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d008      	beq.n	8009f5c <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8009f4a:	490c      	ldr	r1, [pc, #48]	; (8009f7c <RCC_ITConfig+0x48>)
 8009f4c:	4b0b      	ldr	r3, [pc, #44]	; (8009f7c <RCC_ITConfig+0x48>)
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8009f5a:	e009      	b.n	8009f70 <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8009f5c:	4907      	ldr	r1, [pc, #28]	; (8009f7c <RCC_ITConfig+0x48>)
 8009f5e:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <RCC_ITConfig+0x48>)
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	79fb      	ldrb	r3, [r7, #7]
 8009f66:	43db      	mvns	r3, r3
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	700b      	strb	r3, [r1, #0]
  }
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	4002380d 	.word	0x4002380d

08009f80 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8009f92:	2300      	movs	r3, #0
 8009f94:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	095b      	lsrs	r3, r3, #5
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d103      	bne.n	8009fac <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8009fa4:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <RCC_GetFlagStatus+0x70>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	e009      	b.n	8009fc0 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d103      	bne.n	8009fba <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8009fb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <RCC_GetFlagStatus+0x70>)
 8009fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb6:	617b      	str	r3, [r7, #20]
 8009fb8:	e002      	b.n	8009fc0 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <RCC_GetFlagStatus+0x70>)
 8009fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fbe:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	f003 031f 	and.w	r3, r3, #31
 8009fc6:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	74fb      	strb	r3, [r7, #19]
 8009fdc:	e001      	b.n	8009fe2 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8009fe2:	7cfb      	ldrb	r3, [r7, #19]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	371c      	adds	r7, #28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	40023800 	.word	0x40023800

08009ff4 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8009ff8:	4a05      	ldr	r2, [pc, #20]	; (800a010 <RCC_ClearFlag+0x1c>)
 8009ffa:	4b05      	ldr	r3, [pc, #20]	; (800a010 <RCC_ClearFlag+0x1c>)
 8009ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a002:	6753      	str	r3, [r2, #116]	; 0x74
}
 800a004:	bf00      	nop
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	40023800 	.word	0x40023800

0800a014 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800a022:	4b09      	ldr	r3, [pc, #36]	; (800a048 <RCC_GetITStatus+0x34>)
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	4013      	ands	r3, r2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 800a02e:	2301      	movs	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]
 800a032:	e001      	b.n	800a038 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	40023800 	.word	0x40023800

0800a04c <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	4603      	mov	r3, r0
 800a054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800a056:	4a04      	ldr	r2, [pc, #16]	; (800a068 <RCC_ClearITPendingBit+0x1c>)
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	7013      	strb	r3, [r2, #0]
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	4002380e 	.word	0x4002380e

0800a06c <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800a070:	2101      	movs	r1, #1
 800a072:	2040      	movs	r0, #64	; 0x40
 800a074:	f7ff fe3e 	bl	8009cf4 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800a078:	2100      	movs	r1, #0
 800a07a:	2040      	movs	r0, #64	; 0x40
 800a07c:	f7ff fe3a 	bl	8009cf4 <RCC_AHB2PeriphResetCmd>
}
 800a080:	bf00      	nop
 800a082:	bd80      	pop	{r7, pc}

0800a084 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800a094:	4a09      	ldr	r2, [pc, #36]	; (800a0bc <RNG_Cmd+0x38>)
 800a096:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <RNG_Cmd+0x38>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f043 0304 	orr.w	r3, r3, #4
 800a09e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 800a0a0:	e005      	b.n	800a0ae <RNG_Cmd+0x2a>
    RNG->CR |= RNG_CR_RNGEN;
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800a0a2:	4a06      	ldr	r2, [pc, #24]	; (800a0bc <RNG_Cmd+0x38>)
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <RNG_Cmd+0x38>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f023 0304 	bic.w	r3, r3, #4
 800a0ac:	6013      	str	r3, [r2, #0]
  }
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	50060800 	.word	0x50060800

0800a0c0 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800a0c4:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <RNG_GetRandomNumber+0x14>)
 800a0c6:	689b      	ldr	r3, [r3, #8]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	50060800 	.word	0x50060800

0800a0d8 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d006      	beq.n	800a0f6 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800a0e8:	4a09      	ldr	r2, [pc, #36]	; (800a110 <RNG_ITConfig+0x38>)
 800a0ea:	4b09      	ldr	r3, [pc, #36]	; (800a110 <RNG_ITConfig+0x38>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f043 0308 	orr.w	r3, r3, #8
 800a0f2:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
 800a0f4:	e005      	b.n	800a102 <RNG_ITConfig+0x2a>
    RNG->CR |= RNG_CR_IE;
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 800a0f6:	4a06      	ldr	r2, [pc, #24]	; (800a110 <RNG_ITConfig+0x38>)
 800a0f8:	4b05      	ldr	r3, [pc, #20]	; (800a110 <RNG_ITConfig+0x38>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f023 0308 	bic.w	r3, r3, #8
 800a100:	6013      	str	r3, [r2, #0]
  }
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	50060800 	.word	0x50060800

0800a114 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <RNG_GetFlagStatus+0x34>)
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	79fb      	ldrb	r3, [r7, #7]
 800a128:	4013      	ands	r3, r2
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800a12e:	2301      	movs	r3, #1
 800a130:	73fb      	strb	r3, [r7, #15]
 800a132:	e001      	b.n	800a138 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	50060800 	.word	0x50060800

0800a14c <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800a156:	4a05      	ldr	r2, [pc, #20]	; (800a16c <RNG_ClearFlag+0x20>)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	43db      	mvns	r3, r3
 800a15e:	6053      	str	r3, [r2, #4]
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	50060800 	.word	0x50060800

0800a170 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <RNG_GetITStatus+0x34>)
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	79fb      	ldrb	r3, [r7, #7]
 800a184:	4013      	ands	r3, r2
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800a18a:	2301      	movs	r3, #1
 800a18c:	73fb      	strb	r3, [r7, #15]
 800a18e:	e001      	b.n	800a194 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800a194:	7bfb      	ldrb	r3, [r7, #15]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	50060800 	.word	0x50060800

0800a1a8 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800a1b2:	4a05      	ldr	r2, [pc, #20]	; (800a1c8 <RNG_ClearITPendingBit+0x20>)
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
 800a1b6:	43db      	mvns	r3, r3
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	6053      	str	r3, [r2, #4]
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	50060800 	.word	0x50060800

0800a1cc <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a1de:	4b36      	ldr	r3, [pc, #216]	; (800a2b8 <RTC_DeInit+0xec>)
 800a1e0:	22ca      	movs	r2, #202	; 0xca
 800a1e2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a1e4:	4b34      	ldr	r3, [pc, #208]	; (800a2b8 <RTC_DeInit+0xec>)
 800a1e6:	2253      	movs	r2, #83	; 0x53
 800a1e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a1ea:	f000 f8d3 	bl	800a394 <RTC_EnterInitMode>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <RTC_DeInit+0x2e>
  {
    status = ERROR;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
 800a1f8:	e055      	b.n	800a2a6 <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800a1fa:	4b2f      	ldr	r3, [pc, #188]	; (800a2b8 <RTC_DeInit+0xec>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800a200:	4b2d      	ldr	r3, [pc, #180]	; (800a2b8 <RTC_DeInit+0xec>)
 800a202:	f242 1201 	movw	r2, #8449	; 0x2101
 800a206:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800a208:	4a2b      	ldr	r2, [pc, #172]	; (800a2b8 <RTC_DeInit+0xec>)
 800a20a:	4b2b      	ldr	r3, [pc, #172]	; (800a2b8 <RTC_DeInit+0xec>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	6093      	str	r3, [r2, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800a214:	4b28      	ldr	r3, [pc, #160]	; (800a2b8 <RTC_DeInit+0xec>)
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3301      	adds	r3, #1
 800a222:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a22a:	d002      	beq.n	800a232 <RTC_DeInit+0x66>
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0f0      	beq.n	800a214 <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800a232:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <RTC_DeInit+0xec>)
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <RTC_DeInit+0x78>
    {
      status = ERROR;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]
 800a242:	e030      	b.n	800a2a6 <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800a244:	4b1c      	ldr	r3, [pc, #112]	; (800a2b8 <RTC_DeInit+0xec>)
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <RTC_DeInit+0xec>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800a24e:	4b1a      	ldr	r3, [pc, #104]	; (800a2b8 <RTC_DeInit+0xec>)
 800a250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a254:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800a256:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <RTC_DeInit+0xec>)
 800a258:	4a18      	ldr	r2, [pc, #96]	; (800a2bc <RTC_DeInit+0xf0>)
 800a25a:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800a25c:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <RTC_DeInit+0xec>)
 800a25e:	2200      	movs	r2, #0
 800a260:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800a262:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <RTC_DeInit+0xec>)
 800a264:	2200      	movs	r2, #0
 800a266:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800a268:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <RTC_DeInit+0xec>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 800a26e:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <RTC_DeInit+0xec>)
 800a270:	2200      	movs	r2, #0
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <RTC_DeInit+0xec>)
 800a276:	2200      	movs	r2, #0
 800a278:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 800a27a:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <RTC_DeInit+0xec>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 800a280:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <RTC_DeInit+0xec>)
 800a282:	2200      	movs	r2, #0
 800a284:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800a286:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <RTC_DeInit+0xec>)
 800a288:	2200      	movs	r2, #0
 800a28a:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <RTC_DeInit+0xec>)
 800a28e:	2200      	movs	r2, #0
 800a290:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800a292:	f000 f8c9 	bl	800a428 <RTC_WaitForSynchro>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <RTC_DeInit+0xd6>
      {
        status = ERROR;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73fb      	strb	r3, [r7, #15]
 800a2a0:	e001      	b.n	800a2a6 <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800a2a6:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <RTC_DeInit+0xec>)
 800a2a8:	22ff      	movs	r2, #255	; 0xff
 800a2aa:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40002800 	.word	0x40002800
 800a2bc:	007f00ff 	.word	0x007f00ff

0800a2c0 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a2cc:	4b19      	ldr	r3, [pc, #100]	; (800a334 <RTC_Init+0x74>)
 800a2ce:	22ca      	movs	r2, #202	; 0xca
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a2d2:	4b18      	ldr	r3, [pc, #96]	; (800a334 <RTC_Init+0x74>)
 800a2d4:	2253      	movs	r2, #83	; 0x53
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a2d8:	f000 f85c 	bl	800a394 <RTC_EnterInitMode>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <RTC_Init+0x28>
  {
    status = ERROR;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
 800a2e6:	e01c      	b.n	800a322 <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800a2e8:	4a12      	ldr	r2, [pc, #72]	; (800a334 <RTC_Init+0x74>)
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <RTC_Init+0x74>)
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800a2f4:	490f      	ldr	r1, [pc, #60]	; (800a334 <RTC_Init+0x74>)
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <RTC_Init+0x74>)
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800a302:	4a0c      	ldr	r2, [pc, #48]	; (800a334 <RTC_Init+0x74>)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800a30a:	490a      	ldr	r1, [pc, #40]	; (800a334 <RTC_Init+0x74>)
 800a30c:	4b09      	ldr	r3, [pc, #36]	; (800a334 <RTC_Init+0x74>)
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	041b      	lsls	r3, r3, #16
 800a316:	4313      	orrs	r3, r2
 800a318:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a31a:	f000 f875 	bl	800a408 <RTC_ExitInitMode>

    status = SUCCESS;    
 800a31e:	2301      	movs	r3, #1
 800a320:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a322:	4b04      	ldr	r3, [pc, #16]	; (800a334 <RTC_Init+0x74>)
 800a324:	22ff      	movs	r2, #255	; 0xff
 800a326:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	40002800 	.word	0x40002800

0800a338 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	227f      	movs	r2, #127	; 0x7f
 800a34a:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	22ff      	movs	r2, #255	; 0xff
 800a350:	609a      	str	r2, [r3, #8]
}
 800a352:	bf00      	nop
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop

0800a360 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800a370:	4b07      	ldr	r3, [pc, #28]	; (800a390 <RTC_WriteProtectionCmd+0x30>)
 800a372:	22ff      	movs	r2, #255	; 0xff
 800a374:	625a      	str	r2, [r3, #36]	; 0x24
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
    RTC->WPR = 0x53;    
  }
}
 800a376:	e005      	b.n	800a384 <RTC_WriteProtectionCmd+0x24>
    RTC->WPR = 0xFF;   
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800a378:	4b05      	ldr	r3, [pc, #20]	; (800a390 <RTC_WriteProtectionCmd+0x30>)
 800a37a:	22ca      	movs	r2, #202	; 0xca
 800a37c:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800a37e:	4b04      	ldr	r3, [pc, #16]	; (800a390 <RTC_WriteProtectionCmd+0x30>)
 800a380:	2253      	movs	r2, #83	; 0x53
 800a382:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	40002800 	.word	0x40002800

0800a394 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800a39a:	2300      	movs	r3, #0
 800a39c:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a3a6:	4b17      	ldr	r3, [pc, #92]	; (800a404 <RTC_EnterInitMode+0x70>)
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d11e      	bne.n	800a3f0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800a3b2:	4b14      	ldr	r3, [pc, #80]	; (800a404 <RTC_EnterInitMode+0x70>)
 800a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b8:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800a3ba:	4b12      	ldr	r3, [pc, #72]	; (800a404 <RTC_EnterInitMode+0x70>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c2:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3d0:	d002      	beq.n	800a3d8 <RTC_EnterInitMode+0x44>
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0f0      	beq.n	800a3ba <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <RTC_EnterInitMode+0x70>)
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	73fb      	strb	r3, [r7, #15]
 800a3e8:	e004      	b.n	800a3f4 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
 800a3ee:	e001      	b.n	800a3f4 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40002800 	.word	0x40002800

0800a408 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800a40c:	4a05      	ldr	r2, [pc, #20]	; (800a424 <RTC_ExitInitMode+0x1c>)
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <RTC_ExitInitMode+0x1c>)
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a416:	60d3      	str	r3, [r2, #12]
}
 800a418:	bf00      	nop
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	40002800 	.word	0x40002800

0800a428 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800a436:	2300      	movs	r3, #0
 800a438:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a43a:	4b18      	ldr	r3, [pc, #96]	; (800a49c <RTC_WaitForSynchro+0x74>)
 800a43c:	22ca      	movs	r2, #202	; 0xca
 800a43e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a440:	4b16      	ldr	r3, [pc, #88]	; (800a49c <RTC_WaitForSynchro+0x74>)
 800a442:	2253      	movs	r2, #83	; 0x53
 800a444:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800a446:	4a15      	ldr	r2, [pc, #84]	; (800a49c <RTC_WaitForSynchro+0x74>)
 800a448:	4b14      	ldr	r3, [pc, #80]	; (800a49c <RTC_WaitForSynchro+0x74>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a450:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800a452:	4b12      	ldr	r3, [pc, #72]	; (800a49c <RTC_WaitForSynchro+0x74>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3301      	adds	r3, #1
 800a460:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a468:	d002      	beq.n	800a470 <RTC_WaitForSynchro+0x48>
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0f0      	beq.n	800a452 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800a470:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <RTC_WaitForSynchro+0x74>)
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f003 0320 	and.w	r3, r3, #32
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 800a47c:	2301      	movs	r3, #1
 800a47e:	73fb      	strb	r3, [r7, #15]
 800a480:	e001      	b.n	800a486 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <RTC_WaitForSynchro+0x74>)
 800a488:	22ff      	movs	r2, #255	; 0xff
 800a48a:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	40002800 	.word	0x40002800

0800a4a0 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a4ae:	4b15      	ldr	r3, [pc, #84]	; (800a504 <RTC_RefClockCmd+0x64>)
 800a4b0:	22ca      	movs	r2, #202	; 0xca
 800a4b2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a4b4:	4b13      	ldr	r3, [pc, #76]	; (800a504 <RTC_RefClockCmd+0x64>)
 800a4b6:	2253      	movs	r2, #83	; 0x53
 800a4b8:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a4ba:	f7ff ff6b 	bl	800a394 <RTC_EnterInitMode>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d102      	bne.n	800a4ca <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
 800a4c8:	e013      	b.n	800a4f2 <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d006      	beq.n	800a4de <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800a4d0:	4a0c      	ldr	r2, [pc, #48]	; (800a504 <RTC_RefClockCmd+0x64>)
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <RTC_RefClockCmd+0x64>)
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f043 0310 	orr.w	r3, r3, #16
 800a4da:	6093      	str	r3, [r2, #8]
 800a4dc:	e005      	b.n	800a4ea <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800a4de:	4a09      	ldr	r2, [pc, #36]	; (800a504 <RTC_RefClockCmd+0x64>)
 800a4e0:	4b08      	ldr	r3, [pc, #32]	; (800a504 <RTC_RefClockCmd+0x64>)
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f023 0310 	bic.w	r3, r3, #16
 800a4e8:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a4ea:	f7ff ff8d 	bl	800a408 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800a4f2:	4b04      	ldr	r3, [pc, #16]	; (800a504 <RTC_RefClockCmd+0x64>)
 800a4f4:	22ff      	movs	r2, #255	; 0xff
 800a4f6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	40002800 	.word	0x40002800

0800a508 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a512:	4b0f      	ldr	r3, [pc, #60]	; (800a550 <RTC_BypassShadowCmd+0x48>)
 800a514:	22ca      	movs	r2, #202	; 0xca
 800a516:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a518:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <RTC_BypassShadowCmd+0x48>)
 800a51a:	2253      	movs	r2, #83	; 0x53
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d006      	beq.n	800a532 <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a524:	4a0a      	ldr	r2, [pc, #40]	; (800a550 <RTC_BypassShadowCmd+0x48>)
 800a526:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <RTC_BypassShadowCmd+0x48>)
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f043 0320 	orr.w	r3, r3, #32
 800a52e:	6093      	str	r3, [r2, #8]
 800a530:	e005      	b.n	800a53e <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 800a532:	4a07      	ldr	r2, [pc, #28]	; (800a550 <RTC_BypassShadowCmd+0x48>)
 800a534:	4b06      	ldr	r3, [pc, #24]	; (800a550 <RTC_BypassShadowCmd+0x48>)
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a53c:	6093      	str	r3, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a53e:	4b04      	ldr	r3, [pc, #16]	; (800a550 <RTC_BypassShadowCmd+0x48>)
 800a540:	22ff      	movs	r2, #255	; 0xff
 800a542:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	40002800 	.word	0x40002800

0800a554 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800a554:	b590      	push	{r4, r7, lr}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800a562:	2300      	movs	r3, #0
 800a564:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d109      	bne.n	800a580 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a56c:	4b3d      	ldr	r3, [pc, #244]	; (800a664 <RTC_SetTime+0x110>)
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d114      	bne.n	800a5a2 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2200      	movs	r2, #0
 800a57c:	70da      	strb	r2, [r3, #3]
 800a57e:	e010      	b.n	800a5a2 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a580:	4b38      	ldr	r3, [pc, #224]	; (800a664 <RTC_SetTime+0x110>)
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	4618      	mov	r0, r3
 800a592:	f001 f8a9 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a596:	4603      	mov	r3, r0
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	e002      	b.n	800a5a2 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00f      	beq.n	800a5c8 <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a5b4:	4313      	orrs	r3, r2
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	7892      	ldrb	r2, [r2, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a5ba:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	78db      	ldrb	r3, [r3, #3]
 800a5c0:	041b      	lsls	r3, r3, #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	e01b      	b.n	800a600 <RTC_SetTime+0xac>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 f86d 	bl	800b6ac <RTC_ByteToBcd2>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 f866 	bl	800b6ac <RTC_ByteToBcd2>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	021b      	lsls	r3, r3, #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a5e4:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	789b      	ldrb	r3, [r3, #2]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 f85e 	bl	800b6ac <RTC_ByteToBcd2>
 800a5f0:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a5f2:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	78db      	ldrb	r3, [r3, #3]
 800a5fa:	041b      	lsls	r3, r3, #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a600:	4b18      	ldr	r3, [pc, #96]	; (800a664 <RTC_SetTime+0x110>)
 800a602:	22ca      	movs	r2, #202	; 0xca
 800a604:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a606:	4b17      	ldr	r3, [pc, #92]	; (800a664 <RTC_SetTime+0x110>)
 800a608:	2253      	movs	r2, #83	; 0x53
 800a60a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a60c:	f7ff fec2 	bl	800a394 <RTC_EnterInitMode>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <RTC_SetTime+0xc8>
  {
    status = ERROR;
 800a616:	2300      	movs	r3, #0
 800a618:	72fb      	strb	r3, [r7, #11]
 800a61a:	e01b      	b.n	800a654 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a61c:	4a11      	ldr	r2, [pc, #68]	; (800a664 <RTC_SetTime+0x110>)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a624:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a628:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800a62a:	f7ff feed 	bl	800a408 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 800a62e:	4b0d      	ldr	r3, [pc, #52]	; (800a664 <RTC_SetTime+0x110>)
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 0320 	and.w	r3, r3, #32
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 800a63a:	f7ff fef5 	bl	800a428 <RTC_WaitForSynchro>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <RTC_SetTime+0xf6>
    {
      status = ERROR;
 800a644:	2300      	movs	r3, #0
 800a646:	72fb      	strb	r3, [r7, #11]
 800a648:	e004      	b.n	800a654 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 800a64a:	2301      	movs	r3, #1
 800a64c:	72fb      	strb	r3, [r7, #11]
 800a64e:	e001      	b.n	800a654 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 800a650:	2301      	movs	r3, #1
 800a652:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a654:	4b03      	ldr	r3, [pc, #12]	; (800a664 <RTC_SetTime+0x110>)
 800a656:	22ff      	movs	r2, #255	; 0xff
 800a658:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800a65a:	7afb      	ldrb	r3, [r7, #11]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	bd90      	pop	{r4, r7, pc}
 800a664:	40002800 	.word	0x40002800

0800a668 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	709a      	strb	r2, [r3, #2]
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800a6a2:	4b24      	ldr	r3, [pc, #144]	; (800a734 <RTC_GetTime+0xa0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a6aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a6ae:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	0c1b      	lsrs	r3, r3, #16
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	0a1b      	lsrs	r3, r3, #8
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	0c1b      	lsrs	r3, r3, #16
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d11a      	bne.n	800a72a <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fff5 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a6fe:	4603      	mov	r3, r0
 800a700:	461a      	mov	r2, r3
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 ffec 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a710:	4603      	mov	r3, r0
 800a712:	461a      	mov	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	789b      	ldrb	r3, [r3, #2]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 ffe3 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	709a      	strb	r2, [r3, #2]
  }
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	40002800 	.word	0x40002800

0800a738 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 800a742:	4b06      	ldr	r3, [pc, #24]	; (800a75c <RTC_GetSubSecond+0x24>)
 800a744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a746:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <RTC_GetSubSecond+0x24>)
 800a74a:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 800a74c:	687b      	ldr	r3, [r7, #4]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	40002800 	.word	0x40002800

0800a760 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800a760:	b590      	push	{r4, r7, lr}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800a76e:	2300      	movs	r3, #0
 800a770:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10e      	bne.n	800a796 <RTC_SetDate+0x36>
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	785b      	ldrb	r3, [r3, #1]
 800a77c:	f003 0310 	and.w	r3, r3, #16
 800a780:	2b00      	cmp	r3, #0
 800a782:	d008      	beq.n	800a796 <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	785b      	ldrb	r3, [r3, #1]
 800a788:	f023 0310 	bic.w	r3, r3, #16
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	330a      	adds	r3, #10
 800a790:	b2da      	uxtb	r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00d      	beq.n	800a7b8 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 ffa1 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	789b      	ldrb	r3, [r3, #2]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 ff9a 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00f      	beq.n	800a7de <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	78db      	ldrb	r3, [r3, #3]
 800a7c2:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	785b      	ldrb	r3, [r3, #1]
 800a7c8:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800a7ca:	4313      	orrs	r3, r2
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	7892      	ldrb	r2, [r2, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800a7d0:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	035b      	lsls	r3, r3, #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e01b      	b.n	800a816 <RTC_SetDate+0xb6>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	78db      	ldrb	r3, [r3, #3]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 ff62 	bl	800b6ac <RTC_ByteToBcd2>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	785b      	ldrb	r3, [r3, #1]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 ff5b 	bl	800b6ac <RTC_ByteToBcd2>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a7fa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	789b      	ldrb	r3, [r3, #2]
 800a800:	4618      	mov	r0, r3
 800a802:	f000 ff53 	bl	800b6ac <RTC_ByteToBcd2>
 800a806:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800a808:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	035b      	lsls	r3, r3, #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a812:	4313      	orrs	r3, r2
 800a814:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a816:	4b19      	ldr	r3, [pc, #100]	; (800a87c <RTC_SetDate+0x11c>)
 800a818:	22ca      	movs	r2, #202	; 0xca
 800a81a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a81c:	4b17      	ldr	r3, [pc, #92]	; (800a87c <RTC_SetDate+0x11c>)
 800a81e:	2253      	movs	r2, #83	; 0x53
 800a820:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a822:	f7ff fdb7 	bl	800a394 <RTC_EnterInitMode>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <RTC_SetDate+0xd2>
  {
    status = ERROR;
 800a82c:	2300      	movs	r3, #0
 800a82e:	72fb      	strb	r3, [r7, #11]
 800a830:	e01b      	b.n	800a86a <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800a832:	4a12      	ldr	r2, [pc, #72]	; (800a87c <RTC_SetDate+0x11c>)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a83a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a83e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800a840:	f7ff fde2 	bl	800a408 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 800a844:	4b0d      	ldr	r3, [pc, #52]	; (800a87c <RTC_SetDate+0x11c>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 800a850:	f7ff fdea 	bl	800a428 <RTC_WaitForSynchro>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <RTC_SetDate+0x100>
    {
      status = ERROR;
 800a85a:	2300      	movs	r3, #0
 800a85c:	72fb      	strb	r3, [r7, #11]
 800a85e:	e004      	b.n	800a86a <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 800a860:	2301      	movs	r3, #1
 800a862:	72fb      	strb	r3, [r7, #11]
 800a864:	e001      	b.n	800a86a <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 800a866:	2301      	movs	r3, #1
 800a868:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800a86a:	4b04      	ldr	r3, [pc, #16]	; (800a87c <RTC_SetDate+0x11c>)
 800a86c:	22ff      	movs	r2, #255	; 0xff
 800a86e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a870:	7afb      	ldrb	r3, [r7, #11]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	bd90      	pop	{r4, r7, pc}
 800a87a:	bf00      	nop
 800a87c:	40002800 	.word	0x40002800

0800a880 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	70da      	strb	r2, [r3, #3]
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800a8ba:	4b22      	ldr	r3, [pc, #136]	; (800a944 <RTC_GetDate+0x98>)
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a8c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	0c1b      	lsrs	r3, r3, #16
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	0a1b      	lsrs	r3, r3, #8
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	f003 031f 	and.w	r3, r3, #31
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	0b5b      	lsrs	r3, r3, #13
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d11a      	bne.n	800a93c <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	78db      	ldrb	r3, [r3, #3]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 feec 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	785b      	ldrb	r3, [r3, #1]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fee3 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a922:	4603      	mov	r3, r0
 800a924:	461a      	mov	r2, r3
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	789b      	ldrb	r3, [r3, #2]
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 feda 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a934:	4603      	mov	r3, r0
 800a936:	461a      	mov	r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	709a      	strb	r2, [r3, #2]
  }
}
 800a93c:	bf00      	nop
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	40002800 	.word	0x40002800

0800a948 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d109      	bne.n	800a972 <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a95e:	4b47      	ldr	r3, [pc, #284]	; (800aa7c <RTC_SetAlarm+0x134>)
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a966:	2b00      	cmp	r3, #0
 800a968:	d127      	bne.n	800a9ba <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	70da      	strb	r2, [r3, #3]
 800a970:	e023      	b.n	800a9ba <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a972:	4b42      	ldr	r3, [pc, #264]	; (800aa7c <RTC_SetAlarm+0x134>)
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d007      	beq.n	800a98e <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	4618      	mov	r0, r3
 800a984:	f000 feb0 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a988:	4603      	mov	r3, r0
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	e002      	b.n	800a994 <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d107      	bne.n	800a9ac <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	7b1b      	ldrb	r3, [r3, #12]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fea1 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	e006      	b.n	800a9ba <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7b1b      	ldrb	r3, [r3, #12]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 fe99 	bl	800b6e8 <RTC_Bcd2ToByte>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d019      	beq.n	800a9f4 <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	785b      	ldrb	r3, [r3, #1]
 800a9ca:	021b      	lsls	r3, r3, #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a9cc:	4313      	orrs	r3, r2
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	7892      	ldrb	r2, [r2, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a9d2:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	78db      	ldrb	r3, [r3, #3]
 800a9d8:	041b      	lsls	r3, r3, #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800a9da:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	7b1b      	ldrb	r3, [r3, #12]
 800a9e0:	061b      	lsls	r3, r3, #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a9e2:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a9e8:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	e02b      	b.n	800aa4c <RTC_SetAlarm+0x104>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fe57 	bl	800b6ac <RTC_ByteToBcd2>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fe50 	bl	800b6ac <RTC_ByteToBcd2>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800aa10:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	789b      	ldrb	r3, [r3, #2]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fe48 	bl	800b6ac <RTC_ByteToBcd2>
 800aa1c:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800aa1e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	78db      	ldrb	r3, [r3, #3]
 800aa26:	041b      	lsls	r3, r3, #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800aa28:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7b1b      	ldrb	r3, [r3, #12]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 fe3b 	bl	800b6ac <RTC_ByteToBcd2>
 800aa36:	4603      	mov	r3, r0
 800aa38:	061b      	lsls	r3, r3, #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800aa3a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800aa42:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aa4c:	4b0b      	ldr	r3, [pc, #44]	; (800aa7c <RTC_SetAlarm+0x134>)
 800aa4e:	22ca      	movs	r2, #202	; 0xca
 800aa50:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aa52:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <RTC_SetAlarm+0x134>)
 800aa54:	2253      	movs	r2, #83	; 0x53
 800aa56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa5e:	d103      	bne.n	800aa68 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800aa60:	4a06      	ldr	r2, [pc, #24]	; (800aa7c <RTC_SetAlarm+0x134>)
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	61d3      	str	r3, [r2, #28]
 800aa66:	e002      	b.n	800aa6e <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800aa68:	4a04      	ldr	r2, [pc, #16]	; (800aa7c <RTC_SetAlarm+0x134>)
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	6213      	str	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800aa6e:	4b03      	ldr	r3, [pc, #12]	; (800aa7c <RTC_SetAlarm+0x134>)
 800aa70:	22ff      	movs	r2, #255	; 0xff
 800aa72:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aa74:	bf00      	nop
 800aa76:	371c      	adds	r7, #28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd90      	pop	{r4, r7, pc}
 800aa7c:	40002800 	.word	0x40002800

0800aa80 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	605a      	str	r2, [r3, #4]
}
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop

0800aac0 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad6:	d103      	bne.n	800aae0 <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800aad8:	4b31      	ldr	r3, [pc, #196]	; (800aba0 <RTC_GetAlarm+0xe0>)
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	617b      	str	r3, [r7, #20]
 800aade:	e002      	b.n	800aae6 <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800aae0:	4b2f      	ldr	r3, [pc, #188]	; (800aba0 <RTC_GetAlarm+0xe0>)
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	0c1b      	lsrs	r3, r3, #16
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	0a1b      	lsrs	r3, r3, #8
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	0c1b      	lsrs	r3, r3, #16
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	0e1b      	lsrs	r3, r3, #24
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d123      	bne.n	800ab96 <RTC_GetAlarm+0xd6>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fdc8 	bl	800b6e8 <RTC_Bcd2ToByte>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fdbf 	bl	800b6e8 <RTC_Bcd2ToByte>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	789b      	ldrb	r3, [r3, #2]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 fdb6 	bl	800b6e8 <RTC_Bcd2ToByte>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461a      	mov	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	7b1b      	ldrb	r3, [r3, #12]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fdad 	bl	800b6e8 <RTC_Bcd2ToByte>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	461a      	mov	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	731a      	strb	r2, [r3, #12]
  }  
}
 800ab96:	bf00      	nop
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	40002800 	.word	0x40002800

0800aba4 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800abb4:	2300      	movs	r3, #0
 800abb6:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800abb8:	2300      	movs	r3, #0
 800abba:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800abbc:	4b1f      	ldr	r3, [pc, #124]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800abbe:	22ca      	movs	r2, #202	; 0xca
 800abc0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800abc2:	4b1e      	ldr	r3, [pc, #120]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800abc4:	2253      	movs	r2, #83	; 0x53
 800abc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d008      	beq.n	800abe0 <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800abce:	491b      	ldr	r1, [pc, #108]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800abd0:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	608b      	str	r3, [r1, #8]

    status = SUCCESS;    
 800abda:	2301      	movs	r3, #1
 800abdc:	75fb      	strb	r3, [r7, #23]
 800abde:	e022      	b.n	800ac26 <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800abe0:	4916      	ldr	r1, [pc, #88]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800abe2:	4b16      	ldr	r3, [pc, #88]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800abe4:	689a      	ldr	r2, [r3, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	43db      	mvns	r3, r3
 800abea:	4013      	ands	r3, r2
 800abec:	608b      	str	r3, [r1, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800abee:	4b13      	ldr	r3, [pc, #76]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800abf0:	68da      	ldr	r2, [r3, #12]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	0a1b      	lsrs	r3, r3, #8
 800abf6:	4013      	ands	r3, r2
 800abf8:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3301      	adds	r3, #1
 800abfe:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac06:	d002      	beq.n	800ac0e <RTC_AlarmCmd+0x6a>
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0ef      	beq.n	800abee <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800ac0e:	4b0b      	ldr	r3, [pc, #44]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	0a1b      	lsrs	r3, r3, #8
 800ac16:	4013      	ands	r3, r2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	75fb      	strb	r3, [r7, #23]
 800ac20:	e001      	b.n	800ac26 <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 800ac22:	2301      	movs	r3, #1
 800ac24:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <RTC_AlarmCmd+0x98>)
 800ac28:	22ff      	movs	r2, #255	; 0xff
 800ac2a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	371c      	adds	r7, #28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40002800 	.word	0x40002800

0800ac40 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <RTC_AlarmSubSecondConfig+0x4c>)
 800ac52:	22ca      	movs	r2, #202	; 0xca
 800ac54:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ac56:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <RTC_AlarmSubSecondConfig+0x4c>)
 800ac58:	2253      	movs	r2, #83	; 0x53
 800ac5a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac6a:	d103      	bne.n	800ac74 <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 800ac6c:	4a07      	ldr	r2, [pc, #28]	; (800ac8c <RTC_AlarmSubSecondConfig+0x4c>)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	6453      	str	r3, [r2, #68]	; 0x44
 800ac72:	e002      	b.n	800ac7a <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 800ac74:	4a05      	ldr	r2, [pc, #20]	; (800ac8c <RTC_AlarmSubSecondConfig+0x4c>)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800ac7a:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <RTC_AlarmSubSecondConfig+0x4c>)
 800ac7c:	22ff      	movs	r2, #255	; 0xff
 800ac7e:	625a      	str	r2, [r3, #36]	; 0x24

}
 800ac80:	bf00      	nop
 800ac82:	371c      	adds	r7, #28
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	40002800 	.word	0x40002800

0800ac90 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca2:	d105      	bne.n	800acb0 <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800aca4:	4b08      	ldr	r3, [pc, #32]	; (800acc8 <RTC_GetAlarmSubSecond+0x38>)
 800aca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	e004      	b.n	800acba <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800acb0:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <RTC_GetAlarmSubSecond+0x38>)
 800acb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acb4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800acb8:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 800acba:	68fb      	ldr	r3, [r7, #12]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	40002800 	.word	0x40002800

0800accc <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800acd4:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <RTC_WakeUpClockConfig+0x40>)
 800acd6:	22ca      	movs	r2, #202	; 0xca
 800acd8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800acda:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <RTC_WakeUpClockConfig+0x40>)
 800acdc:	2253      	movs	r2, #83	; 0x53
 800acde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ace0:	4a0a      	ldr	r2, [pc, #40]	; (800ad0c <RTC_WakeUpClockConfig+0x40>)
 800ace2:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <RTC_WakeUpClockConfig+0x40>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f023 0307 	bic.w	r3, r3, #7
 800acea:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800acec:	4907      	ldr	r1, [pc, #28]	; (800ad0c <RTC_WakeUpClockConfig+0x40>)
 800acee:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <RTC_WakeUpClockConfig+0x40>)
 800acf0:	689a      	ldr	r2, [r3, #8]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	608b      	str	r3, [r1, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <RTC_WakeUpClockConfig+0x40>)
 800acfa:	22ff      	movs	r2, #255	; 0xff
 800acfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	40002800 	.word	0x40002800

0800ad10 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ad18:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <RTC_SetWakeUpCounter+0x2c>)
 800ad1a:	22ca      	movs	r2, #202	; 0xca
 800ad1c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ad1e:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <RTC_SetWakeUpCounter+0x2c>)
 800ad20:	2253      	movs	r2, #83	; 0x53
 800ad22:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800ad24:	4a05      	ldr	r2, [pc, #20]	; (800ad3c <RTC_SetWakeUpCounter+0x2c>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6153      	str	r3, [r2, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ad2a:	4b04      	ldr	r3, [pc, #16]	; (800ad3c <RTC_SetWakeUpCounter+0x2c>)
 800ad2c:	22ff      	movs	r2, #255	; 0xff
 800ad2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	40002800 	.word	0x40002800

0800ad40 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800ad44:	4b03      	ldr	r3, [pc, #12]	; (800ad54 <RTC_GetWakeUpCounter+0x14>)
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	b29b      	uxth	r3, r3
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	40002800 	.word	0x40002800

0800ad58 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800ad66:	2300      	movs	r3, #0
 800ad68:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800ad70:	22ca      	movs	r2, #202	; 0xca
 800ad72:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ad74:	4b1c      	ldr	r3, [pc, #112]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800ad76:	2253      	movs	r2, #83	; 0x53
 800ad78:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d008      	beq.n	800ad92 <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800ad80:	4a19      	ldr	r2, [pc, #100]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800ad82:	4b19      	ldr	r3, [pc, #100]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad8a:	6093      	str	r3, [r2, #8]
    status = SUCCESS;    
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
 800ad90:	e01f      	b.n	800add2 <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800ad92:	4a15      	ldr	r2, [pc, #84]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800ad94:	4b14      	ldr	r3, [pc, #80]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad9c:	6093      	str	r3, [r2, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800ad9e:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	f003 0304 	and.w	r3, r3, #4
 800ada6:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3301      	adds	r3, #1
 800adac:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb4:	d002      	beq.n	800adbc <RTC_WakeUpCmd+0x64>
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0f0      	beq.n	800ad9e <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800adbc:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 800adc8:	2300      	movs	r3, #0
 800adca:	75fb      	strb	r3, [r7, #23]
 800adcc:	e001      	b.n	800add2 <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 800adce:	2301      	movs	r3, #1
 800add0:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800add2:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <RTC_WakeUpCmd+0x90>)
 800add4:	22ff      	movs	r2, #255	; 0xff
 800add6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adda:	4618      	mov	r0, r3
 800addc:	371c      	adds	r7, #28
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	40002800 	.word	0x40002800

0800adec <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800adf6:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <RTC_DayLightSavingConfig+0x44>)
 800adf8:	22ca      	movs	r2, #202	; 0xca
 800adfa:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800adfc:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <RTC_DayLightSavingConfig+0x44>)
 800adfe:	2253      	movs	r2, #83	; 0x53
 800ae00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800ae02:	4a0b      	ldr	r2, [pc, #44]	; (800ae30 <RTC_DayLightSavingConfig+0x44>)
 800ae04:	4b0a      	ldr	r3, [pc, #40]	; (800ae30 <RTC_DayLightSavingConfig+0x44>)
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae0c:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800ae0e:	4808      	ldr	r0, [pc, #32]	; (800ae30 <RTC_DayLightSavingConfig+0x44>)
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <RTC_DayLightSavingConfig+0x44>)
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	6083      	str	r3, [r0, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ae1e:	4b04      	ldr	r3, [pc, #16]	; (800ae30 <RTC_DayLightSavingConfig+0x44>)
 800ae20:	22ff      	movs	r2, #255	; 0xff
 800ae22:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	40002800 	.word	0x40002800

0800ae34 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800ae34:	b480      	push	{r7}
 800ae36:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <RTC_GetStoreOperation+0x18>)
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	40002800 	.word	0x40002800

0800ae50 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ae5a:	4b0e      	ldr	r3, [pc, #56]	; (800ae94 <RTC_OutputConfig+0x44>)
 800ae5c:	22ca      	movs	r2, #202	; 0xca
 800ae5e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ae60:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <RTC_OutputConfig+0x44>)
 800ae62:	2253      	movs	r2, #83	; 0x53
 800ae64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800ae66:	4a0b      	ldr	r2, [pc, #44]	; (800ae94 <RTC_OutputConfig+0x44>)
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <RTC_OutputConfig+0x44>)
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae70:	6093      	str	r3, [r2, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800ae72:	4808      	ldr	r0, [pc, #32]	; (800ae94 <RTC_OutputConfig+0x44>)
 800ae74:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <RTC_OutputConfig+0x44>)
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	6879      	ldr	r1, [r7, #4]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	6083      	str	r3, [r0, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ae82:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <RTC_OutputConfig+0x44>)
 800ae84:	22ff      	movs	r2, #255	; 0xff
 800ae86:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	40002800 	.word	0x40002800

0800ae98 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aea6:	4b0f      	ldr	r3, [pc, #60]	; (800aee4 <RTC_CoarseCalibConfig+0x4c>)
 800aea8:	22ca      	movs	r2, #202	; 0xca
 800aeaa:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <RTC_CoarseCalibConfig+0x4c>)
 800aeae:	2253      	movs	r2, #83	; 0x53
 800aeb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800aeb2:	f7ff fa6f 	bl	800a394 <RTC_EnterInitMode>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]
 800aec0:	e008      	b.n	800aed4 <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800aec2:	4908      	ldr	r1, [pc, #32]	; (800aee4 <RTC_CoarseCalibConfig+0x4c>)
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	618b      	str	r3, [r1, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800aecc:	f7ff fa9c 	bl	800a408 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800aed0:	2301      	movs	r3, #1
 800aed2:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800aed4:	4b03      	ldr	r3, [pc, #12]	; (800aee4 <RTC_CoarseCalibConfig+0x4c>)
 800aed6:	22ff      	movs	r2, #255	; 0xff
 800aed8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	40002800 	.word	0x40002800

0800aee8 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	4603      	mov	r3, r0
 800aef0:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aef6:	4b15      	ldr	r3, [pc, #84]	; (800af4c <RTC_CoarseCalibCmd+0x64>)
 800aef8:	22ca      	movs	r2, #202	; 0xca
 800aefa:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aefc:	4b13      	ldr	r3, [pc, #76]	; (800af4c <RTC_CoarseCalibCmd+0x64>)
 800aefe:	2253      	movs	r2, #83	; 0x53
 800af00:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800af02:	f7ff fa47 	bl	800a394 <RTC_EnterInitMode>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d102      	bne.n	800af12 <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
 800af10:	e013      	b.n	800af3a <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d006      	beq.n	800af26 <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800af18:	4a0c      	ldr	r2, [pc, #48]	; (800af4c <RTC_CoarseCalibCmd+0x64>)
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <RTC_CoarseCalibCmd+0x64>)
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af22:	6093      	str	r3, [r2, #8]
 800af24:	e005      	b.n	800af32 <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800af26:	4a09      	ldr	r2, [pc, #36]	; (800af4c <RTC_CoarseCalibCmd+0x64>)
 800af28:	4b08      	ldr	r3, [pc, #32]	; (800af4c <RTC_CoarseCalibCmd+0x64>)
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af30:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800af32:	f7ff fa69 	bl	800a408 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800af36:	2301      	movs	r3, #1
 800af38:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800af3a:	4b04      	ldr	r3, [pc, #16]	; (800af4c <RTC_CoarseCalibCmd+0x64>)
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	40002800 	.word	0x40002800

0800af50 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800af5a:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <RTC_CalibOutputCmd+0x48>)
 800af5c:	22ca      	movs	r2, #202	; 0xca
 800af5e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800af60:	4b0d      	ldr	r3, [pc, #52]	; (800af98 <RTC_CalibOutputCmd+0x48>)
 800af62:	2253      	movs	r2, #83	; 0x53
 800af64:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800af6c:	4a0a      	ldr	r2, [pc, #40]	; (800af98 <RTC_CalibOutputCmd+0x48>)
 800af6e:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <RTC_CalibOutputCmd+0x48>)
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af76:	6093      	str	r3, [r2, #8]
 800af78:	e005      	b.n	800af86 <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800af7a:	4a07      	ldr	r2, [pc, #28]	; (800af98 <RTC_CalibOutputCmd+0x48>)
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <RTC_CalibOutputCmd+0x48>)
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800af84:	6093      	str	r3, [r2, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800af86:	4b04      	ldr	r3, [pc, #16]	; (800af98 <RTC_CalibOutputCmd+0x48>)
 800af88:	22ff      	movs	r2, #255	; 0xff
 800af8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	40002800 	.word	0x40002800

0800af9c <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <RTC_CalibOutputConfig+0x40>)
 800afa6:	22ca      	movs	r2, #202	; 0xca
 800afa8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800afaa:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <RTC_CalibOutputConfig+0x40>)
 800afac:	2253      	movs	r2, #83	; 0x53
 800afae:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 800afb0:	4a0a      	ldr	r2, [pc, #40]	; (800afdc <RTC_CalibOutputConfig+0x40>)
 800afb2:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <RTC_CalibOutputConfig+0x40>)
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800afba:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800afbc:	4907      	ldr	r1, [pc, #28]	; (800afdc <RTC_CalibOutputConfig+0x40>)
 800afbe:	4b07      	ldr	r3, [pc, #28]	; (800afdc <RTC_CalibOutputConfig+0x40>)
 800afc0:	689a      	ldr	r2, [r3, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800afc8:	4b04      	ldr	r3, [pc, #16]	; (800afdc <RTC_CalibOutputConfig+0x40>)
 800afca:	22ff      	movs	r2, #255	; 0xff
 800afcc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	40002800 	.word	0x40002800

0800afe0 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800afec:	2300      	movs	r3, #0
 800afee:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aff4:	4b1a      	ldr	r3, [pc, #104]	; (800b060 <RTC_SmoothCalibConfig+0x80>)
 800aff6:	22ca      	movs	r2, #202	; 0xca
 800aff8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800affa:	4b19      	ldr	r3, [pc, #100]	; (800b060 <RTC_SmoothCalibConfig+0x80>)
 800affc:	2253      	movs	r2, #83	; 0x53
 800affe:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800b000:	4b17      	ldr	r3, [pc, #92]	; (800b060 <RTC_SmoothCalibConfig+0x80>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00d      	beq.n	800b028 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800b00c:	e002      	b.n	800b014 <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	3301      	adds	r3, #1
 800b012:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800b014:	4b12      	ldr	r3, [pc, #72]	; (800b060 <RTC_SmoothCalibConfig+0x80>)
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <RTC_SmoothCalibConfig+0x48>
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b026:	d1f2      	bne.n	800b00e <RTC_SmoothCalibConfig+0x2e>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800b028:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <RTC_SmoothCalibConfig+0x80>)
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d109      	bne.n	800b048 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 800b034:	490a      	ldr	r1, [pc, #40]	; (800b060 <RTC_SmoothCalibConfig+0x80>)
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	431a      	orrs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4313      	orrs	r3, r2
 800b040:	63cb      	str	r3, [r1, #60]	; 0x3c

    status = SUCCESS;
 800b042:	2301      	movs	r3, #1
 800b044:	75fb      	strb	r3, [r7, #23]
 800b046:	e001      	b.n	800b04c <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 800b048:	2300      	movs	r3, #0
 800b04a:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800b04c:	4b04      	ldr	r3, [pc, #16]	; (800b060 <RTC_SmoothCalibConfig+0x80>)
 800b04e:	22ff      	movs	r2, #255	; 0xff
 800b050:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800b052:	7dfb      	ldrb	r3, [r7, #23]
}
 800b054:	4618      	mov	r0, r3
 800b056:	371c      	adds	r7, #28
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	40002800 	.word	0x40002800

0800b064 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b074:	4b13      	ldr	r3, [pc, #76]	; (800b0c4 <RTC_TimeStampCmd+0x60>)
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b07c:	f023 0308 	bic.w	r3, r3, #8
 800b080:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800b082:	78fb      	ldrb	r3, [r7, #3]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d006      	beq.n	800b096 <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e003      	b.n	800b09e <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b09e:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <RTC_TimeStampCmd+0x60>)
 800b0a0:	22ca      	movs	r2, #202	; 0xca
 800b0a2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b0a4:	4b07      	ldr	r3, [pc, #28]	; (800b0c4 <RTC_TimeStampCmd+0x60>)
 800b0a6:	2253      	movs	r2, #83	; 0x53
 800b0a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800b0aa:	4a06      	ldr	r2, [pc, #24]	; (800b0c4 <RTC_TimeStampCmd+0x60>)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b0b0:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <RTC_TimeStampCmd+0x60>)
 800b0b2:	22ff      	movs	r2, #255	; 0xff
 800b0b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	40002800 	.word	0x40002800

0800b0c8 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800b0dc:	4b41      	ldr	r3, [pc, #260]	; (800b1e4 <RTC_GetTimeStamp+0x11c>)
 800b0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b0e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b0e8:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800b0ea:	4b3e      	ldr	r3, [pc, #248]	; (800b1e4 <RTC_GetTimeStamp+0x11c>)
 800b0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b0f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0f6:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	0c1b      	lsrs	r3, r3, #16
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b102:	b2da      	uxtb	r2, r3
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	0a1b      	lsrs	r3, r3, #8
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b112:	b2da      	uxtb	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b120:	b2da      	uxtb	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	0c1b      	lsrs	r3, r3, #16
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b130:	b2da      	uxtb	r2, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	0a1b      	lsrs	r3, r3, #8
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 031f 	and.w	r3, r3, #31
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b154:	b2da      	uxtb	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	0b5b      	lsrs	r3, r3, #13
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	f003 0307 	and.w	r3, r3, #7
 800b164:	b2da      	uxtb	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d135      	bne.n	800b1dc <RTC_GetTimeStamp+0x114>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fab7 	bl	800b6e8 <RTC_Bcd2ToByte>
 800b17a:	4603      	mov	r3, r0
 800b17c:	461a      	mov	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	785b      	ldrb	r3, [r3, #1]
 800b186:	4618      	mov	r0, r3
 800b188:	f000 faae 	bl	800b6e8 <RTC_Bcd2ToByte>
 800b18c:	4603      	mov	r3, r0
 800b18e:	461a      	mov	r2, r3
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	789b      	ldrb	r3, [r3, #2]
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 faa5 	bl	800b6e8 <RTC_Bcd2ToByte>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fa9c 	bl	800b6e8 <RTC_Bcd2ToByte>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	789b      	ldrb	r3, [r3, #2]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fa93 	bl	800b6e8 <RTC_Bcd2ToByte>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fa8a 	bl	800b6e8 <RTC_Bcd2ToByte>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	701a      	strb	r2, [r3, #0]
  }
}
 800b1dc:	bf00      	nop
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	40002800 	.word	0x40002800

0800b1e8 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800b1ec:	4b03      	ldr	r3, [pc, #12]	; (800b1fc <RTC_GetTimeStampSubSecond+0x14>)
 800b1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	40002800 	.word	0x40002800

0800b200 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d108      	bne.n	800b222 <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800b210:	490a      	ldr	r1, [pc, #40]	; (800b23c <RTC_TamperTriggerConfig+0x3c>)
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <RTC_TamperTriggerConfig+0x3c>)
 800b214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	43db      	mvns	r3, r3
 800b21c:	4013      	ands	r3, r2
 800b21e:	640b      	str	r3, [r1, #64]	; 0x40
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
  }  
}
 800b220:	e006      	b.n	800b230 <RTC_TamperTriggerConfig+0x30>
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800b222:	4906      	ldr	r1, [pc, #24]	; (800b23c <RTC_TamperTriggerConfig+0x3c>)
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <RTC_TamperTriggerConfig+0x3c>)
 800b226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	4313      	orrs	r3, r2
 800b22e:	640b      	str	r3, [r1, #64]	; 0x40
  }  
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	40002800 	.word	0x40002800

0800b240 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b24c:	78fb      	ldrb	r3, [r7, #3]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d006      	beq.n	800b260 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800b252:	490a      	ldr	r1, [pc, #40]	; (800b27c <RTC_TamperCmd+0x3c>)
 800b254:	4b09      	ldr	r3, [pc, #36]	; (800b27c <RTC_TamperCmd+0x3c>)
 800b256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	640b      	str	r3, [r1, #64]	; 0x40
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
  }  
}
 800b25e:	e006      	b.n	800b26e <RTC_TamperCmd+0x2e>
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800b260:	4906      	ldr	r1, [pc, #24]	; (800b27c <RTC_TamperCmd+0x3c>)
 800b262:	4b06      	ldr	r3, [pc, #24]	; (800b27c <RTC_TamperCmd+0x3c>)
 800b264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	43db      	mvns	r3, r3
 800b26a:	4013      	ands	r3, r2
 800b26c:	640b      	str	r3, [r1, #64]	; 0x40
  }  
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	40002800 	.word	0x40002800

0800b280 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800b288:	4a08      	ldr	r2, [pc, #32]	; (800b2ac <RTC_TamperFilterConfig+0x2c>)
 800b28a:	4b08      	ldr	r3, [pc, #32]	; (800b2ac <RTC_TamperFilterConfig+0x2c>)
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b292:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800b294:	4905      	ldr	r1, [pc, #20]	; (800b2ac <RTC_TamperFilterConfig+0x2c>)
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <RTC_TamperFilterConfig+0x2c>)
 800b298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	640b      	str	r3, [r1, #64]	; 0x40
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	40002800 	.word	0x40002800

0800b2b0 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800b2b8:	4a08      	ldr	r2, [pc, #32]	; (800b2dc <RTC_TamperSamplingFreqConfig+0x2c>)
 800b2ba:	4b08      	ldr	r3, [pc, #32]	; (800b2dc <RTC_TamperSamplingFreqConfig+0x2c>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b2c2:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800b2c4:	4905      	ldr	r1, [pc, #20]	; (800b2dc <RTC_TamperSamplingFreqConfig+0x2c>)
 800b2c6:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <RTC_TamperSamplingFreqConfig+0x2c>)
 800b2c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	640b      	str	r3, [r1, #64]	; 0x40
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	40002800 	.word	0x40002800

0800b2e0 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800b2e8:	4a08      	ldr	r2, [pc, #32]	; (800b30c <RTC_TamperPinsPrechargeDuration+0x2c>)
 800b2ea:	4b08      	ldr	r3, [pc, #32]	; (800b30c <RTC_TamperPinsPrechargeDuration+0x2c>)
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800b2f2:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800b2f4:	4905      	ldr	r1, [pc, #20]	; (800b30c <RTC_TamperPinsPrechargeDuration+0x2c>)
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <RTC_TamperPinsPrechargeDuration+0x2c>)
 800b2f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	640b      	str	r3, [r1, #64]	; 0x40
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	40002800 	.word	0x40002800

0800b310 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d006      	beq.n	800b32e <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800b320:	4a09      	ldr	r2, [pc, #36]	; (800b348 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800b324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b32a:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
  }
}
 800b32c:	e005      	b.n	800b33a <RTC_TimeStampOnTamperDetectionCmd+0x2a>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800b32e:	4a06      	ldr	r2, [pc, #24]	; (800b348 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800b330:	4b05      	ldr	r3, [pc, #20]	; (800b348 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 800b332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b338:	6413      	str	r3, [r2, #64]	; 0x40
  }
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	40002800 	.word	0x40002800

0800b34c <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d006      	beq.n	800b36a <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800b35c:	4a09      	ldr	r2, [pc, #36]	; (800b384 <RTC_TamperPullUpCmd+0x38>)
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <RTC_TamperPullUpCmd+0x38>)
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b362:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b366:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
  } 
}
 800b368:	e005      	b.n	800b376 <RTC_TamperPullUpCmd+0x2a>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800b36a:	4a06      	ldr	r2, [pc, #24]	; (800b384 <RTC_TamperPullUpCmd+0x38>)
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <RTC_TamperPullUpCmd+0x38>)
 800b36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b374:	6413      	str	r3, [r2, #64]	; 0x40
  } 
}
 800b376:	bf00      	nop
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	40002800 	.word	0x40002800

0800b388 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800b396:	4b08      	ldr	r3, [pc, #32]	; (800b3b8 <RTC_WriteBackupRegister+0x30>)
 800b398:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	009a      	lsls	r2, r3, #2
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	6013      	str	r3, [r2, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	40002850 	.word	0x40002850

0800b3bc <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800b3c8:	4b07      	ldr	r3, [pc, #28]	; (800b3e8 <RTC_ReadBackupRegister+0x2c>)
 800b3ca:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	009a      	lsls	r2, r3, #2
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	40002850 	.word	0x40002850

0800b3ec <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800b3f4:	4a08      	ldr	r2, [pc, #32]	; (800b418 <RTC_TamperPinSelection+0x2c>)
 800b3f6:	4b08      	ldr	r3, [pc, #32]	; (800b418 <RTC_TamperPinSelection+0x2c>)
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3fe:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800b400:	4905      	ldr	r1, [pc, #20]	; (800b418 <RTC_TamperPinSelection+0x2c>)
 800b402:	4b05      	ldr	r3, [pc, #20]	; (800b418 <RTC_TamperPinSelection+0x2c>)
 800b404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4313      	orrs	r3, r2
 800b40a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	40002800 	.word	0x40002800

0800b41c <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800b424:	4a08      	ldr	r2, [pc, #32]	; (800b448 <RTC_TimeStampPinSelection+0x2c>)
 800b426:	4b08      	ldr	r3, [pc, #32]	; (800b448 <RTC_TimeStampPinSelection+0x2c>)
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b42e:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800b430:	4905      	ldr	r1, [pc, #20]	; (800b448 <RTC_TimeStampPinSelection+0x2c>)
 800b432:	4b05      	ldr	r3, [pc, #20]	; (800b448 <RTC_TimeStampPinSelection+0x2c>)
 800b434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4313      	orrs	r3, r2
 800b43a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	40002800 	.word	0x40002800

0800b44c <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800b454:	4a08      	ldr	r2, [pc, #32]	; (800b478 <RTC_OutputTypeConfig+0x2c>)
 800b456:	4b08      	ldr	r3, [pc, #32]	; (800b478 <RTC_OutputTypeConfig+0x2c>)
 800b458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b45e:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800b460:	4905      	ldr	r1, [pc, #20]	; (800b478 <RTC_OutputTypeConfig+0x2c>)
 800b462:	4b05      	ldr	r3, [pc, #20]	; (800b478 <RTC_OutputTypeConfig+0x2c>)
 800b464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4313      	orrs	r3, r2
 800b46a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	40002800 	.word	0x40002800

0800b47c <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b486:	2300      	movs	r3, #0
 800b488:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b48e:	4b21      	ldr	r3, [pc, #132]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b490:	22ca      	movs	r2, #202	; 0xca
 800b492:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b494:	4b1f      	ldr	r3, [pc, #124]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b496:	2253      	movs	r2, #83	; 0x53
 800b498:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800b49a:	4b1e      	ldr	r3, [pc, #120]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f003 0308 	and.w	r3, r3, #8
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00d      	beq.n	800b4c2 <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800b4a6:	e002      	b.n	800b4ae <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800b4ae:	4b19      	ldr	r3, [pc, #100]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	f003 0308 	and.w	r3, r3, #8
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <RTC_SynchroShiftConfig+0x46>
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c0:	d1f2      	bne.n	800b4a8 <RTC_SynchroShiftConfig+0x2c>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800b4c2:	4b14      	ldr	r3, [pc, #80]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f003 0308 	and.w	r3, r3, #8
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d118      	bne.n	800b500 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800b4ce:	4b11      	ldr	r3, [pc, #68]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 0310 	and.w	r3, r3, #16
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10f      	bne.n	800b4fa <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800b4da:	490e      	ldr	r1, [pc, #56]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	62cb      	str	r3, [r1, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800b4e4:	f7fe ffa0 	bl	800a428 <RTC_WaitForSynchro>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
 800b4f2:	e007      	b.n	800b504 <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	73fb      	strb	r3, [r7, #15]
 800b4f8:	e004      	b.n	800b504 <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	73fb      	strb	r3, [r7, #15]
 800b4fe:	e001      	b.n	800b504 <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 800b500:	2300      	movs	r3, #0
 800b502:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800b504:	4b03      	ldr	r3, [pc, #12]	; (800b514 <RTC_SynchroShiftConfig+0x98>)
 800b506:	22ff      	movs	r2, #255	; 0xff
 800b508:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	40002800 	.word	0x40002800

0800b518 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b524:	4b1a      	ldr	r3, [pc, #104]	; (800b590 <RTC_ITConfig+0x78>)
 800b526:	22ca      	movs	r2, #202	; 0xca
 800b528:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b52a:	4b19      	ldr	r3, [pc, #100]	; (800b590 <RTC_ITConfig+0x78>)
 800b52c:	2253      	movs	r2, #83	; 0x53
 800b52e:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d010      	beq.n	800b558 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800b536:	4916      	ldr	r1, [pc, #88]	; (800b590 <RTC_ITConfig+0x78>)
 800b538:	4b15      	ldr	r3, [pc, #84]	; (800b590 <RTC_ITConfig+0x78>)
 800b53a:	689a      	ldr	r2, [r3, #8]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f023 0304 	bic.w	r3, r3, #4
 800b542:	4313      	orrs	r3, r2
 800b544:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800b546:	4912      	ldr	r1, [pc, #72]	; (800b590 <RTC_ITConfig+0x78>)
 800b548:	4b11      	ldr	r3, [pc, #68]	; (800b590 <RTC_ITConfig+0x78>)
 800b54a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f003 0304 	and.w	r3, r3, #4
 800b552:	4313      	orrs	r3, r2
 800b554:	640b      	str	r3, [r1, #64]	; 0x40
 800b556:	e011      	b.n	800b57c <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800b558:	490d      	ldr	r1, [pc, #52]	; (800b590 <RTC_ITConfig+0x78>)
 800b55a:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <RTC_ITConfig+0x78>)
 800b55c:	689a      	ldr	r2, [r3, #8]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f023 0304 	bic.w	r3, r3, #4
 800b564:	43db      	mvns	r3, r3
 800b566:	4013      	ands	r3, r2
 800b568:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800b56a:	4909      	ldr	r1, [pc, #36]	; (800b590 <RTC_ITConfig+0x78>)
 800b56c:	4b08      	ldr	r3, [pc, #32]	; (800b590 <RTC_ITConfig+0x78>)
 800b56e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f003 0304 	and.w	r3, r3, #4
 800b576:	43db      	mvns	r3, r3
 800b578:	4013      	ands	r3, r2
 800b57a:	640b      	str	r3, [r1, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b57c:	4b04      	ldr	r3, [pc, #16]	; (800b590 <RTC_ITConfig+0x78>)
 800b57e:	22ff      	movs	r2, #255	; 0xff
 800b580:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b582:	bf00      	nop
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	40002800 	.word	0x40002800

0800b594 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800b5a4:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <RTC_GetFlagStatus+0x3c>)
 800b5a6:	68da      	ldr	r2, [r3, #12]
 800b5a8:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <RTC_GetFlagStatus+0x40>)
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]
 800b5bc:	e001      	b.n	800b5c2 <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	40002800 	.word	0x40002800
 800b5d4:	00013f7f 	.word	0x00013f7f

0800b5d8 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800b5e0:	4908      	ldr	r1, [pc, #32]	; (800b604 <RTC_ClearFlag+0x2c>)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ea:	43da      	mvns	r2, r3
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <RTC_ClearFlag+0x2c>)
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60cb      	str	r3, [r1, #12]
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	40002800 	.word	0x40002800

0800b608 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800b610:	2300      	movs	r3, #0
 800b612:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800b614:	2300      	movs	r3, #0
 800b616:	613b      	str	r3, [r7, #16]
 800b618:	2300      	movs	r3, #0
 800b61a:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800b61c:	4b13      	ldr	r3, [pc, #76]	; (800b66c <RTC_GetITStatus+0x64>)
 800b61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800b626:	4b11      	ldr	r3, [pc, #68]	; (800b66c <RTC_GetITStatus+0x64>)
 800b628:	689a      	ldr	r2, [r3, #8]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	401a      	ands	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	0bd9      	lsrs	r1, r3, #15
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	400b      	ands	r3, r1
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800b63a:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <RTC_GetITStatus+0x64>)
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	091b      	lsrs	r3, r3, #4
 800b642:	4013      	ands	r3, r2
 800b644:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d006      	beq.n	800b65a <RTC_GetITStatus+0x52>
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
 800b658:	e001      	b.n	800b65e <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 800b65a:	2300      	movs	r3, #0
 800b65c:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b660:	4618      	mov	r0, r3
 800b662:	371c      	adds	r7, #28
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	40002800 	.word	0x40002800

0800b670 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	091b      	lsrs	r3, r3, #4
 800b680:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800b682:	4909      	ldr	r1, [pc, #36]	; (800b6a8 <RTC_ClearITPendingBit+0x38>)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	b29b      	uxth	r3, r3
 800b688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68c:	43da      	mvns	r2, r3
 800b68e:	4b06      	ldr	r3, [pc, #24]	; (800b6a8 <RTC_ClearITPendingBit+0x38>)
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b696:	4313      	orrs	r3, r2
 800b698:	60cb      	str	r3, [r1, #12]
}
 800b69a:	bf00      	nop
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	40002800 	.word	0x40002800

0800b6ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800b6ba:	e005      	b.n	800b6c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	3b0a      	subs	r3, #10
 800b6c6:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	2b09      	cmp	r3, #9
 800b6cc:	d8f6      	bhi.n	800b6bc <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	011b      	lsls	r3, r3, #4
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	b2db      	uxtb	r3, r3
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop

0800b6e8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	091b      	lsrs	r3, r3, #4
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	0092      	lsls	r2, r2, #2
 800b700:	4413      	add	r3, r2
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	f003 030f 	and.w	r3, r3, #15
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	4413      	add	r3, r2
 800b712:	b2db      	uxtb	r3, r3
}
 800b714:	4618      	mov	r0, r3
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800b724:	2101      	movs	r1, #1
 800b726:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b72a:	f7fe fb43 	bl	8009db4 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800b72e:	2100      	movs	r1, #0
 800b730:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b734:	f7fe fb3e 	bl	8009db4 <RCC_APB2PeriphResetCmd>
}
 800b738:	bf00      	nop
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800b748:	4b13      	ldr	r3, [pc, #76]	; (800b798 <SDIO_Init+0x5c>)
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b754:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b758:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7d1b      	ldrb	r3, [r3, #20]
 800b75e:	461a      	mov	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800b76a:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800b776:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	4313      	orrs	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800b784:	4a04      	ldr	r2, [pc, #16]	; (800b798 <SDIO_Init+0x5c>)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6053      	str	r3, [r2, #4]
}
 800b78a:	bf00      	nop
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	40012c00 	.word	0x40012c00

0800b79c <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	611a      	str	r2, [r3, #16]
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800b7de:	4a04      	ldr	r2, [pc, #16]	; (800b7f0 <SDIO_ClockCmd+0x1c>)
 800b7e0:	79fb      	ldrb	r3, [r7, #7]
 800b7e2:	6013      	str	r3, [r2, #0]
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	422580a0 	.word	0x422580a0

0800b7f4 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800b7fc:	4a04      	ldr	r2, [pc, #16]	; (800b810 <SDIO_SetPowerState+0x1c>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6013      	str	r3, [r2, #0]
}
 800b802:	bf00      	nop
 800b804:	370c      	adds	r7, #12
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	40012c00 	.word	0x40012c00

0800b814 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800b814:	b480      	push	{r7}
 800b816:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800b818:	4b04      	ldr	r3, [pc, #16]	; (800b82c <SDIO_GetPowerState+0x18>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0303 	and.w	r3, r3, #3
}
 800b820:	4618      	mov	r0, r3
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	40012c00 	.word	0x40012c00

0800b830 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800b83c:	4a11      	ldr	r2, [pc, #68]	; (800b884 <SDIO_SendCommand+0x54>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6093      	str	r3, [r2, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800b844:	4b0f      	ldr	r3, [pc, #60]	; (800b884 <SDIO_SendCommand+0x54>)
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b850:	f023 0307 	bic.w	r3, r3, #7
 800b854:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	431a      	orrs	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	4313      	orrs	r3, r2
 800b870:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800b872:	4a04      	ldr	r2, [pc, #16]	; (800b884 <SDIO_SendCommand+0x54>)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	60d3      	str	r3, [r2, #12]
}
 800b878:	bf00      	nop
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr
 800b884:	40012c00 	.word	0x40012c00

0800b888 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	611a      	str	r2, [r3, #16]
}
 800b8ae:	bf00      	nop
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop

0800b8bc <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800b8c0:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <SDIO_GetCommandResponse+0x14>)
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	b2db      	uxtb	r3, r3
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	40012c00 	.word	0x40012c00

0800b8d4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	4b05      	ldr	r3, [pc, #20]	; (800b8f8 <SDIO_GetResponse+0x24>)
 800b8e4:	4413      	add	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	40012c14 	.word	0x40012c14

0800b8fc <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800b908:	4a12      	ldr	r2, [pc, #72]	; (800b954 <SDIO_DataConfig+0x58>)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6253      	str	r3, [r2, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800b910:	4a10      	ldr	r2, [pc, #64]	; (800b954 <SDIO_DataConfig+0x58>)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	6293      	str	r3, [r2, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800b918:	4b0e      	ldr	r3, [pc, #56]	; (800b954 <SDIO_DataConfig+0x58>)
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800b924:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689a      	ldr	r2, [r3, #8]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	431a      	orrs	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	4313      	orrs	r3, r2
 800b940:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800b942:	4a04      	ldr	r2, [pc, #16]	; (800b954 <SDIO_DataConfig+0x58>)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b948:	bf00      	nop
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	40012c00 	.word	0x40012c00

0800b958 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f04f 32ff 	mov.w	r2, #4294967295
 800b966:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	615a      	str	r2, [r3, #20]
}
 800b986:	bf00      	nop
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop

0800b994 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800b994:	b480      	push	{r7}
 800b996:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800b998:	4b03      	ldr	r3, [pc, #12]	; (800b9a8 <SDIO_GetDataCounter+0x14>)
 800b99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	40012c00 	.word	0x40012c00

0800b9ac <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800b9b0:	4b03      	ldr	r3, [pc, #12]	; (800b9c0 <SDIO_ReadData+0x14>)
 800b9b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	40012c00 	.word	0x40012c00

0800b9c4 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800b9cc:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <SDIO_WriteData+0x1c>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	40012c00 	.word	0x40012c00

0800b9e4 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800b9e8:	4b03      	ldr	r3, [pc, #12]	; (800b9f8 <SDIO_GetFIFOCount+0x14>)
 800b9ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40012c00 	.word	0x40012c00

0800b9fc <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800ba06:	4a04      	ldr	r2, [pc, #16]	; (800ba18 <SDIO_StartSDIOReadWait+0x1c>)
 800ba08:	79fb      	ldrb	r3, [r7, #7]
 800ba0a:	6013      	str	r3, [r2, #0]
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	422585a0 	.word	0x422585a0

0800ba1c <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800ba26:	4a04      	ldr	r2, [pc, #16]	; (800ba38 <SDIO_StopSDIOReadWait+0x1c>)
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	6013      	str	r3, [r2, #0]
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	422585a4 	.word	0x422585a4

0800ba3c <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800ba44:	4a04      	ldr	r2, [pc, #16]	; (800ba58 <SDIO_SetSDIOReadWaitMode+0x1c>)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6013      	str	r3, [r2, #0]
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	422585a8 	.word	0x422585a8

0800ba5c <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800ba66:	4a04      	ldr	r2, [pc, #16]	; (800ba78 <SDIO_SetSDIOOperation+0x1c>)
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	6013      	str	r3, [r2, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	422585ac 	.word	0x422585ac

0800ba7c <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800ba86:	4a04      	ldr	r2, [pc, #16]	; (800ba98 <SDIO_SendSDIOSuspendCmd+0x1c>)
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	6013      	str	r3, [r2, #0]
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	422581ac 	.word	0x422581ac

0800ba9c <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	4603      	mov	r3, r0
 800baa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800baa6:	4a04      	ldr	r2, [pc, #16]	; (800bab8 <SDIO_CommandCompletionCmd+0x1c>)
 800baa8:	79fb      	ldrb	r3, [r7, #7]
 800baaa:	6013      	str	r3, [r2, #0]
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	422581b0 	.word	0x422581b0

0800babc <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800bac6:	4a08      	ldr	r2, [pc, #32]	; (800bae8 <SDIO_CEATAITCmd+0x2c>)
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bf0c      	ite	eq
 800bad2:	2301      	moveq	r3, #1
 800bad4:	2300      	movne	r3, #0
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	6013      	str	r3, [r2, #0]
}
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	422581b4 	.word	0x422581b4

0800baec <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	4603      	mov	r3, r0
 800baf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800baf6:	4a04      	ldr	r2, [pc, #16]	; (800bb08 <SDIO_SendCEATACmd+0x1c>)
 800baf8:	79fb      	ldrb	r3, [r7, #7]
 800bafa:	6013      	str	r3, [r2, #0]
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	422581b8 	.word	0x422581b8

0800bb0c <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	4603      	mov	r3, r0
 800bb14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800bb16:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <SDIO_DMACmd+0x1c>)
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	6013      	str	r3, [r2, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	4225858c 	.word	0x4225858c

0800bb2c <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d006      	beq.n	800bb4c <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800bb3e:	490a      	ldr	r1, [pc, #40]	; (800bb68 <SDIO_ITConfig+0x3c>)
 800bb40:	4b09      	ldr	r3, [pc, #36]	; (800bb68 <SDIO_ITConfig+0x3c>)
 800bb42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	63cb      	str	r3, [r1, #60]	; 0x3c
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
  } 
}
 800bb4a:	e006      	b.n	800bb5a <SDIO_ITConfig+0x2e>
    SDIO->MASK |= SDIO_IT;
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800bb4c:	4906      	ldr	r1, [pc, #24]	; (800bb68 <SDIO_ITConfig+0x3c>)
 800bb4e:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <SDIO_ITConfig+0x3c>)
 800bb50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	43db      	mvns	r3, r3
 800bb56:	4013      	ands	r3, r2
 800bb58:	63cb      	str	r3, [r1, #60]	; 0x3c
  } 
}
 800bb5a:	bf00      	nop
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	40012c00 	.word	0x40012c00

0800bb6c <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800bb74:	2300      	movs	r3, #0
 800bb76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800bb78:	4b08      	ldr	r3, [pc, #32]	; (800bb9c <SDIO_GetFlagStatus+0x30>)
 800bb7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4013      	ands	r3, r2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800bb84:	2301      	movs	r3, #1
 800bb86:	73fb      	strb	r3, [r7, #15]
 800bb88:	e001      	b.n	800bb8e <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	40012c00 	.word	0x40012c00

0800bba0 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800bba8:	4a04      	ldr	r2, [pc, #16]	; (800bbbc <SDIO_ClearFlag+0x1c>)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6393      	str	r3, [r2, #56]	; 0x38
}
 800bbae:	bf00      	nop
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	40012c00 	.word	0x40012c00

0800bbc0 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800bbcc:	4b08      	ldr	r3, [pc, #32]	; (800bbf0 <SDIO_GetITStatus+0x30>)
 800bbce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	73fb      	strb	r3, [r7, #15]
 800bbdc:	e001      	b.n	800bbe2 <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	40012c00 	.word	0x40012c00

0800bbf4 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800bbfc:	4a04      	ldr	r2, [pc, #16]	; (800bc10 <SDIO_ClearITPendingBit+0x1c>)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6393      	str	r3, [r2, #56]	; 0x38
}
 800bc02:	bf00      	nop
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	40012c00 	.word	0x40012c00

0800bc14 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a2e      	ldr	r2, [pc, #184]	; (800bcd8 <SPI_I2S_DeInit+0xc4>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d10a      	bne.n	800bc3a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800bc24:	2101      	movs	r1, #1
 800bc26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bc2a:	f7fe f8c3 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800bc2e:	2100      	movs	r1, #0
 800bc30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bc34:	f7fe f8be 	bl	8009db4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800bc38:	e049      	b.n	800bcce <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a27      	ldr	r2, [pc, #156]	; (800bcdc <SPI_I2S_DeInit+0xc8>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d10a      	bne.n	800bc58 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800bc42:	2101      	movs	r1, #1
 800bc44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bc48:	f7fe f894 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bc52:	f7fe f88f 	bl	8009d74 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800bc56:	e03a      	b.n	800bcce <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a21      	ldr	r2, [pc, #132]	; (800bce0 <SPI_I2S_DeInit+0xcc>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d10a      	bne.n	800bc76 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800bc60:	2101      	movs	r1, #1
 800bc62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bc66:	f7fe f885 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bc70:	f7fe f880 	bl	8009d74 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800bc74:	e02b      	b.n	800bcce <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a1a      	ldr	r2, [pc, #104]	; (800bce4 <SPI_I2S_DeInit+0xd0>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d10a      	bne.n	800bc94 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 800bc7e:	2101      	movs	r1, #1
 800bc80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bc84:	f7fe f896 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 800bc88:	2100      	movs	r1, #0
 800bc8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bc8e:	f7fe f891 	bl	8009db4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800bc92:	e01c      	b.n	800bcce <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a14      	ldr	r2, [pc, #80]	; (800bce8 <SPI_I2S_DeInit+0xd4>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d10a      	bne.n	800bcb2 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bca2:	f7fe f887 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800bca6:	2100      	movs	r1, #0
 800bca8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bcac:	f7fe f882 	bl	8009db4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800bcb0:	e00d      	b.n	800bcce <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a0d      	ldr	r2, [pc, #52]	; (800bcec <SPI_I2S_DeInit+0xd8>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d109      	bne.n	800bcce <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800bcba:	2101      	movs	r1, #1
 800bcbc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bcc0:	f7fe f878 	bl	8009db4 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bcca:	f7fe f873 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	40013000 	.word	0x40013000
 800bcdc:	40003800 	.word	0x40003800
 800bce0:	40003c00 	.word	0x40003c00
 800bce4:	40013400 	.word	0x40013400
 800bce8:	40015000 	.word	0x40015000
 800bcec:	40015400 	.word	0x40015400

0800bcf0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	881b      	ldrh	r3, [r3, #0]
 800bd02:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800bd04:	89fb      	ldrh	r3, [r7, #14]
 800bd06:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800bd0a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	881a      	ldrh	r2, [r3, #0]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	885b      	ldrh	r3, [r3, #2]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800bd24:	4313      	orrs	r3, r2
 800bd26:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800bd34:	4313      	orrs	r3, r2
 800bd36:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800bd44:	4313      	orrs	r3, r2
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	89fb      	ldrh	r3, [r7, #14]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	89fa      	ldrh	r2, [r7, #14]
 800bd52:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	8b9b      	ldrh	r3, [r3, #28]
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	8a1a      	ldrh	r2, [r3, #16]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	821a      	strh	r2, [r3, #16]
}
 800bd6c:	bf00      	nop
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b08b      	sub	sp, #44	; 0x2c
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800bd82:	2300      	movs	r3, #0
 800bd84:	837b      	strh	r3, [r7, #26]
 800bd86:	2302      	movs	r3, #2
 800bd88:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bd8e:	2301      	movs	r3, #1
 800bd90:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	61fb      	str	r3, [r7, #28]
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	613b      	str	r3, [r7, #16]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60fb      	str	r3, [r7, #12]
 800bda2:	2300      	movs	r3, #0
 800bda4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8b9b      	ldrh	r3, [r3, #28]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800bdb0:	f023 030f 	bic.w	r3, r3, #15
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	8b9b      	ldrh	r3, [r3, #28]
 800bdc4:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d104      	bne.n	800bdd8 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bdd6:	e072      	b.n	800bebe <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	889b      	ldrh	r3, [r3, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d102      	bne.n	800bde6 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800bde0:	2301      	movs	r3, #1
 800bde2:	847b      	strh	r3, [r7, #34]	; 0x22
 800bde4:	e001      	b.n	800bdea <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800bde6:	2302      	movs	r3, #2
 800bde8:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800bdea:	4b4d      	ldr	r3, [pc, #308]	; (800bf20 <I2S_Init+0x1a8>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d005      	beq.n	800be02 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800bdf6:	4a4a      	ldr	r2, [pc, #296]	; (800bf20 <I2S_Init+0x1a8>)
 800bdf8:	4b49      	ldr	r3, [pc, #292]	; (800bf20 <I2S_Init+0x1a8>)
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be00:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800be02:	4b47      	ldr	r3, [pc, #284]	; (800bf20 <I2S_Init+0x1a8>)
 800be04:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800be08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800be0c:	4013      	ands	r3, r2
 800be0e:	099b      	lsrs	r3, r3, #6
 800be10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be14:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800be16:	4b42      	ldr	r3, [pc, #264]	; (800bf20 <I2S_Init+0x1a8>)
 800be18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be1c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800be20:	0f1b      	lsrs	r3, r3, #28
 800be22:	f003 0307 	and.w	r3, r3, #7
 800be26:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800be28:	4b3d      	ldr	r3, [pc, #244]	; (800bf20 <I2S_Init+0x1a8>)
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be30:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800be32:	4a3c      	ldr	r2, [pc, #240]	; (800bf24 <I2S_Init+0x1ac>)
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	fb02 f203 	mul.w	r2, r2, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	fbb2 f3f3 	udiv	r3, r2, r3
 800be46:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	88db      	ldrh	r3, [r3, #6]
 800be4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be50:	d10f      	bne.n	800be72 <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	0a1a      	lsrs	r2, r3, #8
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	461a      	mov	r2, r3
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	fbb2 f3f3 	udiv	r3, r2, r3
 800be68:	b29b      	uxth	r3, r3
 800be6a:	3305      	adds	r3, #5
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	61fb      	str	r3, [r7, #28]
 800be70:	e012      	b.n	800be98 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800be72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be74:	015b      	lsls	r3, r3, #5
 800be76:	461a      	mov	r2, r3
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800be7e:	4613      	mov	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	461a      	mov	r2, r3
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be90:	b29b      	uxth	r3, r3
 800be92:	3305      	adds	r3, #5
 800be94:	b29b      	uxth	r3, r3
 800be96:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	4a23      	ldr	r2, [pc, #140]	; (800bf28 <I2S_Init+0x1b0>)
 800be9c:	fba2 2303 	umull	r2, r3, r2, r3
 800bea0:	08db      	lsrs	r3, r3, #3
 800bea2:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800beae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beb0:	69fa      	ldr	r2, [r7, #28]
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	085b      	lsrs	r3, r3, #1
 800beb6:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800beb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beba:	021b      	lsls	r3, r3, #8
 800bebc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800bebe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d902      	bls.n	800beca <I2S_Init+0x152>
 800bec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bec6:	2bff      	cmp	r3, #255	; 0xff
 800bec8:	d903      	bls.n	800bed2 <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 800beca:	2302      	movs	r3, #2
 800becc:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88da      	ldrh	r2, [r3, #6]
 800bed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bed8:	4313      	orrs	r3, r2
 800beda:	b29a      	uxth	r2, r3
 800bedc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bede:	4313      	orrs	r3, r2
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	8859      	ldrh	r1, [r3, #2]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800bef6:	4303      	orrs	r3, r0
 800bef8:	b29b      	uxth	r3, r3
 800befa:	430b      	orrs	r3, r1
 800befc:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800befe:	4313      	orrs	r3, r2
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	8b7b      	ldrh	r3, [r7, #26]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf0c:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	8b7a      	ldrh	r2, [r7, #26]
 800bf12:	839a      	strh	r2, [r3, #28]
}
 800bf14:	bf00      	nop
 800bf16:	372c      	adds	r7, #44	; 0x2c
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	40023800 	.word	0x40023800
 800bf24:	017d7840 	.word	0x017d7840
 800bf28:	cccccccd 	.word	0xcccccccd

0800bf2c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2207      	movs	r2, #7
 800bf68:	821a      	strh	r2, [r3, #16]
}
 800bf6a:	bf00      	nop
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop

0800bf78 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	819a      	strh	r2, [r3, #12]
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d008      	beq.n	800bfd4 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800bfd2:	e007      	b.n	800bfe4 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	801a      	strh	r2, [r3, #0]
  }
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d008      	beq.n	800c014 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	8b9b      	ldrh	r3, [r3, #28]
 800c006:	b29b      	uxth	r3, r3
 800c008:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800c012:	e007      	b.n	800c024 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	8b9b      	ldrh	r3, [r3, #28]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c01e:	b29a      	uxth	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	839a      	strh	r2, [r3, #28]
  }
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	b29b      	uxth	r3, r3
 800c042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c046:	b29a      	uxth	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	b29a      	uxth	r2, r3
 800c052:	887b      	ldrh	r3, [r7, #2]
 800c054:	4313      	orrs	r3, r2
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	801a      	strh	r2, [r3, #0]
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800c074:	887b      	ldrh	r3, [r7, #2]
 800c076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c07a:	d108      	bne.n	800c08e <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	b29b      	uxth	r3, r3
 800c082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c086:	b29a      	uxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  }
}
 800c08c:	e007      	b.n	800c09e <SPI_BiDirectionalLineConfig+0x36>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	b29b      	uxth	r3, r3
 800c094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	801a      	strh	r2, [r3, #0]
  }
}
 800c09e:	bf00      	nop
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop

0800c0ac <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800c0b8:	887b      	ldrh	r3, [r7, #2]
 800c0ba:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d008      	beq.n	800c0d4 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  }
}
 800c0d2:	e007      	b.n	800c0e4 <SPI_NSSInternalSoftwareConfig+0x38>
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	801a      	strh	r2, [r3, #0]
  }
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d008      	beq.n	800c114 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	889b      	ldrh	r3, [r3, #4]
 800c106:	b29b      	uxth	r3, r3
 800c108:	f043 0304 	orr.w	r3, r3, #4
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
  }
}
 800c112:	e007      	b.n	800c124 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	889b      	ldrh	r3, [r3, #4]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	f023 0304 	bic.w	r3, r3, #4
 800c11e:	b29a      	uxth	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	809a      	strh	r2, [r3, #4]
  }
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c13c:	78fb      	ldrb	r3, [r7, #3]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d008      	beq.n	800c154 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	889b      	ldrh	r3, [r3, #4]
 800c146:	b29b      	uxth	r3, r3
 800c148:	f043 0310 	orr.w	r3, r3, #16
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
  }
}
 800c152:	e007      	b.n	800c164 <SPI_TIModeCmd+0x34>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	889b      	ldrh	r3, [r3, #4]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	f023 0310 	bic.w	r3, r3, #16
 800c15e:	b29a      	uxth	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	809a      	strh	r2, [r3, #4]
  }
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	81bb      	strh	r3, [r7, #12]
 800c17e:	2300      	movs	r3, #0
 800c180:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	8b9b      	ldrh	r3, [r3, #28]
 800c186:	b29b      	uxth	r3, r3
 800c188:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800c18c:	f023 030f 	bic.w	r3, r3, #15
 800c190:	b29a      	uxth	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2202      	movs	r2, #2
 800c19a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	8b9b      	ldrh	r3, [r3, #28]
 800c1a0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1aa:	d003      	beq.n	800c1b4 <I2S_FullDuplexConfig+0x44>
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d103      	bne.n	800c1bc <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 800c1b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1b8:	81fb      	strh	r3, [r7, #14]
 800c1ba:	e00b      	b.n	800c1d4 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	881b      	ldrh	r3, [r3, #0]
 800c1c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1c4:	d004      	beq.n	800c1d0 <I2S_FullDuplexConfig+0x60>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ce:	d101      	bne.n	800c1d4 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	885a      	ldrh	r2, [r3, #2]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c1e0:	430b      	orrs	r3, r1
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800c1e8:	89fb      	ldrh	r3, [r7, #14]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	89bb      	ldrh	r3, [r7, #12]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c1f8:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	89ba      	ldrh	r2, [r7, #12]
 800c1fe:	839a      	strh	r2, [r3, #28]
}
 800c200:	bf00      	nop
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	899b      	ldrh	r3, [r3, #12]
 800c218:	b29b      	uxth	r3, r3
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop

0800c228 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	887a      	ldrh	r2, [r7, #2]
 800c238:	819a      	strh	r2, [r3, #12]
}
 800c23a:	bf00      	nop
 800c23c:	370c      	adds	r7, #12
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop

0800c248 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d008      	beq.n	800c26c <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c264:	b29a      	uxth	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 800c26a:	e007      	b.n	800c27c <SPI_CalculateCRC+0x34>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	b29b      	uxth	r3, r3
 800c272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c276:	b29a      	uxth	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	801a      	strh	r2, [r3, #0]
  }
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	881b      	ldrh	r3, [r3, #0]
 800c294:	b29b      	uxth	r3, r3
 800c296:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	801a      	strh	r2, [r3, #0]
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d003      	beq.n	800c2ca <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	8b1b      	ldrh	r3, [r3, #24]
 800c2c6:	81fb      	strh	r3, [r7, #14]
 800c2c8:	e002      	b.n	800c2d0 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	8a9b      	ldrh	r3, [r3, #20]
 800c2ce:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800c2d0:	89fb      	ldrh	r3, [r7, #14]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop

0800c2e0 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8a1b      	ldrh	r3, [r3, #16]
 800c2ec:	b29b      	uxth	r3, r3
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop

0800c2fc <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	807b      	strh	r3, [r7, #2]
 800c308:	4613      	mov	r3, r2
 800c30a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800c30c:	787b      	ldrb	r3, [r7, #1]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d008      	beq.n	800c324 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	889b      	ldrh	r3, [r3, #4]
 800c316:	b29a      	uxth	r2, r3
 800c318:	887b      	ldrh	r3, [r7, #2]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800c322:	e009      	b.n	800c338 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	889b      	ldrh	r3, [r3, #4]
 800c328:	b29a      	uxth	r2, r3
 800c32a:	887b      	ldrh	r3, [r7, #2]
 800c32c:	43db      	mvns	r3, r3
 800c32e:	b29b      	uxth	r3, r3
 800c330:	4013      	ands	r3, r2
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	809a      	strh	r2, [r3, #4]
  }
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	460b      	mov	r3, r1
 800c34e:	70fb      	strb	r3, [r7, #3]
 800c350:	4613      	mov	r3, r2
 800c352:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800c354:	2300      	movs	r3, #0
 800c356:	81fb      	strh	r3, [r7, #14]
 800c358:	2300      	movs	r3, #0
 800c35a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800c35c:	78fb      	ldrb	r3, [r7, #3]
 800c35e:	091b      	lsrs	r3, r3, #4
 800c360:	b2db      	uxtb	r3, r3
 800c362:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800c364:	89fb      	ldrh	r3, [r7, #14]
 800c366:	2201      	movs	r2, #1
 800c368:	fa02 f303 	lsl.w	r3, r2, r3
 800c36c:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800c36e:	78bb      	ldrb	r3, [r7, #2]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d008      	beq.n	800c386 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	889b      	ldrh	r3, [r3, #4]
 800c378:	b29a      	uxth	r2, r3
 800c37a:	89bb      	ldrh	r3, [r7, #12]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	b29a      	uxth	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 800c384:	e009      	b.n	800c39a <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	889b      	ldrh	r3, [r3, #4]
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	89bb      	ldrh	r3, [r7, #12]
 800c38e:	43db      	mvns	r3, r3
 800c390:	b29b      	uxth	r3, r3
 800c392:	4013      	ands	r3, r2
 800c394:	b29a      	uxth	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	809a      	strh	r2, [r3, #4]
  }
}
 800c39a:	bf00      	nop
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop

0800c3a8 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	891b      	ldrh	r3, [r3, #8]
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	887b      	ldrh	r3, [r7, #2]
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	73fb      	strb	r3, [r7, #15]
 800c3cc:	e001      	b.n	800c3d2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3714      	adds	r7, #20
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800c3ec:	887b      	ldrh	r3, [r7, #2]
 800c3ee:	43db      	mvns	r3, r3
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	811a      	strh	r2, [r3, #8]
}
 800c3f6:	bf00      	nop
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop

0800c404 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	81bb      	strh	r3, [r7, #12]
 800c418:	2300      	movs	r3, #0
 800c41a:	817b      	strh	r3, [r7, #10]
 800c41c:	2300      	movs	r3, #0
 800c41e:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800c420:	78fb      	ldrb	r3, [r7, #3]
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	2201      	movs	r2, #1
 800c428:	fa02 f303 	lsl.w	r3, r2, r3
 800c42c:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800c42e:	78fb      	ldrb	r3, [r7, #3]
 800c430:	091b      	lsrs	r3, r3, #4
 800c432:	b2db      	uxtb	r3, r3
 800c434:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800c436:	897b      	ldrh	r3, [r7, #10]
 800c438:	2201      	movs	r2, #1
 800c43a:	fa02 f303 	lsl.w	r3, r2, r3
 800c43e:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	889b      	ldrh	r3, [r3, #4]
 800c444:	b29a      	uxth	r2, r3
 800c446:	897b      	ldrh	r3, [r7, #10]
 800c448:	4013      	ands	r3, r2
 800c44a:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	891b      	ldrh	r3, [r3, #8]
 800c450:	b29a      	uxth	r2, r3
 800c452:	89bb      	ldrh	r3, [r7, #12]
 800c454:	4013      	ands	r3, r2
 800c456:	b29b      	uxth	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <SPI_I2S_GetITStatus+0x64>
 800c45c:	893b      	ldrh	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d002      	beq.n	800c468 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800c462:	2301      	movs	r3, #1
 800c464:	73fb      	strb	r3, [r7, #15]
 800c466:	e001      	b.n	800c46c <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800c468:	2300      	movs	r3, #0
 800c46a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop

0800c47c <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	460b      	mov	r3, r1
 800c486:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800c48c:	78fb      	ldrb	r3, [r7, #3]
 800c48e:	f003 030f 	and.w	r3, r3, #15
 800c492:	2201      	movs	r2, #1
 800c494:	fa02 f303 	lsl.w	r3, r2, r3
 800c498:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800c49a:	89fb      	ldrh	r3, [r7, #14]
 800c49c:	43db      	mvns	r3, r3
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	811a      	strh	r2, [r3, #8]
}
 800c4a4:	bf00      	nop
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c4ba:	f7fd fc7b 	bl	8009db4 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800c4be:	2100      	movs	r1, #0
 800c4c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c4c4:	f7fd fc76 	bl	8009db4 <RCC_APB2PeriphResetCmd>
}
 800c4c8:	bf00      	nop
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000   
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000          
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800c4d6:	4a04      	ldr	r2, [pc, #16]	; (800c4e8 <SYSCFG_MemoryRemapConfig+0x1c>)
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	6013      	str	r3, [r2, #0]
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	40013800 	.word	0x40013800

0800c4ec <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800c4ec:	b490      	push	{r4, r7}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	460a      	mov	r2, r1
 800c4f6:	71fb      	strb	r3, [r7, #7]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800c500:	79bb      	ldrb	r3, [r7, #6]
 800c502:	f003 0303 	and.w	r3, r3, #3
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	220f      	movs	r2, #15
 800c50a:	fa02 f303 	lsl.w	r3, r2, r3
 800c50e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800c510:	4916      	ldr	r1, [pc, #88]	; (800c56c <SYSCFG_EXTILineConfig+0x80>)
 800c512:	79bb      	ldrb	r3, [r7, #6]
 800c514:	089b      	lsrs	r3, r3, #2
 800c516:	b2db      	uxtb	r3, r3
 800c518:	4618      	mov	r0, r3
 800c51a:	4a14      	ldr	r2, [pc, #80]	; (800c56c <SYSCFG_EXTILineConfig+0x80>)
 800c51c:	79bb      	ldrb	r3, [r7, #6]
 800c51e:	089b      	lsrs	r3, r3, #2
 800c520:	b2db      	uxtb	r3, r3
 800c522:	3302      	adds	r3, #2
 800c524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	43db      	mvns	r3, r3
 800c52c:	401a      	ands	r2, r3
 800c52e:	1c83      	adds	r3, r0, #2
 800c530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800c534:	480d      	ldr	r0, [pc, #52]	; (800c56c <SYSCFG_EXTILineConfig+0x80>)
 800c536:	79bb      	ldrb	r3, [r7, #6]
 800c538:	089b      	lsrs	r3, r3, #2
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	461c      	mov	r4, r3
 800c53e:	4a0b      	ldr	r2, [pc, #44]	; (800c56c <SYSCFG_EXTILineConfig+0x80>)
 800c540:	79bb      	ldrb	r3, [r7, #6]
 800c542:	089b      	lsrs	r3, r3, #2
 800c544:	b2db      	uxtb	r3, r3
 800c546:	3302      	adds	r3, #2
 800c548:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c54c:	79f9      	ldrb	r1, [r7, #7]
 800c54e:	79bb      	ldrb	r3, [r7, #6]
 800c550:	f003 0303 	and.w	r3, r3, #3
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	fa01 f303 	lsl.w	r3, r1, r3
 800c55a:	431a      	orrs	r2, r3
 800c55c:	1ca3      	adds	r3, r4, #2
 800c55e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800c562:	bf00      	nop
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bc90      	pop	{r4, r7}
 800c56a:	4770      	bx	lr
 800c56c:	40013800 	.word	0x40013800

0800c570 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800c578:	4a04      	ldr	r2, [pc, #16]	; (800c58c <SYSCFG_ETH_MediaInterfaceConfig+0x1c>)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6013      	str	r3, [r2, #0]
}
 800c57e:	bf00      	nop
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	422700dc 	.word	0x422700dc

0800c590 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	4603      	mov	r3, r0
 800c598:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800c59a:	4a04      	ldr	r2, [pc, #16]	; (800c5ac <SYSCFG_CompensationCellCmd+0x1c>)
 800c59c:	79fb      	ldrb	r3, [r7, #7]
 800c59e:	6013      	str	r3, [r2, #0]
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	42270400 	.word	0x42270400

0800c5b0 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800c5ba:	4b09      	ldr	r3, [pc, #36]	; (800c5e0 <SYSCFG_GetCompensationCellStatus+0x30>)
 800c5bc:	6a1b      	ldr	r3, [r3, #32]
 800c5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	71fb      	strb	r3, [r7, #7]
 800c5ca:	e001      	b.n	800c5d0 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800c5d0:	79fb      	ldrb	r3, [r7, #7]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	40013800 	.word	0x40013800

0800c5e4 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a60      	ldr	r2, [pc, #384]	; (800c770 <TIM_DeInit+0x18c>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d108      	bne.n	800c606 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800c5f4:	2101      	movs	r1, #1
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	f7fd fbdc 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	2001      	movs	r0, #1
 800c600:	f7fd fbd8 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c604:	e0af      	b.n	800c766 <TIM_DeInit+0x182>
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60c:	d108      	bne.n	800c620 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800c60e:	2101      	movs	r1, #1
 800c610:	2001      	movs	r0, #1
 800c612:	f7fd fbaf 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800c616:	2100      	movs	r1, #0
 800c618:	2001      	movs	r0, #1
 800c61a:	f7fd fbab 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c61e:	e0a2      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a54      	ldr	r2, [pc, #336]	; (800c774 <TIM_DeInit+0x190>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d108      	bne.n	800c63a <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800c628:	2101      	movs	r1, #1
 800c62a:	2002      	movs	r0, #2
 800c62c:	f7fd fba2 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800c630:	2100      	movs	r1, #0
 800c632:	2002      	movs	r0, #2
 800c634:	f7fd fb9e 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c638:	e095      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a4e      	ldr	r2, [pc, #312]	; (800c778 <TIM_DeInit+0x194>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d108      	bne.n	800c654 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800c642:	2101      	movs	r1, #1
 800c644:	2004      	movs	r0, #4
 800c646:	f7fd fb95 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800c64a:	2100      	movs	r1, #0
 800c64c:	2004      	movs	r0, #4
 800c64e:	f7fd fb91 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c652:	e088      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a49      	ldr	r2, [pc, #292]	; (800c77c <TIM_DeInit+0x198>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d108      	bne.n	800c66e <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800c65c:	2101      	movs	r1, #1
 800c65e:	2008      	movs	r0, #8
 800c660:	f7fd fb88 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800c664:	2100      	movs	r1, #0
 800c666:	2008      	movs	r0, #8
 800c668:	f7fd fb84 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c66c:	e07b      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a43      	ldr	r2, [pc, #268]	; (800c780 <TIM_DeInit+0x19c>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d108      	bne.n	800c688 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800c676:	2101      	movs	r1, #1
 800c678:	2010      	movs	r0, #16
 800c67a:	f7fd fb7b 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800c67e:	2100      	movs	r1, #0
 800c680:	2010      	movs	r0, #16
 800c682:	f7fd fb77 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c686:	e06e      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a3e      	ldr	r2, [pc, #248]	; (800c784 <TIM_DeInit+0x1a0>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d108      	bne.n	800c6a2 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800c690:	2101      	movs	r1, #1
 800c692:	2020      	movs	r0, #32
 800c694:	f7fd fb6e 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800c698:	2100      	movs	r1, #0
 800c69a:	2020      	movs	r0, #32
 800c69c:	f7fd fb6a 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c6a0:	e061      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a38      	ldr	r2, [pc, #224]	; (800c788 <TIM_DeInit+0x1a4>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d108      	bne.n	800c6bc <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	2002      	movs	r0, #2
 800c6ae:	f7fd fb81 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	2002      	movs	r0, #2
 800c6b6:	f7fd fb7d 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c6ba:	e054      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a33      	ldr	r2, [pc, #204]	; (800c78c <TIM_DeInit+0x1a8>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d10a      	bne.n	800c6da <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c6ca:	f7fd fb73 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c6d4:	f7fd fb6e 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c6d8:	e045      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a2c      	ldr	r2, [pc, #176]	; (800c790 <TIM_DeInit+0x1ac>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d10a      	bne.n	800c6f8 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c6e8:	f7fd fb64 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c6f2:	f7fd fb5f 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c6f6:	e036      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a26      	ldr	r2, [pc, #152]	; (800c794 <TIM_DeInit+0x1b0>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d10a      	bne.n	800c716 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800c700:	2101      	movs	r1, #1
 800c702:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c706:	f7fd fb55 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800c70a:	2100      	movs	r1, #0
 800c70c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c710:	f7fd fb50 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c714:	e027      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a1f      	ldr	r2, [pc, #124]	; (800c798 <TIM_DeInit+0x1b4>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d108      	bne.n	800c730 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800c71e:	2101      	movs	r1, #1
 800c720:	2040      	movs	r0, #64	; 0x40
 800c722:	f7fd fb27 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800c726:	2100      	movs	r1, #0
 800c728:	2040      	movs	r0, #64	; 0x40
 800c72a:	f7fd fb23 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c72e:	e01a      	b.n	800c766 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a1a      	ldr	r2, [pc, #104]	; (800c79c <TIM_DeInit+0x1b8>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d108      	bne.n	800c74a <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800c738:	2101      	movs	r1, #1
 800c73a:	2080      	movs	r0, #128	; 0x80
 800c73c:	f7fd fb1a 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800c740:	2100      	movs	r1, #0
 800c742:	2080      	movs	r0, #128	; 0x80
 800c744:	f7fd fb16 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800c748:	e00d      	b.n	800c766 <TIM_DeInit+0x182>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a14      	ldr	r2, [pc, #80]	; (800c7a0 <TIM_DeInit+0x1bc>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d109      	bne.n	800c766 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800c752:	2101      	movs	r1, #1
 800c754:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c758:	f7fd fb0c 	bl	8009d74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800c75c:	2100      	movs	r1, #0
 800c75e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c762:	f7fd fb07 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	40010000 	.word	0x40010000
 800c774:	40000400 	.word	0x40000400
 800c778:	40000800 	.word	0x40000800
 800c77c:	40000c00 	.word	0x40000c00
 800c780:	40001000 	.word	0x40001000
 800c784:	40001400 	.word	0x40001400
 800c788:	40010400 	.word	0x40010400
 800c78c:	40014000 	.word	0x40014000
 800c790:	40014400 	.word	0x40014400
 800c794:	40014800 	.word	0x40014800
 800c798:	40001800 	.word	0x40001800
 800c79c:	40001c00 	.word	0x40001c00
 800c7a0:	40002000 	.word	0x40002000

0800c7a4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a29      	ldr	r2, [pc, #164]	; (800c860 <TIM_TimeBaseInit+0xbc>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d013      	beq.n	800c7e8 <TIM_TimeBaseInit+0x44>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a28      	ldr	r2, [pc, #160]	; (800c864 <TIM_TimeBaseInit+0xc0>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d00f      	beq.n	800c7e8 <TIM_TimeBaseInit+0x44>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ce:	d00b      	beq.n	800c7e8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a25      	ldr	r2, [pc, #148]	; (800c868 <TIM_TimeBaseInit+0xc4>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d007      	beq.n	800c7e8 <TIM_TimeBaseInit+0x44>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a24      	ldr	r2, [pc, #144]	; (800c86c <TIM_TimeBaseInit+0xc8>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d003      	beq.n	800c7e8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a23      	ldr	r2, [pc, #140]	; (800c870 <TIM_TimeBaseInit+0xcc>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d108      	bne.n	800c7fa <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800c7e8:	89fb      	ldrh	r3, [r7, #14]
 800c7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ee:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	885a      	ldrh	r2, [r3, #2]
 800c7f4:	89fb      	ldrh	r3, [r7, #14]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a1d      	ldr	r2, [pc, #116]	; (800c874 <TIM_TimeBaseInit+0xd0>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d00c      	beq.n	800c81c <TIM_TimeBaseInit+0x78>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a1c      	ldr	r2, [pc, #112]	; (800c878 <TIM_TimeBaseInit+0xd4>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d008      	beq.n	800c81c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800c80a:	89fb      	ldrh	r3, [r7, #14]
 800c80c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c810:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	891a      	ldrh	r2, [r3, #8]
 800c816:	89fb      	ldrh	r3, [r7, #14]
 800c818:	4313      	orrs	r3, r2
 800c81a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	89fa      	ldrh	r2, [r7, #14]
 800c820:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	685a      	ldr	r2, [r3, #4]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	881a      	ldrh	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a0a      	ldr	r2, [pc, #40]	; (800c860 <TIM_TimeBaseInit+0xbc>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d003      	beq.n	800c842 <TIM_TimeBaseInit+0x9e>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a09      	ldr	r2, [pc, #36]	; (800c864 <TIM_TimeBaseInit+0xc0>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d104      	bne.n	800c84c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	7a9b      	ldrb	r3, [r3, #10]
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	829a      	strh	r2, [r3, #20]
}
 800c852:	bf00      	nop
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	40010000 	.word	0x40010000
 800c864:	40010400 	.word	0x40010400
 800c868:	40000400 	.word	0x40000400
 800c86c:	40000800 	.word	0x40000800
 800c870:	40000c00 	.word	0x40000c00
 800c874:	40001000 	.word	0x40001000
 800c878:	40001400 	.word	0x40001400

0800c87c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f04f 32ff 	mov.w	r2, #4294967295
 800c88a:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	729a      	strb	r2, [r3, #10]
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	807b      	strh	r3, [r7, #2]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	887a      	ldrh	r2, [r7, #2]
 800c8c4:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	883a      	ldrh	r2, [r7, #0]
 800c8ca:	829a      	strh	r2, [r3, #20]
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8ee:	89fb      	ldrh	r3, [r7, #14]
 800c8f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8f4:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800c8f6:	89fa      	ldrh	r2, [r7, #14]
 800c8f8:	887b      	ldrh	r3, [r7, #2]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	89fa      	ldrh	r2, [r7, #14]
 800c902:	801a      	strh	r2, [r3, #0]
}
 800c904:	bf00      	nop
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800c954:	4618      	mov	r0, r3
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c96c:	b29b      	uxth	r3, r3
}
 800c96e:	4618      	mov	r0, r3
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop

0800c97c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c988:	78fb      	ldrb	r3, [r7, #3]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d008      	beq.n	800c9a0 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	b29b      	uxth	r3, r3
 800c994:	f043 0302 	orr.w	r3, r3, #2
 800c998:	b29a      	uxth	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
 800c99e:	e007      	b.n	800c9b0 <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	881b      	ldrh	r3, [r3, #0]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	f023 0302 	bic.w	r3, r3, #2
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	801a      	strh	r2, [r3, #0]
  }
}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800c9c8:	887b      	ldrh	r3, [r7, #2]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	881b      	ldrh	r3, [r3, #0]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	f043 0304 	orr.w	r3, r3, #4
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 800c9de:	e007      	b.n	800c9f0 <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	f023 0304 	bic.w	r3, r3, #4
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	801a      	strh	r2, [r3, #0]
  }
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ca08:	78fb      	ldrb	r3, [r7, #3]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d008      	beq.n	800ca20 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800ca1e:	e007      	b.n	800ca30 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	801a      	strh	r2, [r3, #0]
  }
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	f023 0308 	bic.w	r3, r3, #8
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	881b      	ldrh	r3, [r3, #0]
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	887b      	ldrh	r3, [r7, #2]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	801a      	strh	r2, [r3, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	881b      	ldrh	r3, [r3, #0]
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	887b      	ldrh	r3, [r7, #2]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	801a      	strh	r2, [r3, #0]
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	460b      	mov	r3, r1
 800cab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cab8:	78fb      	ldrb	r3, [r7, #3]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d008      	beq.n	800cad0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	f043 0301 	orr.w	r3, r3, #1
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800cace:	e007      	b.n	800cae0 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	881b      	ldrh	r3, [r3, #0]
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	f023 0301 	bic.w	r3, r3, #1
 800cada:	b29a      	uxth	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	801a      	strh	r2, [r3, #0]
  }
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	817b      	strh	r3, [r7, #10]
 800cafa:	2300      	movs	r3, #0
 800cafc:	81fb      	strh	r3, [r7, #14]
 800cafe:	2300      	movs	r3, #0
 800cb00:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	8c1b      	ldrh	r3, [r3, #32]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f023 0301 	bic.w	r3, r3, #1
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8c1b      	ldrh	r3, [r3, #32]
 800cb16:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	889b      	ldrh	r3, [r3, #4]
 800cb1c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	8b1b      	ldrh	r3, [r3, #24]
 800cb22:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800cb24:	897b      	ldrh	r3, [r7, #10]
 800cb26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb2a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800cb2c:	897b      	ldrh	r3, [r7, #10]
 800cb2e:	f023 0303 	bic.w	r3, r3, #3
 800cb32:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	881a      	ldrh	r2, [r3, #0]
 800cb38:	897b      	ldrh	r3, [r7, #10]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800cb3e:	89fb      	ldrh	r3, [r7, #14]
 800cb40:	f023 0302 	bic.w	r3, r3, #2
 800cb44:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	899a      	ldrh	r2, [r3, #12]
 800cb4a:	89fb      	ldrh	r3, [r7, #14]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	885a      	ldrh	r2, [r3, #2]
 800cb54:	89fb      	ldrh	r3, [r7, #14]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a1e      	ldr	r2, [pc, #120]	; (800cbd8 <TIM_OC1Init+0xec>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d003      	beq.n	800cb6a <TIM_OC1Init+0x7e>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a1d      	ldr	r2, [pc, #116]	; (800cbdc <TIM_OC1Init+0xf0>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d123      	bne.n	800cbb2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800cb6a:	89fb      	ldrh	r3, [r7, #14]
 800cb6c:	f023 0308 	bic.w	r3, r3, #8
 800cb70:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	89da      	ldrh	r2, [r3, #14]
 800cb76:	89fb      	ldrh	r3, [r7, #14]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800cb7c:	89fb      	ldrh	r3, [r7, #14]
 800cb7e:	f023 0304 	bic.w	r3, r3, #4
 800cb82:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	889a      	ldrh	r2, [r3, #4]
 800cb88:	89fb      	ldrh	r3, [r7, #14]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800cb8e:	89bb      	ldrh	r3, [r7, #12]
 800cb90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb94:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800cb96:	89bb      	ldrh	r3, [r7, #12]
 800cb98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb9c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	8a1a      	ldrh	r2, [r3, #16]
 800cba2:	89bb      	ldrh	r3, [r7, #12]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	8a5a      	ldrh	r2, [r3, #18]
 800cbac:	89bb      	ldrh	r3, [r7, #12]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	89ba      	ldrh	r2, [r7, #12]
 800cbb6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	897a      	ldrh	r2, [r7, #10]
 800cbbc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	689a      	ldr	r2, [r3, #8]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	89fa      	ldrh	r2, [r7, #14]
 800cbca:	841a      	strh	r2, [r3, #32]
}
 800cbcc:	bf00      	nop
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	40010000 	.word	0x40010000
 800cbdc:	40010400 	.word	0x40010400

0800cbe0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	817b      	strh	r3, [r7, #10]
 800cbee:	2300      	movs	r3, #0
 800cbf0:	81fb      	strh	r3, [r7, #14]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	8c1b      	ldrh	r3, [r3, #32]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f023 0310 	bic.w	r3, r3, #16
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	8c1b      	ldrh	r3, [r3, #32]
 800cc0a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	889b      	ldrh	r3, [r3, #4]
 800cc10:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	8b1b      	ldrh	r3, [r3, #24]
 800cc16:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800cc18:	897b      	ldrh	r3, [r7, #10]
 800cc1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc1e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800cc20:	897b      	ldrh	r3, [r7, #10]
 800cc22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc26:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	021b      	lsls	r3, r3, #8
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	897b      	ldrh	r3, [r7, #10]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800cc36:	89fb      	ldrh	r3, [r7, #14]
 800cc38:	f023 0320 	bic.w	r3, r3, #32
 800cc3c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	899b      	ldrh	r3, [r3, #12]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	89fb      	ldrh	r3, [r7, #14]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	885b      	ldrh	r3, [r3, #2]
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	89fb      	ldrh	r3, [r7, #14]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a22      	ldr	r2, [pc, #136]	; (800cce8 <TIM_OC2Init+0x108>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d003      	beq.n	800cc6a <TIM_OC2Init+0x8a>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a21      	ldr	r2, [pc, #132]	; (800ccec <TIM_OC2Init+0x10c>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d12b      	bne.n	800ccc2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800cc6a:	89fb      	ldrh	r3, [r7, #14]
 800cc6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc70:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	89db      	ldrh	r3, [r3, #14]
 800cc76:	011b      	lsls	r3, r3, #4
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	89fb      	ldrh	r3, [r7, #14]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800cc80:	89fb      	ldrh	r3, [r7, #14]
 800cc82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc86:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	889b      	ldrh	r3, [r3, #4]
 800cc8c:	011b      	lsls	r3, r3, #4
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	89fb      	ldrh	r3, [r7, #14]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800cc96:	89bb      	ldrh	r3, [r7, #12]
 800cc98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc9c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800cc9e:	89bb      	ldrh	r3, [r7, #12]
 800cca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cca4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	8a1b      	ldrh	r3, [r3, #16]
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	89bb      	ldrh	r3, [r7, #12]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	8a5b      	ldrh	r3, [r3, #18]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	89bb      	ldrh	r3, [r7, #12]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	89ba      	ldrh	r2, [r7, #12]
 800ccc6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	897a      	ldrh	r2, [r7, #10]
 800cccc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	689a      	ldr	r2, [r3, #8]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	89fa      	ldrh	r2, [r7, #14]
 800ccda:	841a      	strh	r2, [r3, #32]
}
 800ccdc:	bf00      	nop
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400

0800ccf0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	817b      	strh	r3, [r7, #10]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	81fb      	strh	r3, [r7, #14]
 800cd02:	2300      	movs	r3, #0
 800cd04:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	8c1b      	ldrh	r3, [r3, #32]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	8c1b      	ldrh	r3, [r3, #32]
 800cd1a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	889b      	ldrh	r3, [r3, #4]
 800cd20:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	8b9b      	ldrh	r3, [r3, #28]
 800cd26:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800cd28:	897b      	ldrh	r3, [r7, #10]
 800cd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd2e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800cd30:	897b      	ldrh	r3, [r7, #10]
 800cd32:	f023 0303 	bic.w	r3, r3, #3
 800cd36:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	881a      	ldrh	r2, [r3, #0]
 800cd3c:	897b      	ldrh	r3, [r7, #10]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800cd42:	89fb      	ldrh	r3, [r7, #14]
 800cd44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd48:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	899b      	ldrh	r3, [r3, #12]
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	89fb      	ldrh	r3, [r7, #14]
 800cd54:	4313      	orrs	r3, r2
 800cd56:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	885b      	ldrh	r3, [r3, #2]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	89fb      	ldrh	r3, [r7, #14]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a22      	ldr	r2, [pc, #136]	; (800cdf4 <TIM_OC3Init+0x104>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d003      	beq.n	800cd76 <TIM_OC3Init+0x86>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a21      	ldr	r2, [pc, #132]	; (800cdf8 <TIM_OC3Init+0x108>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d12b      	bne.n	800cdce <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800cd76:	89fb      	ldrh	r3, [r7, #14]
 800cd78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd7c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	89db      	ldrh	r3, [r3, #14]
 800cd82:	021b      	lsls	r3, r3, #8
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	89fb      	ldrh	r3, [r7, #14]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800cd8c:	89fb      	ldrh	r3, [r7, #14]
 800cd8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd92:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	889b      	ldrh	r3, [r3, #4]
 800cd98:	021b      	lsls	r3, r3, #8
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	89fb      	ldrh	r3, [r7, #14]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800cda2:	89bb      	ldrh	r3, [r7, #12]
 800cda4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cda8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800cdaa:	89bb      	ldrh	r3, [r7, #12]
 800cdac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdb0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	8a1b      	ldrh	r3, [r3, #16]
 800cdb6:	011b      	lsls	r3, r3, #4
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	89bb      	ldrh	r3, [r7, #12]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	8a5b      	ldrh	r3, [r3, #18]
 800cdc4:	011b      	lsls	r3, r3, #4
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	89bb      	ldrh	r3, [r7, #12]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	89ba      	ldrh	r2, [r7, #12]
 800cdd2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	897a      	ldrh	r2, [r7, #10]
 800cdd8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	89fa      	ldrh	r2, [r7, #14]
 800cde6:	841a      	strh	r2, [r3, #32]
}
 800cde8:	bf00      	nop
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	40010000 	.word	0x40010000
 800cdf8:	40010400 	.word	0x40010400

0800cdfc <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	81bb      	strh	r3, [r7, #12]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	817b      	strh	r3, [r7, #10]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	8c1b      	ldrh	r3, [r3, #32]
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	8c1b      	ldrh	r3, [r3, #32]
 800ce26:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	889b      	ldrh	r3, [r3, #4]
 800ce2c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	8b9b      	ldrh	r3, [r3, #28]
 800ce32:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800ce34:	89bb      	ldrh	r3, [r7, #12]
 800ce36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce3a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800ce3c:	89bb      	ldrh	r3, [r7, #12]
 800ce3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce42:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	021b      	lsls	r3, r3, #8
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	89bb      	ldrh	r3, [r7, #12]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800ce52:	897b      	ldrh	r3, [r7, #10]
 800ce54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce58:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	899b      	ldrh	r3, [r3, #12]
 800ce5e:	031b      	lsls	r3, r3, #12
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	897b      	ldrh	r3, [r7, #10]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	885b      	ldrh	r3, [r3, #2]
 800ce6c:	031b      	lsls	r3, r3, #12
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	897b      	ldrh	r3, [r7, #10]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a12      	ldr	r2, [pc, #72]	; (800cec4 <TIM_OC4Init+0xc8>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d003      	beq.n	800ce86 <TIM_OC4Init+0x8a>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4a11      	ldr	r2, [pc, #68]	; (800cec8 <TIM_OC4Init+0xcc>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d10a      	bne.n	800ce9c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800ce86:	89fb      	ldrh	r3, [r7, #14]
 800ce88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce8c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	8a1b      	ldrh	r3, [r3, #16]
 800ce92:	019b      	lsls	r3, r3, #6
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	89fb      	ldrh	r3, [r7, #14]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	89fa      	ldrh	r2, [r7, #14]
 800cea0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	89ba      	ldrh	r2, [r7, #12]
 800cea6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	689a      	ldr	r2, [r3, #8]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	897a      	ldrh	r2, [r7, #10]
 800ceb4:	841a      	strh	r2, [r3, #32]
}
 800ceb6:	bf00      	nop
 800ceb8:	3714      	adds	r7, #20
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	40010000 	.word	0x40010000
 800cec8:	40010400 	.word	0x40010400

0800cecc <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	825a      	strh	r2, [r3, #18]
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	807b      	strh	r3, [r7, #2]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	3318      	adds	r3, #24
 800cf30:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800cf32:	887b      	ldrh	r3, [r7, #2]
 800cf34:	2201      	movs	r2, #1
 800cf36:	fa02 f303 	lsl.w	r3, r2, r3
 800cf3a:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	8c1b      	ldrh	r3, [r3, #32]
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	897b      	ldrh	r3, [r7, #10]
 800cf44:	43db      	mvns	r3, r3
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	4013      	ands	r3, r2
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800cf50:	887b      	ldrh	r3, [r7, #2]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <TIM_SelectOCxM+0x4c>
 800cf56:	887b      	ldrh	r3, [r7, #2]
 800cf58:	2b08      	cmp	r3, #8
 800cf5a:	d114      	bne.n	800cf86 <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 800cf5c:	887b      	ldrh	r3, [r7, #2]
 800cf5e:	085b      	lsrs	r3, r3, #1
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	461a      	mov	r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4413      	add	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6819      	ldr	r1, [r3, #0]
 800cf70:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800cf74:	400b      	ands	r3, r1
 800cf76:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	6811      	ldr	r1, [r2, #0]
 800cf7e:	883a      	ldrh	r2, [r7, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	e017      	b.n	800cfb6 <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800cf86:	887b      	ldrh	r3, [r7, #2]
 800cf88:	3b04      	subs	r3, #4
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	085b      	lsrs	r3, r3, #1
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	461a      	mov	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4413      	add	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6819      	ldr	r1, [r3, #0]
 800cf9e:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800cfa2:	400b      	ands	r3, r1
 800cfa4:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	6812      	ldr	r2, [r2, #0]
 800cfac:	8839      	ldrh	r1, [r7, #0]
 800cfae:	0209      	lsls	r1, r1, #8
 800cfb0:	b289      	uxth	r1, r1
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	601a      	str	r2, [r3, #0]
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop

0800cfc4 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	639a      	str	r2, [r3, #56]	; 0x38
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	641a      	str	r2, [r3, #64]	; 0x40
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d040:	2300      	movs	r3, #0
 800d042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	8b1b      	ldrh	r3, [r3, #24]
 800d048:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800d04a:	89fb      	ldrh	r3, [r7, #14]
 800d04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d050:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800d052:	89fa      	ldrh	r2, [r7, #14]
 800d054:	887b      	ldrh	r3, [r7, #2]
 800d056:	4313      	orrs	r3, r2
 800d058:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	89fa      	ldrh	r2, [r7, #14]
 800d05e:	831a      	strh	r2, [r3, #24]
}
 800d060:	bf00      	nop
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	8b1b      	ldrh	r3, [r3, #24]
 800d080:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800d082:	89fb      	ldrh	r3, [r7, #14]
 800d084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d088:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800d08a:	887b      	ldrh	r3, [r7, #2]
 800d08c:	021b      	lsls	r3, r3, #8
 800d08e:	b29a      	uxth	r2, r3
 800d090:	89fb      	ldrh	r3, [r7, #14]
 800d092:	4313      	orrs	r3, r2
 800d094:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	89fa      	ldrh	r2, [r7, #14]
 800d09a:	831a      	strh	r2, [r3, #24]
}
 800d09c:	bf00      	nop
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	8b9b      	ldrh	r3, [r3, #28]
 800d0bc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800d0be:	89fb      	ldrh	r3, [r7, #14]
 800d0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0c4:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800d0c6:	89fa      	ldrh	r2, [r7, #14]
 800d0c8:	887b      	ldrh	r3, [r7, #2]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	89fa      	ldrh	r2, [r7, #14]
 800d0d2:	839a      	strh	r2, [r3, #28]
}
 800d0d4:	bf00      	nop
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	8b9b      	ldrh	r3, [r3, #28]
 800d0f4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800d0f6:	89fb      	ldrh	r3, [r7, #14]
 800d0f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0fc:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800d0fe:	887b      	ldrh	r3, [r7, #2]
 800d100:	021b      	lsls	r3, r3, #8
 800d102:	b29a      	uxth	r2, r3
 800d104:	89fb      	ldrh	r3, [r7, #14]
 800d106:	4313      	orrs	r3, r2
 800d108:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	89fa      	ldrh	r2, [r7, #14]
 800d10e:	839a      	strh	r2, [r3, #28]
}
 800d110:	bf00      	nop
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	8b1b      	ldrh	r3, [r3, #24]
 800d130:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800d132:	89fb      	ldrh	r3, [r7, #14]
 800d134:	f023 0308 	bic.w	r3, r3, #8
 800d138:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800d13a:	89fa      	ldrh	r2, [r7, #14]
 800d13c:	887b      	ldrh	r3, [r7, #2]
 800d13e:	4313      	orrs	r3, r2
 800d140:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	89fa      	ldrh	r2, [r7, #14]
 800d146:	831a      	strh	r2, [r3, #24]
}
 800d148:	bf00      	nop
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d160:	2300      	movs	r3, #0
 800d162:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	8b1b      	ldrh	r3, [r3, #24]
 800d168:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800d16a:	89fb      	ldrh	r3, [r7, #14]
 800d16c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d170:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800d172:	887b      	ldrh	r3, [r7, #2]
 800d174:	021b      	lsls	r3, r3, #8
 800d176:	b29a      	uxth	r2, r3
 800d178:	89fb      	ldrh	r3, [r7, #14]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	89fa      	ldrh	r2, [r7, #14]
 800d182:	831a      	strh	r2, [r3, #24]
}
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8b9b      	ldrh	r3, [r3, #28]
 800d1a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800d1a6:	89fb      	ldrh	r3, [r7, #14]
 800d1a8:	f023 0308 	bic.w	r3, r3, #8
 800d1ac:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800d1ae:	89fa      	ldrh	r2, [r7, #14]
 800d1b0:	887b      	ldrh	r3, [r7, #2]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	89fa      	ldrh	r2, [r7, #14]
 800d1ba:	839a      	strh	r2, [r3, #28]
}
 800d1bc:	bf00      	nop
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	8b9b      	ldrh	r3, [r3, #28]
 800d1dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800d1de:	89fb      	ldrh	r3, [r7, #14]
 800d1e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1e4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800d1e6:	887b      	ldrh	r3, [r7, #2]
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	89fb      	ldrh	r3, [r7, #14]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	89fa      	ldrh	r2, [r7, #14]
 800d1f6:	839a      	strh	r2, [r3, #28]
}
 800d1f8:	bf00      	nop
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8b1b      	ldrh	r3, [r3, #24]
 800d218:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800d21a:	89fb      	ldrh	r3, [r7, #14]
 800d21c:	f023 0304 	bic.w	r3, r3, #4
 800d220:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800d222:	89fa      	ldrh	r2, [r7, #14]
 800d224:	887b      	ldrh	r3, [r7, #2]
 800d226:	4313      	orrs	r3, r2
 800d228:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	89fa      	ldrh	r2, [r7, #14]
 800d22e:	831a      	strh	r2, [r3, #24]
}
 800d230:	bf00      	nop
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	8b1b      	ldrh	r3, [r3, #24]
 800d250:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800d252:	89fb      	ldrh	r3, [r7, #14]
 800d254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d258:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800d25a:	887b      	ldrh	r3, [r7, #2]
 800d25c:	021b      	lsls	r3, r3, #8
 800d25e:	b29a      	uxth	r2, r3
 800d260:	89fb      	ldrh	r3, [r7, #14]
 800d262:	4313      	orrs	r3, r2
 800d264:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	89fa      	ldrh	r2, [r7, #14]
 800d26a:	831a      	strh	r2, [r3, #24]
}
 800d26c:	bf00      	nop
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8b9b      	ldrh	r3, [r3, #28]
 800d28c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800d28e:	89fb      	ldrh	r3, [r7, #14]
 800d290:	f023 0304 	bic.w	r3, r3, #4
 800d294:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800d296:	89fa      	ldrh	r2, [r7, #14]
 800d298:	887b      	ldrh	r3, [r7, #2]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	89fa      	ldrh	r2, [r7, #14]
 800d2a2:	839a      	strh	r2, [r3, #28]
}
 800d2a4:	bf00      	nop
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8b9b      	ldrh	r3, [r3, #28]
 800d2c4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800d2c6:	89fb      	ldrh	r3, [r7, #14]
 800d2c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2cc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800d2ce:	887b      	ldrh	r3, [r7, #2]
 800d2d0:	021b      	lsls	r3, r3, #8
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	89fb      	ldrh	r3, [r7, #14]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	89fa      	ldrh	r2, [r7, #14]
 800d2de:	839a      	strh	r2, [r3, #28]
}
 800d2e0:	bf00      	nop
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8b1b      	ldrh	r3, [r3, #24]
 800d300:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800d302:	89fb      	ldrh	r3, [r7, #14]
 800d304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d308:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800d30a:	89fa      	ldrh	r2, [r7, #14]
 800d30c:	887b      	ldrh	r3, [r7, #2]
 800d30e:	4313      	orrs	r3, r2
 800d310:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	89fa      	ldrh	r2, [r7, #14]
 800d316:	831a      	strh	r2, [r3, #24]
}
 800d318:	bf00      	nop
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d330:	2300      	movs	r3, #0
 800d332:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	8b1b      	ldrh	r3, [r3, #24]
 800d338:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800d33a:	89fb      	ldrh	r3, [r7, #14]
 800d33c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d340:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800d342:	887b      	ldrh	r3, [r7, #2]
 800d344:	021b      	lsls	r3, r3, #8
 800d346:	b29a      	uxth	r2, r3
 800d348:	89fb      	ldrh	r3, [r7, #14]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	89fa      	ldrh	r2, [r7, #14]
 800d352:	831a      	strh	r2, [r3, #24]
}
 800d354:	bf00      	nop
 800d356:	3714      	adds	r7, #20
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	8b9b      	ldrh	r3, [r3, #28]
 800d374:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800d376:	89fb      	ldrh	r3, [r7, #14]
 800d378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d37c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800d37e:	89fa      	ldrh	r2, [r7, #14]
 800d380:	887b      	ldrh	r3, [r7, #2]
 800d382:	4313      	orrs	r3, r2
 800d384:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	89fa      	ldrh	r2, [r7, #14]
 800d38a:	839a      	strh	r2, [r3, #28]
}
 800d38c:	bf00      	nop
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	8b9b      	ldrh	r3, [r3, #28]
 800d3ac:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800d3ae:	89fb      	ldrh	r3, [r7, #14]
 800d3b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d3b4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800d3b6:	887b      	ldrh	r3, [r7, #2]
 800d3b8:	021b      	lsls	r3, r3, #8
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	89fb      	ldrh	r3, [r7, #14]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	89fa      	ldrh	r2, [r7, #14]
 800d3c6:	839a      	strh	r2, [r3, #28]
}
 800d3c8:	bf00      	nop
 800d3ca:	3714      	adds	r7, #20
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	8c1b      	ldrh	r3, [r3, #32]
 800d3e8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800d3ea:	89fb      	ldrh	r3, [r7, #14]
 800d3ec:	f023 0302 	bic.w	r3, r3, #2
 800d3f0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800d3f2:	89fa      	ldrh	r2, [r7, #14]
 800d3f4:	887b      	ldrh	r3, [r7, #2]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	89fa      	ldrh	r2, [r7, #14]
 800d3fe:	841a      	strh	r2, [r3, #32]
}
 800d400:	bf00      	nop
 800d402:	3714      	adds	r7, #20
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d418:	2300      	movs	r3, #0
 800d41a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	8c1b      	ldrh	r3, [r3, #32]
 800d420:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800d422:	89fb      	ldrh	r3, [r7, #14]
 800d424:	f023 0308 	bic.w	r3, r3, #8
 800d428:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800d42a:	89fa      	ldrh	r2, [r7, #14]
 800d42c:	887b      	ldrh	r3, [r7, #2]
 800d42e:	4313      	orrs	r3, r2
 800d430:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	89fa      	ldrh	r2, [r7, #14]
 800d436:	841a      	strh	r2, [r3, #32]
}
 800d438:	bf00      	nop
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8c1b      	ldrh	r3, [r3, #32]
 800d458:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800d45a:	89fb      	ldrh	r3, [r7, #14]
 800d45c:	f023 0320 	bic.w	r3, r3, #32
 800d460:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800d462:	887b      	ldrh	r3, [r7, #2]
 800d464:	011b      	lsls	r3, r3, #4
 800d466:	b29a      	uxth	r2, r3
 800d468:	89fb      	ldrh	r3, [r7, #14]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	89fa      	ldrh	r2, [r7, #14]
 800d472:	841a      	strh	r2, [r3, #32]
}
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800d480:	b480      	push	{r7}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	8c1b      	ldrh	r3, [r3, #32]
 800d494:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800d496:	89fb      	ldrh	r3, [r7, #14]
 800d498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d49c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800d49e:	887b      	ldrh	r3, [r7, #2]
 800d4a0:	011b      	lsls	r3, r3, #4
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	89fb      	ldrh	r3, [r7, #14]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	89fa      	ldrh	r2, [r7, #14]
 800d4ae:	841a      	strh	r2, [r3, #32]
}
 800d4b0:	bf00      	nop
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	8c1b      	ldrh	r3, [r3, #32]
 800d4d0:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800d4d2:	89fb      	ldrh	r3, [r7, #14]
 800d4d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4d8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800d4da:	887b      	ldrh	r3, [r7, #2]
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	89fb      	ldrh	r3, [r7, #14]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	89fa      	ldrh	r2, [r7, #14]
 800d4ea:	841a      	strh	r2, [r3, #32]
}
 800d4ec:	bf00      	nop
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	460b      	mov	r3, r1
 800d502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	8c1b      	ldrh	r3, [r3, #32]
 800d50c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800d50e:	89fb      	ldrh	r3, [r7, #14]
 800d510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d514:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800d516:	887b      	ldrh	r3, [r7, #2]
 800d518:	021b      	lsls	r3, r3, #8
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	89fb      	ldrh	r3, [r7, #14]
 800d51e:	4313      	orrs	r3, r2
 800d520:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	89fa      	ldrh	r2, [r7, #14]
 800d526:	841a      	strh	r2, [r3, #32]
}
 800d528:	bf00      	nop
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	8c1b      	ldrh	r3, [r3, #32]
 800d548:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800d54a:	89fb      	ldrh	r3, [r7, #14]
 800d54c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d550:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800d552:	887b      	ldrh	r3, [r7, #2]
 800d554:	031b      	lsls	r3, r3, #12
 800d556:	b29a      	uxth	r2, r3
 800d558:	89fb      	ldrh	r3, [r7, #14]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	89fa      	ldrh	r2, [r7, #14]
 800d562:	841a      	strh	r2, [r3, #32]
}
 800d564:	bf00      	nop
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	807b      	strh	r3, [r7, #2]
 800d57c:	4613      	mov	r3, r2
 800d57e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800d584:	887b      	ldrh	r3, [r7, #2]
 800d586:	2201      	movs	r2, #1
 800d588:	fa02 f303 	lsl.w	r3, r2, r3
 800d58c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	8c1b      	ldrh	r3, [r3, #32]
 800d592:	b29a      	uxth	r2, r3
 800d594:	89fb      	ldrh	r3, [r7, #14]
 800d596:	43db      	mvns	r3, r3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	4013      	ands	r3, r2
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	8c1b      	ldrh	r3, [r3, #32]
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	b21a      	sxth	r2, r3
 800d5aa:	8839      	ldrh	r1, [r7, #0]
 800d5ac:	887b      	ldrh	r3, [r7, #2]
 800d5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d5b2:	b21b      	sxth	r3, r3
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	b21b      	sxth	r3, r3
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	841a      	strh	r2, [r3, #32]
}
 800d5be:	bf00      	nop
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	807b      	strh	r3, [r7, #2]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800d5e0:	887b      	ldrh	r3, [r7, #2]
 800d5e2:	2204      	movs	r2, #4
 800d5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	8c1b      	ldrh	r3, [r3, #32]
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	89fb      	ldrh	r3, [r7, #14]
 800d5f2:	43db      	mvns	r3, r3
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	4013      	ands	r3, r2
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	8c1b      	ldrh	r3, [r3, #32]
 800d602:	b29b      	uxth	r3, r3
 800d604:	b21a      	sxth	r2, r3
 800d606:	8839      	ldrh	r1, [r7, #0]
 800d608:	887b      	ldrh	r3, [r7, #2]
 800d60a:	fa01 f303 	lsl.w	r3, r1, r3
 800d60e:	b21b      	sxth	r3, r3
 800d610:	4313      	orrs	r3, r2
 800d612:	b21b      	sxth	r3, r3
 800d614:	b29a      	uxth	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	841a      	strh	r2, [r3, #32]
}
 800d61a:	bf00      	nop
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop

0800d628 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	881b      	ldrh	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10f      	bne.n	800d65a <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	8859      	ldrh	r1, [r3, #2]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	889a      	ldrh	r2, [r3, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	891b      	ldrh	r3, [r3, #8]
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fcc0 	bl	800dfcc <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	88db      	ldrh	r3, [r3, #6]
 800d650:	4619      	mov	r1, r3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f8e2 	bl	800d81c <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800d658:	e036      	b.n	800d6c8 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	881b      	ldrh	r3, [r3, #0]
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d10f      	bne.n	800d682 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	8859      	ldrh	r1, [r3, #2]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	889a      	ldrh	r2, [r3, #4]
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	891b      	ldrh	r3, [r3, #8]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fcf0 	bl	800e054 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	88db      	ldrh	r3, [r3, #6]
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f8ea 	bl	800d854 <TIM_SetIC2Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800d680:	e022      	b.n	800d6c8 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	2b08      	cmp	r3, #8
 800d688:	d10f      	bne.n	800d6aa <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	8859      	ldrh	r1, [r3, #2]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	889a      	ldrh	r2, [r3, #4]
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	891b      	ldrh	r3, [r3, #8]
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 fd2a 	bl	800e0f0 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	88db      	ldrh	r3, [r3, #6]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f8f4 	bl	800d890 <TIM_SetIC3Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800d6a8:	e00e      	b.n	800d6c8 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	8859      	ldrh	r1, [r3, #2]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	889a      	ldrh	r2, [r3, #4]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	891b      	ldrh	r3, [r3, #8]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fd62 	bl	800e180 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	88db      	ldrh	r3, [r3, #6]
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f900 	bl	800d8c8 <TIM_SetIC4Prescaler>
  }
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	811a      	strh	r2, [r3, #8]
}
 800d6f6:	bf00      	nop
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop

0800d704 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800d70e:	2300      	movs	r3, #0
 800d710:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800d712:	2301      	movs	r3, #1
 800d714:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	885b      	ldrh	r3, [r3, #2]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d102      	bne.n	800d724 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800d71e:	2302      	movs	r3, #2
 800d720:	81fb      	strh	r3, [r7, #14]
 800d722:	e001      	b.n	800d728 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800d724:	2300      	movs	r3, #0
 800d726:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	889b      	ldrh	r3, [r3, #4]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d102      	bne.n	800d736 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800d730:	2302      	movs	r3, #2
 800d732:	81bb      	strh	r3, [r7, #12]
 800d734:	e001      	b.n	800d73a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800d736:	2301      	movs	r3, #1
 800d738:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d11c      	bne.n	800d77c <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	8859      	ldrh	r1, [r3, #2]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	889a      	ldrh	r2, [r3, #4]
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	891b      	ldrh	r3, [r3, #8]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 fc3c 	bl	800dfcc <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	88db      	ldrh	r3, [r3, #6]
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f85e 	bl	800d81c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	891b      	ldrh	r3, [r3, #8]
 800d764:	89ba      	ldrh	r2, [r7, #12]
 800d766:	89f9      	ldrh	r1, [r7, #14]
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fc73 	bl	800e054 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	88db      	ldrh	r3, [r3, #6]
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f86d 	bl	800d854 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800d77a:	e01b      	b.n	800d7b4 <TIM_PWMIConfig+0xb0>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	8859      	ldrh	r1, [r3, #2]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	889a      	ldrh	r2, [r3, #4]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	891b      	ldrh	r3, [r3, #8]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fc63 	bl	800e054 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	88db      	ldrh	r3, [r3, #6]
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f85d 	bl	800d854 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	891b      	ldrh	r3, [r3, #8]
 800d79e:	89ba      	ldrh	r2, [r7, #12]
 800d7a0:	89f9      	ldrh	r1, [r7, #14]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fc12 	bl	800dfcc <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	88db      	ldrh	r3, [r3, #6]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 f834 	bl	800d81c <TIM_SetIC1Prescaler>
  }
}
 800d7b4:	bf00      	nop
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d810:	4618      	mov	r0, r3
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	460b      	mov	r3, r1
 800d826:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	8b1b      	ldrh	r3, [r3, #24]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	f023 030c 	bic.w	r3, r3, #12
 800d832:	b29a      	uxth	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	8b1b      	ldrh	r3, [r3, #24]
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	887b      	ldrh	r3, [r7, #2]
 800d840:	4313      	orrs	r3, r2
 800d842:	b29a      	uxth	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	831a      	strh	r2, [r3, #24]
}
 800d848:	bf00      	nop
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	460b      	mov	r3, r1
 800d85e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	8b1b      	ldrh	r3, [r3, #24]
 800d864:	b29b      	uxth	r3, r3
 800d866:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	8b1b      	ldrh	r3, [r3, #24]
 800d874:	b29a      	uxth	r2, r3
 800d876:	887b      	ldrh	r3, [r7, #2]
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b29a      	uxth	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	831a      	strh	r2, [r3, #24]
}
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	8b9b      	ldrh	r3, [r3, #28]
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	f023 030c 	bic.w	r3, r3, #12
 800d8a6:	b29a      	uxth	r2, r3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	8b9b      	ldrh	r3, [r3, #28]
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	887b      	ldrh	r3, [r7, #2]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	839a      	strh	r2, [r3, #28]
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	8b9b      	ldrh	r3, [r3, #28]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8b9b      	ldrh	r3, [r3, #28]
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	887b      	ldrh	r3, [r7, #2]
 800d8ec:	021b      	lsls	r3, r3, #8
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	839a      	strh	r2, [r3, #28]
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	881a      	ldrh	r2, [r3, #0]
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	885b      	ldrh	r3, [r3, #2]
 800d916:	4313      	orrs	r3, r2
 800d918:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d91e:	4313      	orrs	r3, r2
 800d920:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d926:	4313      	orrs	r3, r2
 800d928:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d92e:	4313      	orrs	r3, r2
 800d930:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d936:	4313      	orrs	r3, r2
 800d938:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d93e:	4313      	orrs	r3, r2
 800d940:	b29a      	uxth	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	819a      	strh	r2, [r3, #12]
}
 800d986:	bf00      	nop
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop

0800d994 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d9a0:	78fb      	ldrb	r3, [r7, #3]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00c      	beq.n	800d9c0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 800d9be:	e009      	b.n	800d9d4 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d9ec:	78fb      	ldrb	r3, [r7, #3]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d008      	beq.n	800da04 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	889b      	ldrh	r3, [r3, #4]
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	f043 0304 	orr.w	r3, r3, #4
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
 800da02:	e007      	b.n	800da14 <TIM_SelectCOM+0x34>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	889b      	ldrh	r3, [r3, #4]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	f023 0304 	bic.w	r3, r3, #4
 800da0e:	b29a      	uxth	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	809a      	strh	r2, [r3, #4]
  }
}
 800da14:	bf00      	nop
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800da2c:	78fb      	ldrb	r3, [r7, #3]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d008      	beq.n	800da44 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	889b      	ldrh	r3, [r3, #4]
 800da36:	b29b      	uxth	r3, r3
 800da38:	f043 0301 	orr.w	r3, r3, #1
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
 800da42:	e007      	b.n	800da54 <TIM_CCPreloadControl+0x34>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	889b      	ldrh	r3, [r3, #4]
 800da48:	b29b      	uxth	r3, r3
 800da4a:	f023 0301 	bic.w	r3, r3, #1
 800da4e:	b29a      	uxth	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	809a      	strh	r2, [r3, #4]
  }
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	460b      	mov	r3, r1
 800da6a:	807b      	strh	r3, [r7, #2]
 800da6c:	4613      	mov	r3, r2
 800da6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800da70:	787b      	ldrb	r3, [r7, #1]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d008      	beq.n	800da88 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	899b      	ldrh	r3, [r3, #12]
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	887b      	ldrh	r3, [r7, #2]
 800da7e:	4313      	orrs	r3, r2
 800da80:	b29a      	uxth	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800da86:	e009      	b.n	800da9c <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	899b      	ldrh	r3, [r3, #12]
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	887b      	ldrh	r3, [r7, #2]
 800da90:	43db      	mvns	r3, r3
 800da92:	b29b      	uxth	r3, r3
 800da94:	4013      	ands	r3, r2
 800da96:	b29a      	uxth	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	819a      	strh	r2, [r3, #12]
  }
}
 800da9c:	bf00      	nop
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	887a      	ldrh	r2, [r7, #2]
 800dab8:	829a      	strh	r2, [r3, #20]
}
 800daba:	bf00      	nop
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop

0800dac8 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	460b      	mov	r3, r1
 800dad2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800dad4:	2300      	movs	r3, #0
 800dad6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	8a1b      	ldrh	r3, [r3, #16]
 800dadc:	b29a      	uxth	r2, r3
 800dade:	887b      	ldrh	r3, [r7, #2]
 800dae0:	4013      	ands	r3, r2
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d002      	beq.n	800daee <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800dae8:	2301      	movs	r3, #1
 800daea:	73fb      	strb	r3, [r7, #15]
 800daec:	e001      	b.n	800daf2 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800daee:	2300      	movs	r3, #0
 800daf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800daf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800db0c:	887b      	ldrh	r3, [r7, #2]
 800db0e:	43db      	mvns	r3, r3
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	821a      	strh	r2, [r3, #16]
}
 800db16:	bf00      	nop
 800db18:	370c      	adds	r7, #12
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop

0800db24 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800db30:	2300      	movs	r3, #0
 800db32:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800db34:	2300      	movs	r3, #0
 800db36:	81bb      	strh	r3, [r7, #12]
 800db38:	2300      	movs	r3, #0
 800db3a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	8a1b      	ldrh	r3, [r3, #16]
 800db40:	b29a      	uxth	r2, r3
 800db42:	887b      	ldrh	r3, [r7, #2]
 800db44:	4013      	ands	r3, r2
 800db46:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	899b      	ldrh	r3, [r3, #12]
 800db4c:	b29a      	uxth	r2, r3
 800db4e:	887b      	ldrh	r3, [r7, #2]
 800db50:	4013      	ands	r3, r2
 800db52:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800db54:	89bb      	ldrh	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d005      	beq.n	800db66 <TIM_GetITStatus+0x42>
 800db5a:	897b      	ldrh	r3, [r7, #10]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800db60:	2301      	movs	r3, #1
 800db62:	73fb      	strb	r3, [r7, #15]
 800db64:	e001      	b.n	800db6a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800db66:	2300      	movs	r3, #0
 800db68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	460b      	mov	r3, r1
 800db82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800db84:	887b      	ldrh	r3, [r7, #2]
 800db86:	43db      	mvns	r3, r3
 800db88:	b29a      	uxth	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	821a      	strh	r2, [r3, #16]
}
 800db8e:	bf00      	nop
 800db90:	370c      	adds	r7, #12
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop

0800db9c <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	807b      	strh	r3, [r7, #2]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800dbac:	887a      	ldrh	r2, [r7, #2]
 800dbae:	883b      	ldrh	r3, [r7, #0]
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800dbba:	bf00      	nop
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop

0800dbc8 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	807b      	strh	r3, [r7, #2]
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dbd8:	787b      	ldrb	r3, [r7, #1]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d008      	beq.n	800dbf0 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	899b      	ldrh	r3, [r3, #12]
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	887b      	ldrh	r3, [r7, #2]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 800dbee:	e009      	b.n	800dc04 <TIM_DMACmd+0x3c>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	899b      	ldrh	r3, [r3, #12]
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	887b      	ldrh	r3, [r7, #2]
 800dbf8:	43db      	mvns	r3, r3
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	819a      	strh	r2, [r3, #12]
  }
}
 800dc04:	bf00      	nop
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800dc1c:	78fb      	ldrb	r3, [r7, #3]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d008      	beq.n	800dc34 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	889b      	ldrh	r3, [r3, #4]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	f043 0308 	orr.w	r3, r3, #8
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
 800dc32:	e007      	b.n	800dc44 <TIM_SelectCCDMA+0x34>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	889b      	ldrh	r3, [r3, #4]
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	f023 0308 	bic.w	r3, r3, #8
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	809a      	strh	r2, [r3, #4]
  }
}
 800dc44:	bf00      	nop
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	891b      	ldrh	r3, [r3, #8]
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	f023 0307 	bic.w	r3, r3, #7
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	811a      	strh	r2, [r3, #8]
}
 800dc68:	bf00      	nop
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800dc80:	887b      	ldrh	r3, [r7, #2]
 800dc82:	4619      	mov	r1, r3
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f88b 	bl	800dda0 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	891b      	ldrh	r3, [r3, #8]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	f043 0307 	orr.w	r3, r3, #7
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	811a      	strh	r2, [r3, #8]
}
 800dc9a:	bf00      	nop
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop

0800dca4 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	4608      	mov	r0, r1
 800dcae:	4611      	mov	r1, r2
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	817b      	strh	r3, [r7, #10]
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	813b      	strh	r3, [r7, #8]
 800dcba:	4613      	mov	r3, r2
 800dcbc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800dcbe:	897b      	ldrh	r3, [r7, #10]
 800dcc0:	2b60      	cmp	r3, #96	; 0x60
 800dcc2:	d106      	bne.n	800dcd2 <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800dcc4:	88fb      	ldrh	r3, [r7, #6]
 800dcc6:	8939      	ldrh	r1, [r7, #8]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f000 f9c2 	bl	800e054 <TI2_Config>
 800dcd0:	e005      	b.n	800dcde <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800dcd2:	88fb      	ldrh	r3, [r7, #6]
 800dcd4:	8939      	ldrh	r1, [r7, #8]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f000 f977 	bl	800dfcc <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800dcde:	897b      	ldrh	r3, [r7, #10]
 800dce0:	4619      	mov	r1, r3
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f000 f85c 	bl	800dda0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	891b      	ldrh	r3, [r3, #8]
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	f043 0307 	orr.w	r3, r3, #7
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	811a      	strh	r2, [r3, #8]
}
 800dcf8:	bf00      	nop
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	4608      	mov	r0, r1
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4603      	mov	r3, r0
 800dd10:	817b      	strh	r3, [r7, #10]
 800dd12:	460b      	mov	r3, r1
 800dd14:	813b      	strh	r3, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800dd1e:	88fb      	ldrh	r3, [r7, #6]
 800dd20:	893a      	ldrh	r2, [r7, #8]
 800dd22:	8979      	ldrh	r1, [r7, #10]
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f000 f8ab 	bl	800de80 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	891b      	ldrh	r3, [r3, #8]
 800dd2e:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800dd30:	8afb      	ldrh	r3, [r7, #22]
 800dd32:	f023 0307 	bic.w	r3, r3, #7
 800dd36:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800dd38:	8afb      	ldrh	r3, [r7, #22]
 800dd3a:	f043 0307 	orr.w	r3, r3, #7
 800dd3e:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800dd40:	8afb      	ldrh	r3, [r7, #22]
 800dd42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd46:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800dd48:	8afb      	ldrh	r3, [r7, #22]
 800dd4a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800dd4e:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	8afa      	ldrh	r2, [r7, #22]
 800dd54:	811a      	strh	r2, [r3, #8]
}
 800dd56:	bf00      	nop
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop

0800dd60 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	4608      	mov	r0, r1
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	4603      	mov	r3, r0
 800dd70:	817b      	strh	r3, [r7, #10]
 800dd72:	460b      	mov	r3, r1
 800dd74:	813b      	strh	r3, [r7, #8]
 800dd76:	4613      	mov	r3, r2
 800dd78:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800dd7a:	88fb      	ldrh	r3, [r7, #6]
 800dd7c:	893a      	ldrh	r2, [r7, #8]
 800dd7e:	8979      	ldrh	r1, [r7, #10]
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	f000 f87d 	bl	800de80 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	891b      	ldrh	r3, [r3, #8]
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	811a      	strh	r2, [r3, #8]
}
 800dd96:	bf00      	nop
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop

0800dda0 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	891b      	ldrh	r3, [r3, #8]
 800ddb4:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800ddb6:	89fb      	ldrh	r3, [r7, #14]
 800ddb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddbc:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800ddbe:	89fa      	ldrh	r2, [r7, #14]
 800ddc0:	887b      	ldrh	r3, [r7, #2]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	89fa      	ldrh	r2, [r7, #14]
 800ddca:	811a      	strh	r2, [r3, #8]
}
 800ddcc:	bf00      	nop
 800ddce:	3714      	adds	r7, #20
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	889b      	ldrh	r3, [r3, #4]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	889b      	ldrh	r3, [r3, #4]
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	887b      	ldrh	r3, [r7, #2]
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	809a      	strh	r2, [r3, #4]
}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	891b      	ldrh	r3, [r3, #8]
 800de20:	b29b      	uxth	r3, r3
 800de22:	f023 0307 	bic.w	r3, r3, #7
 800de26:	b29a      	uxth	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	891b      	ldrh	r3, [r3, #8]
 800de30:	b29a      	uxth	r2, r3
 800de32:	887b      	ldrh	r3, [r7, #2]
 800de34:	4313      	orrs	r3, r2
 800de36:	b29a      	uxth	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	811a      	strh	r2, [r3, #8]
}
 800de3c:	bf00      	nop
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	891b      	ldrh	r3, [r3, #8]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de5e:	b29a      	uxth	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	891b      	ldrh	r3, [r3, #8]
 800de68:	b29a      	uxth	r2, r3
 800de6a:	887b      	ldrh	r3, [r7, #2]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	b29a      	uxth	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	811a      	strh	r2, [r3, #8]
}
 800de74:	bf00      	nop
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	4608      	mov	r0, r1
 800de8a:	4611      	mov	r1, r2
 800de8c:	461a      	mov	r2, r3
 800de8e:	4603      	mov	r3, r0
 800de90:	817b      	strh	r3, [r7, #10]
 800de92:	460b      	mov	r3, r1
 800de94:	813b      	strh	r3, [r7, #8]
 800de96:	4613      	mov	r3, r2
 800de98:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	891b      	ldrh	r3, [r3, #8]
 800dea2:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800dea4:	8afb      	ldrh	r3, [r7, #22]
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800deaa:	88fb      	ldrh	r3, [r7, #6]
 800deac:	021b      	lsls	r3, r3, #8
 800deae:	b29a      	uxth	r2, r3
 800deb0:	893b      	ldrh	r3, [r7, #8]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	897b      	ldrh	r3, [r7, #10]
 800deb8:	4313      	orrs	r3, r2
 800deba:	b29a      	uxth	r2, r3
 800debc:	8afb      	ldrh	r3, [r7, #22]
 800debe:	4313      	orrs	r3, r2
 800dec0:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	8afa      	ldrh	r2, [r7, #22]
 800dec6:	811a      	strh	r2, [r3, #8]
}
 800dec8:	bf00      	nop
 800deca:	371c      	adds	r7, #28
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	4608      	mov	r0, r1
 800dede:	4611      	mov	r1, r2
 800dee0:	461a      	mov	r2, r3
 800dee2:	4603      	mov	r3, r0
 800dee4:	817b      	strh	r3, [r7, #10]
 800dee6:	460b      	mov	r3, r1
 800dee8:	813b      	strh	r3, [r7, #8]
 800deea:	4613      	mov	r3, r2
 800deec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800def2:	2300      	movs	r3, #0
 800def4:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	891b      	ldrh	r3, [r3, #8]
 800defe:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	8b1b      	ldrh	r3, [r3, #24]
 800df04:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	8c1b      	ldrh	r3, [r3, #32]
 800df0a:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800df0c:	8afb      	ldrh	r3, [r7, #22]
 800df0e:	f023 0307 	bic.w	r3, r3, #7
 800df12:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800df14:	8afa      	ldrh	r2, [r7, #22]
 800df16:	897b      	ldrh	r3, [r7, #10]
 800df18:	4313      	orrs	r3, r2
 800df1a:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800df1c:	8abb      	ldrh	r3, [r7, #20]
 800df1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df22:	f023 0303 	bic.w	r3, r3, #3
 800df26:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800df28:	8abb      	ldrh	r3, [r7, #20]
 800df2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df2e:	f043 0301 	orr.w	r3, r3, #1
 800df32:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800df34:	8a7b      	ldrh	r3, [r7, #18]
 800df36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800df3a:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800df3c:	88fb      	ldrh	r3, [r7, #6]
 800df3e:	011b      	lsls	r3, r3, #4
 800df40:	b29a      	uxth	r2, r3
 800df42:	893b      	ldrh	r3, [r7, #8]
 800df44:	4313      	orrs	r3, r2
 800df46:	b29a      	uxth	r2, r3
 800df48:	8a7b      	ldrh	r3, [r7, #18]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	8afa      	ldrh	r2, [r7, #22]
 800df52:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	8aba      	ldrh	r2, [r7, #20]
 800df58:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	8a7a      	ldrh	r2, [r7, #18]
 800df5e:	841a      	strh	r2, [r3, #32]
}
 800df60:	bf00      	nop
 800df62:	371c      	adds	r7, #28
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	460b      	mov	r3, r1
 800df76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800df78:	78fb      	ldrb	r3, [r7, #3]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d008      	beq.n	800df90 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	889b      	ldrh	r3, [r3, #4]
 800df82:	b29b      	uxth	r3, r3
 800df84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df88:	b29a      	uxth	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
 800df8e:	e007      	b.n	800dfa0 <TIM_SelectHallSensor+0x34>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	889b      	ldrh	r3, [r3, #4]
 800df94:	b29b      	uxth	r3, r3
 800df96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	809a      	strh	r2, [r3, #4]
  }
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	887a      	ldrh	r2, [r7, #2]
 800dfbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b087      	sub	sp, #28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	4608      	mov	r0, r1
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4603      	mov	r3, r0
 800dfdc:	817b      	strh	r3, [r7, #10]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	813b      	strh	r3, [r7, #8]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	82fb      	strh	r3, [r7, #22]
 800dfea:	2300      	movs	r3, #0
 800dfec:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	8c1b      	ldrh	r3, [r3, #32]
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	f023 0301 	bic.w	r3, r3, #1
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	8b1b      	ldrh	r3, [r3, #24]
 800e002:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	8c1b      	ldrh	r3, [r3, #32]
 800e008:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800e00a:	8afb      	ldrh	r3, [r7, #22]
 800e00c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800e010:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800e012:	88fb      	ldrh	r3, [r7, #6]
 800e014:	011b      	lsls	r3, r3, #4
 800e016:	b29a      	uxth	r2, r3
 800e018:	893b      	ldrh	r3, [r7, #8]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	8afb      	ldrh	r3, [r7, #22]
 800e020:	4313      	orrs	r3, r2
 800e022:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e024:	8abb      	ldrh	r3, [r7, #20]
 800e026:	f023 030a 	bic.w	r3, r3, #10
 800e02a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800e02c:	897a      	ldrh	r2, [r7, #10]
 800e02e:	8abb      	ldrh	r3, [r7, #20]
 800e030:	4313      	orrs	r3, r2
 800e032:	b29b      	uxth	r3, r3
 800e034:	f043 0301 	orr.w	r3, r3, #1
 800e038:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	8afa      	ldrh	r2, [r7, #22]
 800e03e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	8aba      	ldrh	r2, [r7, #20]
 800e044:	841a      	strh	r2, [r3, #32]
}
 800e046:	bf00      	nop
 800e048:	371c      	adds	r7, #28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop

0800e054 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e054:	b480      	push	{r7}
 800e056:	b087      	sub	sp, #28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	4608      	mov	r0, r1
 800e05e:	4611      	mov	r1, r2
 800e060:	461a      	mov	r2, r3
 800e062:	4603      	mov	r3, r0
 800e064:	817b      	strh	r3, [r7, #10]
 800e066:	460b      	mov	r3, r1
 800e068:	813b      	strh	r3, [r7, #8]
 800e06a:	4613      	mov	r3, r2
 800e06c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	82fb      	strh	r3, [r7, #22]
 800e072:	2300      	movs	r3, #0
 800e074:	82bb      	strh	r3, [r7, #20]
 800e076:	2300      	movs	r3, #0
 800e078:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	8c1b      	ldrh	r3, [r3, #32]
 800e07e:	b29b      	uxth	r3, r3
 800e080:	f023 0310 	bic.w	r3, r3, #16
 800e084:	b29a      	uxth	r2, r3
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	8b1b      	ldrh	r3, [r3, #24]
 800e08e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	8c1b      	ldrh	r3, [r3, #32]
 800e094:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800e096:	897b      	ldrh	r3, [r7, #10]
 800e098:	011b      	lsls	r3, r3, #4
 800e09a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800e09c:	8afb      	ldrh	r3, [r7, #22]
 800e09e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0a2:	051b      	lsls	r3, r3, #20
 800e0a4:	0d1b      	lsrs	r3, r3, #20
 800e0a6:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800e0a8:	88fb      	ldrh	r3, [r7, #6]
 800e0aa:	031b      	lsls	r3, r3, #12
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	8afb      	ldrh	r3, [r7, #22]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800e0b4:	893b      	ldrh	r3, [r7, #8]
 800e0b6:	021b      	lsls	r3, r3, #8
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	8afb      	ldrh	r3, [r7, #22]
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e0c0:	8abb      	ldrh	r3, [r7, #20]
 800e0c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e0c6:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800e0c8:	8a7a      	ldrh	r2, [r7, #18]
 800e0ca:	8abb      	ldrh	r3, [r7, #20]
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	f043 0310 	orr.w	r3, r3, #16
 800e0d4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	8afa      	ldrh	r2, [r7, #22]
 800e0da:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	8aba      	ldrh	r2, [r7, #20]
 800e0e0:	841a      	strh	r2, [r3, #32]
}
 800e0e2:	bf00      	nop
 800e0e4:	371c      	adds	r7, #28
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop

0800e0f0 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b087      	sub	sp, #28
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	4608      	mov	r0, r1
 800e0fa:	4611      	mov	r1, r2
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	4603      	mov	r3, r0
 800e100:	817b      	strh	r3, [r7, #10]
 800e102:	460b      	mov	r3, r1
 800e104:	813b      	strh	r3, [r7, #8]
 800e106:	4613      	mov	r3, r2
 800e108:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	82fb      	strh	r3, [r7, #22]
 800e10e:	2300      	movs	r3, #0
 800e110:	82bb      	strh	r3, [r7, #20]
 800e112:	2300      	movs	r3, #0
 800e114:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	8c1b      	ldrh	r3, [r3, #32]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e120:	b29a      	uxth	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	8b9b      	ldrh	r3, [r3, #28]
 800e12a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	8c1b      	ldrh	r3, [r3, #32]
 800e130:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800e132:	897b      	ldrh	r3, [r7, #10]
 800e134:	021b      	lsls	r3, r3, #8
 800e136:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800e138:	8afb      	ldrh	r3, [r7, #22]
 800e13a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800e13e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800e140:	88fb      	ldrh	r3, [r7, #6]
 800e142:	011b      	lsls	r3, r3, #4
 800e144:	b29a      	uxth	r2, r3
 800e146:	893b      	ldrh	r3, [r7, #8]
 800e148:	4313      	orrs	r3, r2
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	8afb      	ldrh	r3, [r7, #22]
 800e14e:	4313      	orrs	r3, r2
 800e150:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e152:	8abb      	ldrh	r3, [r7, #20]
 800e154:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e158:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800e15a:	8a7a      	ldrh	r2, [r7, #18]
 800e15c:	8abb      	ldrh	r3, [r7, #20]
 800e15e:	4313      	orrs	r3, r2
 800e160:	b29b      	uxth	r3, r3
 800e162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e166:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	8afa      	ldrh	r2, [r7, #22]
 800e16c:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	8aba      	ldrh	r2, [r7, #20]
 800e172:	841a      	strh	r2, [r3, #32]
}
 800e174:	bf00      	nop
 800e176:	371c      	adds	r7, #28
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e180:	b480      	push	{r7}
 800e182:	b087      	sub	sp, #28
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	4608      	mov	r0, r1
 800e18a:	4611      	mov	r1, r2
 800e18c:	461a      	mov	r2, r3
 800e18e:	4603      	mov	r3, r0
 800e190:	817b      	strh	r3, [r7, #10]
 800e192:	460b      	mov	r3, r1
 800e194:	813b      	strh	r3, [r7, #8]
 800e196:	4613      	mov	r3, r2
 800e198:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	82fb      	strh	r3, [r7, #22]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	82bb      	strh	r3, [r7, #20]
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	8c1b      	ldrh	r3, [r3, #32]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	8b9b      	ldrh	r3, [r3, #28]
 800e1ba:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	8c1b      	ldrh	r3, [r3, #32]
 800e1c0:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800e1c2:	897b      	ldrh	r3, [r7, #10]
 800e1c4:	031b      	lsls	r3, r3, #12
 800e1c6:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800e1c8:	8afb      	ldrh	r3, [r7, #22]
 800e1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1ce:	051b      	lsls	r3, r3, #20
 800e1d0:	0d1b      	lsrs	r3, r3, #20
 800e1d2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800e1d4:	893b      	ldrh	r3, [r7, #8]
 800e1d6:	021b      	lsls	r3, r3, #8
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	8afb      	ldrh	r3, [r7, #22]
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800e1e0:	88fb      	ldrh	r3, [r7, #6]
 800e1e2:	031b      	lsls	r3, r3, #12
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	8afb      	ldrh	r3, [r7, #22]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e1ec:	8abb      	ldrh	r3, [r7, #20]
 800e1ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e1f2:	045b      	lsls	r3, r3, #17
 800e1f4:	0c5b      	lsrs	r3, r3, #17
 800e1f6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800e1f8:	8a7a      	ldrh	r2, [r7, #18]
 800e1fa:	8abb      	ldrh	r3, [r7, #20]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e204:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	8afa      	ldrh	r2, [r7, #22]
 800e20a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	8aba      	ldrh	r2, [r7, #20]
 800e210:	841a      	strh	r2, [r3, #32]
}
 800e212:	bf00      	nop
 800e214:	371c      	adds	r7, #28
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop

0800e220 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a3b      	ldr	r2, [pc, #236]	; (800e318 <USART_DeInit+0xf8>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d108      	bne.n	800e242 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800e230:	2101      	movs	r1, #1
 800e232:	2010      	movs	r0, #16
 800e234:	f7fb fdbe 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800e238:	2100      	movs	r1, #0
 800e23a:	2010      	movs	r0, #16
 800e23c:	f7fb fdba 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800e240:	e065      	b.n	800e30e <USART_DeInit+0xee>
  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4a35      	ldr	r2, [pc, #212]	; (800e31c <USART_DeInit+0xfc>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d10a      	bne.n	800e260 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800e24a:	2101      	movs	r1, #1
 800e24c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800e250:	f7fb fd90 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800e254:	2100      	movs	r1, #0
 800e256:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800e25a:	f7fb fd8b 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800e25e:	e056      	b.n	800e30e <USART_DeInit+0xee>
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a2f      	ldr	r2, [pc, #188]	; (800e320 <USART_DeInit+0x100>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d10a      	bne.n	800e27e <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800e268:	2101      	movs	r1, #1
 800e26a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800e26e:	f7fb fd81 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800e272:	2100      	movs	r1, #0
 800e274:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800e278:	f7fb fd7c 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800e27c:	e047      	b.n	800e30e <USART_DeInit+0xee>
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4a28      	ldr	r2, [pc, #160]	; (800e324 <USART_DeInit+0x104>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d10a      	bne.n	800e29c <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800e286:	2101      	movs	r1, #1
 800e288:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e28c:	f7fb fd72 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800e290:	2100      	movs	r1, #0
 800e292:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e296:	f7fb fd6d 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800e29a:	e038      	b.n	800e30e <USART_DeInit+0xee>
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4a22      	ldr	r2, [pc, #136]	; (800e328 <USART_DeInit+0x108>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d10a      	bne.n	800e2ba <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800e2a4:	2101      	movs	r1, #1
 800e2a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e2aa:	f7fb fd63 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e2b4:	f7fb fd5e 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800e2b8:	e029      	b.n	800e30e <USART_DeInit+0xee>
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4a1b      	ldr	r2, [pc, #108]	; (800e32c <USART_DeInit+0x10c>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d108      	bne.n	800e2d4 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800e2c2:	2101      	movs	r1, #1
 800e2c4:	2020      	movs	r0, #32
 800e2c6:	f7fb fd75 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	2020      	movs	r0, #32
 800e2ce:	f7fb fd71 	bl	8009db4 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800e2d2:	e01c      	b.n	800e30e <USART_DeInit+0xee>
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a16      	ldr	r2, [pc, #88]	; (800e330 <USART_DeInit+0x110>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d10a      	bne.n	800e2f2 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800e2dc:	2101      	movs	r1, #1
 800e2de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e2e2:	f7fb fd47 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e2ec:	f7fb fd42 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800e2f0:	e00d      	b.n	800e30e <USART_DeInit+0xee>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a0f      	ldr	r2, [pc, #60]	; (800e334 <USART_DeInit+0x114>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d109      	bne.n	800e30e <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800e2fa:	2101      	movs	r1, #1
 800e2fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e300:	f7fb fd38 	bl	8009d74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800e304:	2100      	movs	r1, #0
 800e306:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e30a:	f7fb fd33 	bl	8009d74 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800e30e:	bf00      	nop
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	40011000 	.word	0x40011000
 800e31c:	40004400 	.word	0x40004400
 800e320:	40004800 	.word	0x40004800
 800e324:	40004c00 	.word	0x40004c00
 800e328:	40005000 	.word	0x40005000
 800e32c:	40011400 	.word	0x40011400
 800e330:	40007800 	.word	0x40007800
 800e334:	40007c00 	.word	0x40007c00

0800e338 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08a      	sub	sp, #40	; 0x28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800e342:	2300      	movs	r3, #0
 800e344:	627b      	str	r3, [r7, #36]	; 0x24
 800e346:	2300      	movs	r3, #0
 800e348:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800e34a:	2300      	movs	r3, #0
 800e34c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800e34e:	2300      	movs	r3, #0
 800e350:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	8a1b      	ldrh	r3, [r3, #16]
 800e356:	b29b      	uxth	r3, r3
 800e358:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e360:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	88db      	ldrh	r3, [r3, #6]
 800e366:	461a      	mov	r2, r3
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	4313      	orrs	r3, r2
 800e36c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	b29a      	uxth	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	899b      	ldrh	r3, [r3, #12]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800e37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e380:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e384:	f023 030c 	bic.w	r3, r3, #12
 800e388:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	889a      	ldrh	r2, [r3, #4]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	891b      	ldrh	r3, [r3, #8]
 800e392:	4313      	orrs	r3, r2
 800e394:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800e39a:	4313      	orrs	r3, r2
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	461a      	mov	r2, r3
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	8a9b      	ldrh	r3, [r3, #20]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	899b      	ldrh	r3, [r3, #12]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800e3d2:	f107 0308 	add.w	r3, r7, #8
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fb fab4 	bl	8009944 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a30      	ldr	r2, [pc, #192]	; (800e4a0 <USART_Init+0x168>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d003      	beq.n	800e3ec <USART_Init+0xb4>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a2f      	ldr	r2, [pc, #188]	; (800e4a4 <USART_Init+0x16c>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d102      	bne.n	800e3f2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	623b      	str	r3, [r7, #32]
 800e3f0:	e001      	b.n	800e3f6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	899b      	ldrh	r3, [r3, #12]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	b21b      	sxth	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	da0c      	bge.n	800e41c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800e402:	6a3a      	ldr	r2, [r7, #32]
 800e404:	4613      	mov	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	009a      	lsls	r2, r3, #2
 800e40c:	441a      	add	r2, r3
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	fbb2 f3f3 	udiv	r3, r2, r3
 800e418:	61fb      	str	r3, [r7, #28]
 800e41a:	e00b      	b.n	800e434 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800e41c:	6a3a      	ldr	r2, [r7, #32]
 800e41e:	4613      	mov	r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	4413      	add	r3, r2
 800e424:	009a      	lsls	r2, r3, #2
 800e426:	441a      	add	r2, r3
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e432:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	4a1c      	ldr	r2, [pc, #112]	; (800e4a8 <USART_Init+0x170>)
 800e438:	fba2 2303 	umull	r2, r3, r2, r3
 800e43c:	095b      	lsrs	r3, r3, #5
 800e43e:	011b      	lsls	r3, r3, #4
 800e440:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800e442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e444:	091b      	lsrs	r3, r3, #4
 800e446:	2264      	movs	r2, #100	; 0x64
 800e448:	fb02 f303 	mul.w	r3, r2, r3
 800e44c:	69fa      	ldr	r2, [r7, #28]
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	899b      	ldrh	r3, [r3, #12]
 800e456:	b29b      	uxth	r3, r3
 800e458:	b21b      	sxth	r3, r3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	da0c      	bge.n	800e478 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	3332      	adds	r3, #50	; 0x32
 800e464:	4a10      	ldr	r2, [pc, #64]	; (800e4a8 <USART_Init+0x170>)
 800e466:	fba2 2303 	umull	r2, r3, r2, r3
 800e46a:	095b      	lsrs	r3, r3, #5
 800e46c:	f003 0307 	and.w	r3, r3, #7
 800e470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e472:	4313      	orrs	r3, r2
 800e474:	627b      	str	r3, [r7, #36]	; 0x24
 800e476:	e00b      	b.n	800e490 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	011b      	lsls	r3, r3, #4
 800e47c:	3332      	adds	r3, #50	; 0x32
 800e47e:	4a0a      	ldr	r2, [pc, #40]	; (800e4a8 <USART_Init+0x170>)
 800e480:	fba2 2303 	umull	r2, r3, r2, r3
 800e484:	095b      	lsrs	r3, r3, #5
 800e486:	f003 030f 	and.w	r3, r3, #15
 800e48a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e48c:	4313      	orrs	r3, r2
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	811a      	strh	r2, [r3, #8]
}
 800e498:	bf00      	nop
 800e49a:	3728      	adds	r7, #40	; 0x28
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	40011000 	.word	0x40011000
 800e4a4:	40011400 	.word	0x40011400
 800e4a8:	51eb851f 	.word	0x51eb851f

0800e4ac <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e4ba:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	220c      	movs	r2, #12
 800e4d2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	819a      	strh	r2, [r3, #12]
}
 800e4da:	bf00      	nop
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop

0800e4e8 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8a1b      	ldrh	r3, [r3, #16]
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e504:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	881a      	ldrh	r2, [r3, #0]
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800e50e:	4313      	orrs	r3, r2
 800e510:	b29a      	uxth	r2, r3
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	889b      	ldrh	r3, [r3, #4]
 800e516:	4313      	orrs	r3, r2
 800e518:	b29a      	uxth	r2, r3
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	88db      	ldrh	r3, [r3, #6]
 800e51e:	4313      	orrs	r3, r2
 800e520:	b29b      	uxth	r3, r3
 800e522:	461a      	mov	r2, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	4313      	orrs	r3, r2
 800e528:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	821a      	strh	r2, [r3, #16]
}
 800e532:	bf00      	nop
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop

0800e540 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2200      	movs	r2, #0
 800e558:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	80da      	strh	r2, [r3, #6]
}
 800e560:	bf00      	nop
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e578:	78fb      	ldrb	r3, [r7, #3]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d008      	beq.n	800e590 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	899b      	ldrh	r3, [r3, #12]
 800e582:	b29b      	uxth	r3, r3
 800e584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e588:	b29a      	uxth	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800e58e:	e007      	b.n	800e5a0 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	899b      	ldrh	r3, [r3, #12]
 800e594:	b29b      	uxth	r3, r3
 800e596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	819a      	strh	r2, [r3, #12]
  }
}
 800e5a0:	bf00      	nop
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	8b1b      	ldrh	r3, [r3, #24]
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	8b1b      	ldrh	r3, [r3, #24]
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	78fb      	ldrb	r3, [r7, #3]
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	831a      	strh	r2, [r3, #24]
}
 800e5da:	bf00      	nop
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop

0800e5e8 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e5f4:	78fb      	ldrb	r3, [r7, #3]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	899b      	ldrh	r3, [r3, #12]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e608:	b29a      	uxth	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
 800e60e:	e007      	b.n	800e620 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	899b      	ldrh	r3, [r3, #12]
 800e614:	b29b      	uxth	r3, r3
 800e616:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	819a      	strh	r2, [r3, #12]
  }
}  
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	460b      	mov	r3, r1
 800e636:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e638:	78fb      	ldrb	r3, [r7, #3]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d008      	beq.n	800e650 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8a9b      	ldrh	r3, [r3, #20]
 800e642:	b29b      	uxth	r3, r3
 800e644:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e648:	b29a      	uxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
 800e64e:	e007      	b.n	800e660 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	8a9b      	ldrh	r3, [r3, #20]
 800e654:	b29b      	uxth	r3, r3
 800e656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	829a      	strh	r2, [r3, #20]
  }
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	460b      	mov	r3, r1
 800e676:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800e678:	887b      	ldrh	r3, [r7, #2]
 800e67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e67e:	b29a      	uxth	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	809a      	strh	r2, [r3, #4]
}
 800e684:	bf00      	nop
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	889b      	ldrh	r3, [r3, #4]
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a2:	b29b      	uxth	r3, r3
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	8a1b      	ldrh	r3, [r3, #16]
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	f023 030f 	bic.w	r3, r3, #15
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	8a1b      	ldrh	r3, [r3, #16]
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	78fb      	ldrb	r3, [r7, #3]
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	821a      	strh	r2, [r3, #16]
}
 800e6de:	bf00      	nop
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop

0800e6ec <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800e6f8:	78fb      	ldrb	r3, [r7, #3]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d008      	beq.n	800e710 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	899b      	ldrh	r3, [r3, #12]
 800e702:	b29b      	uxth	r3, r3
 800e704:	f043 0302 	orr.w	r3, r3, #2
 800e708:	b29a      	uxth	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
 800e70e:	e007      	b.n	800e720 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	899b      	ldrh	r3, [r3, #12]
 800e714:	b29b      	uxth	r3, r3
 800e716:	f023 0302 	bic.w	r3, r3, #2
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	819a      	strh	r2, [r3, #12]
  }
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	460b      	mov	r3, r1
 800e736:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	899b      	ldrh	r3, [r3, #12]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e742:	b29a      	uxth	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	899b      	ldrh	r3, [r3, #12]
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	887b      	ldrh	r3, [r7, #2]
 800e750:	4313      	orrs	r3, r2
 800e752:	b29a      	uxth	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	819a      	strh	r2, [r3, #12]
}
 800e758:	bf00      	nop
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	8a1b      	ldrh	r3, [r3, #16]
 800e774:	b29b      	uxth	r3, r3
 800e776:	f023 0320 	bic.w	r3, r3, #32
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	8a1b      	ldrh	r3, [r3, #16]
 800e784:	b29a      	uxth	r2, r3
 800e786:	887b      	ldrh	r3, [r7, #2]
 800e788:	4313      	orrs	r3, r2
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	821a      	strh	r2, [r3, #16]
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e7a8:	78fb      	ldrb	r3, [r7, #3]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d008      	beq.n	800e7c0 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	8a1b      	ldrh	r3, [r3, #16]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
 800e7be:	e007      	b.n	800e7d0 <USART_LINCmd+0x34>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	8a1b      	ldrh	r3, [r3, #16]
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	821a      	strh	r2, [r3, #16]
  }
}
 800e7d0:	bf00      	nop
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	899b      	ldrh	r3, [r3, #12]
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	f043 0301 	orr.w	r3, r3, #1
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	819a      	strh	r2, [r3, #12]
}
 800e7f4:	bf00      	nop
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	460b      	mov	r3, r1
 800e80a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e80c:	78fb      	ldrb	r3, [r7, #3]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d008      	beq.n	800e824 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	8a9b      	ldrh	r3, [r3, #20]
 800e816:	b29b      	uxth	r3, r3
 800e818:	f043 0308 	orr.w	r3, r3, #8
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
 800e822:	e007      	b.n	800e834 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	8a9b      	ldrh	r3, [r3, #20]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	f023 0308 	bic.w	r3, r3, #8
 800e82e:	b29a      	uxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	829a      	strh	r2, [r3, #20]
  }
}
 800e834:	bf00      	nop
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	8b1b      	ldrh	r3, [r3, #24]
 800e850:	b29b      	uxth	r3, r3
 800e852:	b2db      	uxtb	r3, r3
 800e854:	b29a      	uxth	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	8b1b      	ldrh	r3, [r3, #24]
 800e85e:	b29a      	uxth	r2, r3
 800e860:	78fb      	ldrb	r3, [r7, #3]
 800e862:	b29b      	uxth	r3, r3
 800e864:	021b      	lsls	r3, r3, #8
 800e866:	b29b      	uxth	r3, r3
 800e868:	4313      	orrs	r3, r2
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	831a      	strh	r2, [r3, #24]
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	460b      	mov	r3, r1
 800e886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e888:	78fb      	ldrb	r3, [r7, #3]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d008      	beq.n	800e8a0 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	8a9b      	ldrh	r3, [r3, #20]
 800e892:	b29b      	uxth	r3, r3
 800e894:	f043 0320 	orr.w	r3, r3, #32
 800e898:	b29a      	uxth	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
 800e89e:	e007      	b.n	800e8b0 <USART_SmartCardCmd+0x34>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8a9b      	ldrh	r3, [r3, #20]
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	f023 0320 	bic.w	r3, r3, #32
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	829a      	strh	r2, [r3, #20]
  }
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e8c8:	78fb      	ldrb	r3, [r7, #3]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d008      	beq.n	800e8e0 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	8a9b      	ldrh	r3, [r3, #20]
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	f043 0310 	orr.w	r3, r3, #16
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
 800e8de:	e007      	b.n	800e8f0 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	8a9b      	ldrh	r3, [r3, #20]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	f023 0310 	bic.w	r3, r3, #16
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	829a      	strh	r2, [r3, #20]
  }
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	460b      	mov	r3, r1
 800e906:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8a9b      	ldrh	r3, [r3, #20]
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	f023 0304 	bic.w	r3, r3, #4
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	8a9b      	ldrh	r3, [r3, #20]
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	887b      	ldrh	r3, [r7, #2]
 800e920:	4313      	orrs	r3, r2
 800e922:	b29a      	uxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	829a      	strh	r2, [r3, #20]
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	460b      	mov	r3, r1
 800e93e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800e940:	78fb      	ldrb	r3, [r7, #3]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d008      	beq.n	800e958 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	8a9b      	ldrh	r3, [r3, #20]
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	f043 0302 	orr.w	r3, r3, #2
 800e950:	b29a      	uxth	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
 800e956:	e007      	b.n	800e968 <USART_IrDACmd+0x34>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	8a9b      	ldrh	r3, [r3, #20]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	f023 0302 	bic.w	r3, r3, #2
 800e962:	b29a      	uxth	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	829a      	strh	r2, [r3, #20]
  }
}
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	807b      	strh	r3, [r7, #2]
 800e980:	4613      	mov	r3, r2
 800e982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800e984:	787b      	ldrb	r3, [r7, #1]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d008      	beq.n	800e99c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	8a9b      	ldrh	r3, [r3, #20]
 800e98e:	b29a      	uxth	r2, r3
 800e990:	887b      	ldrh	r3, [r7, #2]
 800e992:	4313      	orrs	r3, r2
 800e994:	b29a      	uxth	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 800e99a:	e009      	b.n	800e9b0 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	8a9b      	ldrh	r3, [r3, #20]
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	887b      	ldrh	r3, [r7, #2]
 800e9a4:	43db      	mvns	r3, r3
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	4013      	ands	r3, r2
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	829a      	strh	r2, [r3, #20]
  }
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b087      	sub	sp, #28
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	807b      	strh	r3, [r7, #2]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	613b      	str	r3, [r7, #16]
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	60fb      	str	r3, [r7, #12]
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800e9e0:	887b      	ldrh	r3, [r7, #2]
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	095b      	lsrs	r3, r3, #5
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800e9ea:	887b      	ldrh	r3, [r7, #2]
 800e9ec:	f003 031f 	and.w	r3, r3, #31
 800e9f0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e9fa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d103      	bne.n	800ea0a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	330c      	adds	r3, #12
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	e009      	b.n	800ea1e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	2b02      	cmp	r3, #2
 800ea0e:	d103      	bne.n	800ea18 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	3310      	adds	r3, #16
 800ea14:	617b      	str	r3, [r7, #20]
 800ea16:	e002      	b.n	800ea1e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	3314      	adds	r3, #20
 800ea1c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800ea1e:	787b      	ldrb	r3, [r7, #1]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d006      	beq.n	800ea32 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	6811      	ldr	r1, [r2, #0]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	430a      	orrs	r2, r1
 800ea2e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800ea30:	e006      	b.n	800ea40 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	697a      	ldr	r2, [r7, #20]
 800ea36:	6811      	ldr	r1, [r2, #0]
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	43d2      	mvns	r2, r2
 800ea3c:	400a      	ands	r2, r1
 800ea3e:	601a      	str	r2, [r3, #0]
  }
}
 800ea40:	bf00      	nop
 800ea42:	371c      	adds	r7, #28
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	887b      	ldrh	r3, [r7, #2]
 800ea64:	4013      	ands	r3, r2
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	73fb      	strb	r3, [r7, #15]
 800ea70:	e001      	b.n	800ea76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800ea72:	2300      	movs	r3, #0
 800ea74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800ea90:	887b      	ldrh	r3, [r7, #2]
 800ea92:	43db      	mvns	r3, r3
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	801a      	strh	r2, [r3, #0]
}
 800ea9a:	bf00      	nop
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop

0800eaa8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b087      	sub	sp, #28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	460b      	mov	r3, r1
 800eab2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800eab4:	2300      	movs	r3, #0
 800eab6:	60fb      	str	r3, [r7, #12]
 800eab8:	2300      	movs	r3, #0
 800eaba:	617b      	str	r3, [r7, #20]
 800eabc:	2300      	movs	r3, #0
 800eabe:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800eac0:	2300      	movs	r3, #0
 800eac2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800eac4:	887b      	ldrh	r3, [r7, #2]
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	095b      	lsrs	r3, r3, #5
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800eace:	887b      	ldrh	r3, [r7, #2]
 800ead0:	f003 031f 	and.w	r3, r3, #31
 800ead4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800ead6:	2201      	movs	r2, #1
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	fa02 f303 	lsl.w	r3, r2, r3
 800eade:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d107      	bne.n	800eaf6 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	899b      	ldrh	r3, [r3, #12]
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	461a      	mov	r2, r3
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	617b      	str	r3, [r7, #20]
 800eaf4:	e011      	b.n	800eb1a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d107      	bne.n	800eb0c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8a1b      	ldrh	r3, [r3, #16]
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	461a      	mov	r2, r3
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	4013      	ands	r3, r2
 800eb08:	617b      	str	r3, [r7, #20]
 800eb0a:	e006      	b.n	800eb1a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	8a9b      	ldrh	r3, [r3, #20]
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	461a      	mov	r2, r3
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	4013      	ands	r3, r2
 800eb18:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800eb1a:	887b      	ldrh	r3, [r7, #2]
 800eb1c:	0a1b      	lsrs	r3, r3, #8
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800eb22:	2201      	movs	r2, #1
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	fa02 f303 	lsl.w	r3, r2, r3
 800eb2a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	881b      	ldrh	r3, [r3, #0]
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	461a      	mov	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	4013      	ands	r3, r2
 800eb38:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d005      	beq.n	800eb4c <USART_GetITStatus+0xa4>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d002      	beq.n	800eb4c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800eb46:	2301      	movs	r3, #1
 800eb48:	74fb      	strb	r3, [r7, #19]
 800eb4a:	e001      	b.n	800eb50 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800eb50:	7cfb      	ldrb	r3, [r7, #19]
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	371c      	adds	r7, #28
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop

0800eb60 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	81fb      	strh	r3, [r7, #14]
 800eb70:	2300      	movs	r3, #0
 800eb72:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800eb74:	887b      	ldrh	r3, [r7, #2]
 800eb76:	0a1b      	lsrs	r3, r3, #8
 800eb78:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800eb7a:	89fb      	ldrh	r3, [r7, #14]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb82:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800eb84:	89bb      	ldrh	r3, [r7, #12]
 800eb86:	43db      	mvns	r3, r3
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	801a      	strh	r2, [r3, #0]
}
 800eb8e:	bf00      	nop
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop

0800eb9c <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800eba0:	2101      	movs	r1, #1
 800eba2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eba6:	f7fb f8e5 	bl	8009d74 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800ebaa:	2100      	movs	r1, #0
 800ebac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ebb0:	f7fb f8e0 	bl	8009d74 <RCC_APB1PeriphResetCmd>
}
 800ebb4:	bf00      	nop
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800ebc4:	4b08      	ldr	r3, [pc, #32]	; (800ebe8 <WWDG_SetPrescaler+0x30>)
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800ebcc:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800ebd6:	4a04      	ldr	r2, [pc, #16]	; (800ebe8 <WWDG_SetPrescaler+0x30>)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6053      	str	r3, [r2, #4]
}
 800ebdc:	bf00      	nop
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr
 800ebe8:	40002c00 	.word	0x40002c00

0800ebec <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800ebfa:	4b0a      	ldr	r3, [pc, #40]	; (800ec24 <WWDG_SetWindowValue+0x38>)
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ec02:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800ec10:	4a04      	ldr	r2, [pc, #16]	; (800ec24 <WWDG_SetWindowValue+0x38>)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6053      	str	r3, [r2, #4]
}
 800ec16:	bf00      	nop
 800ec18:	3714      	adds	r7, #20
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	40002c00 	.word	0x40002c00

0800ec28 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800ec2c:	4b03      	ldr	r3, [pc, #12]	; (800ec3c <WWDG_EnableIT+0x14>)
 800ec2e:	2201      	movs	r2, #1
 800ec30:	601a      	str	r2, [r3, #0]
}
 800ec32:	bf00      	nop
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr
 800ec3c:	420580a4 	.word	0x420580a4

0800ec40 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800ec4a:	4a05      	ldr	r2, [pc, #20]	; (800ec60 <WWDG_SetCounter+0x20>)
 800ec4c:	79fb      	ldrb	r3, [r7, #7]
 800ec4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec52:	6013      	str	r3, [r2, #0]
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	40002c00 	.word	0x40002c00

0800ec64 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800ec6e:	4a06      	ldr	r2, [pc, #24]	; (800ec88 <WWDG_Enable+0x24>)
 800ec70:	79fb      	ldrb	r3, [r7, #7]
 800ec72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	6013      	str	r3, [r2, #0]
}
 800ec7a:	bf00      	nop
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	40002c00 	.word	0x40002c00

0800ec8c <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800ec92:	2300      	movs	r3, #0
 800ec94:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800ec96:	4b08      	ldr	r3, [pc, #32]	; (800ecb8 <WWDG_GetFlagStatus+0x2c>)
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d002      	beq.n	800eca4 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	71fb      	strb	r3, [r7, #7]
 800eca2:	e001      	b.n	800eca8 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 800eca4:	2300      	movs	r3, #0
 800eca6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800eca8:	79fb      	ldrb	r3, [r7, #7]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	370c      	adds	r7, #12
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	40002c00 	.word	0x40002c00

0800ecbc <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800ecc0:	4b03      	ldr	r3, [pc, #12]	; (800ecd0 <WWDG_ClearFlag+0x14>)
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	609a      	str	r2, [r3, #8]
}
 800ecc6:	bf00      	nop
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	40002c00 	.word	0x40002c00

0800ecd4 <init>:


const uint16_t LED[4] = {GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15};
uint16_t LEDS = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;

void init() {
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800ecda:	2101      	movs	r1, #1
 800ecdc:	2008      	movs	r0, #8
 800ecde:	f7fa ff49 	bl	8009b74 <RCC_AHB1PeriphClockCmd>
    GPIO_InitTypeDef gpio;
    GPIO_StructInit(&gpio);
 800ece2:	463b      	mov	r3, r7
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7f8 ff19 	bl	8007b1c <GPIO_StructInit>
    gpio.GPIO_Mode = GPIO_Mode_OUT;
 800ecea:	2301      	movs	r3, #1
 800ecec:	713b      	strb	r3, [r7, #4]
    gpio.GPIO_Pin= LEDS;
 800ecee:	4b09      	ldr	r3, [pc, #36]	; (800ed14 <init+0x40>)
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	603b      	str	r3, [r7, #0]
    GPIO_Init(GPIOD, &gpio);
 800ecf4:	463b      	mov	r3, r7
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	4807      	ldr	r0, [pc, #28]	; (800ed18 <init+0x44>)
 800ecfa:	f7f8 fe81 	bl	8007a00 <GPIO_Init>

    GPIO_SetBits(GPIOD, LEDS);
 800ecfe:	4b05      	ldr	r3, [pc, #20]	; (800ed14 <init+0x40>)
 800ed00:	881b      	ldrh	r3, [r3, #0]
 800ed02:	4619      	mov	r1, r3
 800ed04:	4804      	ldr	r0, [pc, #16]	; (800ed18 <init+0x44>)
 800ed06:	f7f8 ff95 	bl	8007c34 <GPIO_SetBits>
}
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20000014 	.word	0x20000014
 800ed18:	40020c00 	.word	0x40020c00

0800ed1c <loop>:

void loop() {
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	af00      	add	r7, sp, #0
    static uint32_t counter = 0;

    counter++;
 800ed20:	4b0d      	ldr	r3, [pc, #52]	; (800ed58 <loop+0x3c>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3301      	adds	r3, #1
 800ed26:	4a0c      	ldr	r2, [pc, #48]	; (800ed58 <loop+0x3c>)
 800ed28:	6013      	str	r3, [r2, #0]
    GPIO_ResetBits(GPIOD, LEDS);
 800ed2a:	4b0c      	ldr	r3, [pc, #48]	; (800ed5c <loop+0x40>)
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	4619      	mov	r1, r3
 800ed30:	480b      	ldr	r0, [pc, #44]	; (800ed60 <loop+0x44>)
 800ed32:	f7f8 ff8f 	bl	8007c54 <GPIO_ResetBits>
    GPIO_SetBits(GPIOD, LED[counter % 4]);
 800ed36:	4b08      	ldr	r3, [pc, #32]	; (800ed58 <loop+0x3c>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0303 	and.w	r3, r3, #3
 800ed3e:	4a09      	ldr	r2, [pc, #36]	; (800ed64 <loop+0x48>)
 800ed40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed44:	4619      	mov	r1, r3
 800ed46:	4806      	ldr	r0, [pc, #24]	; (800ed60 <loop+0x44>)
 800ed48:	f7f8 ff74 	bl	8007c34 <GPIO_SetBits>

    delay(1000);
 800ed4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ed50:	f000 f80a 	bl	800ed68 <delay>
}
 800ed54:	bf00      	nop
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20000048 	.word	0x20000048
 800ed5c:	20000014 	.word	0x20000014
 800ed60:	40020c00 	.word	0x40020c00
 800ed64:	0800f6b0 	.word	0x0800f6b0

0800ed68 <delay>:

void delay(uint32_t ms) {
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
    ms *= 3360;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800ed76:	fb02 f303 	mul.w	r3, r2, r3
 800ed7a:	607b      	str	r3, [r7, #4]
    while(ms--) {
 800ed7c:	e000      	b.n	800ed80 <delay+0x18>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800ed7e:	bf00      	nop
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	1e5a      	subs	r2, r3, #1
 800ed84:	607a      	str	r2, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1f9      	bne.n	800ed7e <delay+0x16>
        __NOP();
    }
}
 800ed8a:	bf00      	nop
 800ed8c:	370c      	adds	r7, #12
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop

0800ed98 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
  int i = 0;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	607b      	str	r3, [r7, #4]

  init();
 800eda2:	f7ff ff97 	bl	800ecd4 <init>
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  do {
      loop();
 800eda6:	f7ff ffb9 	bl	800ed1c <loop>
  } while (1);
 800edaa:	e7fc      	b.n	800eda6 <main+0xe>
 800edac:	0800f6c4 	.word	0x0800f6c4
 800edb0:	20000000 	.word	0x20000000
 800edb4:	2000002c 	.word	0x2000002c
 800edb8:	2000002c 	.word	0x2000002c
 800edbc:	20000050 	.word	0x20000050

0800edc0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800edc0:	b480      	push	{r7}
 800edc2:	af00      	add	r7, sp, #0
}
 800edc4:	bf00      	nop
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop

0800edd0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800edd0:	b480      	push	{r7}
 800edd2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800edd4:	e7fe      	b.n	800edd4 <HardFault_Handler+0x4>
 800edd6:	bf00      	nop

0800edd8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800edd8:	b480      	push	{r7}
 800edda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800eddc:	e7fe      	b.n	800eddc <MemManage_Handler+0x4>
 800edde:	bf00      	nop

0800ede0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800ede0:	b480      	push	{r7}
 800ede2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800ede4:	e7fe      	b.n	800ede4 <BusFault_Handler+0x4>
 800ede6:	bf00      	nop

0800ede8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800ede8:	b480      	push	{r7}
 800edea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800edec:	e7fe      	b.n	800edec <UsageFault_Handler+0x4>
 800edee:	bf00      	nop

0800edf0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800edf0:	b480      	push	{r7}
 800edf2:	af00      	add	r7, sp, #0
}
 800edf4:	bf00      	nop
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop

0800ee00 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800ee00:	b480      	push	{r7}
 800ee02:	af00      	add	r7, sp, #0
}
 800ee04:	bf00      	nop
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop

0800ee10 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
}
 800ee14:	bf00      	nop
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop

0800ee20 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800ee20:	b480      	push	{r7}
 800ee22:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800ee24:	bf00      	nop
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ee34:	4a16      	ldr	r2, [pc, #88]	; (800ee90 <SystemInit+0x60>)
 800ee36:	4b16      	ldr	r3, [pc, #88]	; (800ee90 <SystemInit+0x60>)
 800ee38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ee44:	4a13      	ldr	r2, [pc, #76]	; (800ee94 <SystemInit+0x64>)
 800ee46:	4b13      	ldr	r3, [pc, #76]	; (800ee94 <SystemInit+0x64>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f043 0301 	orr.w	r3, r3, #1
 800ee4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ee50:	4b10      	ldr	r3, [pc, #64]	; (800ee94 <SystemInit+0x64>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ee56:	4a0f      	ldr	r2, [pc, #60]	; (800ee94 <SystemInit+0x64>)
 800ee58:	4b0e      	ldr	r3, [pc, #56]	; (800ee94 <SystemInit+0x64>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ee60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ee66:	4b0b      	ldr	r3, [pc, #44]	; (800ee94 <SystemInit+0x64>)
 800ee68:	4a0b      	ldr	r2, [pc, #44]	; (800ee98 <SystemInit+0x68>)
 800ee6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ee6c:	4a09      	ldr	r2, [pc, #36]	; (800ee94 <SystemInit+0x64>)
 800ee6e:	4b09      	ldr	r3, [pc, #36]	; (800ee94 <SystemInit+0x64>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ee76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ee78:	4b06      	ldr	r3, [pc, #24]	; (800ee94 <SystemInit+0x64>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800ee7e:	f000 f88b 	bl	800ef98 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ee82:	4b03      	ldr	r3, [pc, #12]	; (800ee90 <SystemInit+0x60>)
 800ee84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ee88:	609a      	str	r2, [r3, #8]
#endif
}
 800ee8a:	bf00      	nop
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	e000ed00 	.word	0xe000ed00
 800ee94:	40023800 	.word	0x40023800
 800ee98:	24003010 	.word	0x24003010

0800ee9c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b087      	sub	sp, #28
 800eea0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800eea2:	2300      	movs	r3, #0
 800eea4:	613b      	str	r3, [r7, #16]
 800eea6:	2300      	movs	r3, #0
 800eea8:	617b      	str	r3, [r7, #20]
 800eeaa:	2302      	movs	r3, #2
 800eeac:	60fb      	str	r3, [r7, #12]
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60bb      	str	r3, [r7, #8]
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800eeb6:	4b33      	ldr	r3, [pc, #204]	; (800ef84 <SystemCoreClockUpdate+0xe8>)
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	f003 030c 	and.w	r3, r3, #12
 800eebe:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d007      	beq.n	800eed6 <SystemCoreClockUpdate+0x3a>
 800eec6:	2b08      	cmp	r3, #8
 800eec8:	d009      	beq.n	800eede <SystemCoreClockUpdate+0x42>
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d13f      	bne.n	800ef4e <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800eece:	4b2e      	ldr	r3, [pc, #184]	; (800ef88 <SystemCoreClockUpdate+0xec>)
 800eed0:	4a2e      	ldr	r2, [pc, #184]	; (800ef8c <SystemCoreClockUpdate+0xf0>)
 800eed2:	601a      	str	r2, [r3, #0]
      break;
 800eed4:	e03f      	b.n	800ef56 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800eed6:	4b2c      	ldr	r3, [pc, #176]	; (800ef88 <SystemCoreClockUpdate+0xec>)
 800eed8:	4a2d      	ldr	r2, [pc, #180]	; (800ef90 <SystemCoreClockUpdate+0xf4>)
 800eeda:	601a      	str	r2, [r3, #0]
      break;
 800eedc:	e03b      	b.n	800ef56 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800eede:	4b29      	ldr	r3, [pc, #164]	; (800ef84 <SystemCoreClockUpdate+0xe8>)
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eee6:	0d9b      	lsrs	r3, r3, #22
 800eee8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eeea:	4b26      	ldr	r3, [pc, #152]	; (800ef84 <SystemCoreClockUpdate+0xe8>)
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eef2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00d      	beq.n	800ef16 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800eefa:	4a25      	ldr	r2, [pc, #148]	; (800ef90 <SystemCoreClockUpdate+0xf4>)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	fbb2 f2f3 	udiv	r2, r2, r3
 800ef02:	4b20      	ldr	r3, [pc, #128]	; (800ef84 <SystemCoreClockUpdate+0xe8>)
 800ef04:	6859      	ldr	r1, [r3, #4]
 800ef06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ef0a:	400b      	ands	r3, r1
 800ef0c:	099b      	lsrs	r3, r3, #6
 800ef0e:	fb03 f302 	mul.w	r3, r3, r2
 800ef12:	617b      	str	r3, [r7, #20]
 800ef14:	e00c      	b.n	800ef30 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800ef16:	4a1d      	ldr	r2, [pc, #116]	; (800ef8c <SystemCoreClockUpdate+0xf0>)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ef1e:	4b19      	ldr	r3, [pc, #100]	; (800ef84 <SystemCoreClockUpdate+0xe8>)
 800ef20:	6859      	ldr	r1, [r3, #4]
 800ef22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ef26:	400b      	ands	r3, r1
 800ef28:	099b      	lsrs	r3, r3, #6
 800ef2a:	fb03 f302 	mul.w	r3, r3, r2
 800ef2e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800ef30:	4b14      	ldr	r3, [pc, #80]	; (800ef84 <SystemCoreClockUpdate+0xe8>)
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ef38:	0c1b      	lsrs	r3, r3, #16
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	005b      	lsls	r3, r3, #1
 800ef3e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800ef40:	697a      	ldr	r2, [r7, #20]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef48:	4a0f      	ldr	r2, [pc, #60]	; (800ef88 <SystemCoreClockUpdate+0xec>)
 800ef4a:	6013      	str	r3, [r2, #0]
      break;
 800ef4c:	e003      	b.n	800ef56 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800ef4e:	4b0e      	ldr	r3, [pc, #56]	; (800ef88 <SystemCoreClockUpdate+0xec>)
 800ef50:	4a0e      	ldr	r2, [pc, #56]	; (800ef8c <SystemCoreClockUpdate+0xf0>)
 800ef52:	601a      	str	r2, [r3, #0]
      break;
 800ef54:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800ef56:	4b0b      	ldr	r3, [pc, #44]	; (800ef84 <SystemCoreClockUpdate+0xe8>)
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef5e:	091b      	lsrs	r3, r3, #4
 800ef60:	4a0c      	ldr	r2, [pc, #48]	; (800ef94 <SystemCoreClockUpdate+0xf8>)
 800ef62:	5cd3      	ldrb	r3, [r2, r3]
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800ef68:	4b07      	ldr	r3, [pc, #28]	; (800ef88 <SystemCoreClockUpdate+0xec>)
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef72:	4a05      	ldr	r2, [pc, #20]	; (800ef88 <SystemCoreClockUpdate+0xec>)
 800ef74:	6013      	str	r3, [r2, #0]
}
 800ef76:	bf00      	nop
 800ef78:	371c      	adds	r7, #28
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	40023800 	.word	0x40023800
 800ef88:	20000018 	.word	0x20000018
 800ef8c:	00f42400 	.word	0x00f42400
 800ef90:	017d7840 	.word	0x017d7840
 800ef94:	2000001c 	.word	0x2000001c

0800ef98 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	607b      	str	r3, [r7, #4]
 800efa2:	2300      	movs	r3, #0
 800efa4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800efa6:	4a36      	ldr	r2, [pc, #216]	; (800f080 <SetSysClock+0xe8>)
 800efa8:	4b35      	ldr	r3, [pc, #212]	; (800f080 <SetSysClock+0xe8>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800efb0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800efb2:	4b33      	ldr	r3, [pc, #204]	; (800f080 <SetSysClock+0xe8>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	3301      	adds	r3, #1
 800efc0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d103      	bne.n	800efd0 <SetSysClock+0x38>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800efce:	d1f0      	bne.n	800efb2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800efd0:	4b2b      	ldr	r3, [pc, #172]	; (800f080 <SetSysClock+0xe8>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d002      	beq.n	800efe2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800efdc:	2301      	movs	r3, #1
 800efde:	603b      	str	r3, [r7, #0]
 800efe0:	e001      	b.n	800efe6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800efe2:	2300      	movs	r3, #0
 800efe4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d142      	bne.n	800f072 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800efec:	4a24      	ldr	r2, [pc, #144]	; (800f080 <SetSysClock+0xe8>)
 800efee:	4b24      	ldr	r3, [pc, #144]	; (800f080 <SetSysClock+0xe8>)
 800eff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eff6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800eff8:	4a22      	ldr	r2, [pc, #136]	; (800f084 <SetSysClock+0xec>)
 800effa:	4b22      	ldr	r3, [pc, #136]	; (800f084 <SetSysClock+0xec>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f002:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800f004:	4a1e      	ldr	r2, [pc, #120]	; (800f080 <SetSysClock+0xe8>)
 800f006:	4b1e      	ldr	r3, [pc, #120]	; (800f080 <SetSysClock+0xe8>)
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800f00c:	4a1c      	ldr	r2, [pc, #112]	; (800f080 <SetSysClock+0xe8>)
 800f00e:	4b1c      	ldr	r3, [pc, #112]	; (800f080 <SetSysClock+0xe8>)
 800f010:	689b      	ldr	r3, [r3, #8]
 800f012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f016:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800f018:	4a19      	ldr	r2, [pc, #100]	; (800f080 <SetSysClock+0xe8>)
 800f01a:	4b19      	ldr	r3, [pc, #100]	; (800f080 <SetSysClock+0xe8>)
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800f022:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800f024:	4b16      	ldr	r3, [pc, #88]	; (800f080 <SetSysClock+0xe8>)
 800f026:	4a18      	ldr	r2, [pc, #96]	; (800f088 <SetSysClock+0xf0>)
 800f028:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800f02a:	4a15      	ldr	r2, [pc, #84]	; (800f080 <SetSysClock+0xe8>)
 800f02c:	4b14      	ldr	r3, [pc, #80]	; (800f080 <SetSysClock+0xe8>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f034:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800f036:	bf00      	nop
 800f038:	4b11      	ldr	r3, [pc, #68]	; (800f080 <SetSysClock+0xe8>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f040:	2b00      	cmp	r3, #0
 800f042:	d0f9      	beq.n	800f038 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800f044:	4b11      	ldr	r3, [pc, #68]	; (800f08c <SetSysClock+0xf4>)
 800f046:	f240 7205 	movw	r2, #1797	; 0x705
 800f04a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800f04c:	4a0c      	ldr	r2, [pc, #48]	; (800f080 <SetSysClock+0xe8>)
 800f04e:	4b0c      	ldr	r3, [pc, #48]	; (800f080 <SetSysClock+0xe8>)
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	f023 0303 	bic.w	r3, r3, #3
 800f056:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800f058:	4a09      	ldr	r2, [pc, #36]	; (800f080 <SetSysClock+0xe8>)
 800f05a:	4b09      	ldr	r3, [pc, #36]	; (800f080 <SetSysClock+0xe8>)
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	f043 0302 	orr.w	r3, r3, #2
 800f062:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800f064:	bf00      	nop
 800f066:	4b06      	ldr	r3, [pc, #24]	; (800f080 <SetSysClock+0xe8>)
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f003 030c 	and.w	r3, r3, #12
 800f06e:	2b08      	cmp	r3, #8
 800f070:	d1f9      	bne.n	800f066 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800f072:	bf00      	nop
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	40023800 	.word	0x40023800
 800f084:	40007000 	.word	0x40007000
 800f088:	07405419 	.word	0x07405419
 800f08c:	40023c00 	.word	0x40023c00

0800f090 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800f090:	b480      	push	{r7}
 800f092:	b087      	sub	sp, #28
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800f09c:	2301      	movs	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800f0a0:	e004      	b.n	800f0ac <ts_itoa+0x1c>
		div *= base;
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	fb02 f303 	mul.w	r3, r2, r3
 800f0aa:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d2f3      	bcs.n	800f0a2 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 800f0ba:	e029      	b.n	800f110 <ts_itoa+0x80>
	{
		int num = d/div;
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	68ba      	ldr	r2, [r7, #8]
 800f0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0c4:	613b      	str	r3, [r7, #16]
		d = d%div;
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0ce:	fb02 f201 	mul.w	r2, r2, r1
 800f0d2:	1a9b      	subs	r3, r3, r2
 800f0d4:	60bb      	str	r3, [r7, #8]
		div /= base;
 800f0d6:	697a      	ldr	r2, [r7, #20]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	fb92 f3f3 	sdiv	r3, r2, r3
 800f0de:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	2b09      	cmp	r3, #9
 800f0e4:	dd0a      	ble.n	800f0fc <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	1c59      	adds	r1, r3, #1
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	6011      	str	r1, [r2, #0]
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	b2d2      	uxtb	r2, r2
 800f0f4:	3237      	adds	r2, #55	; 0x37
 800f0f6:	b2d2      	uxtb	r2, r2
 800f0f8:	701a      	strb	r2, [r3, #0]
 800f0fa:	e009      	b.n	800f110 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	1c59      	adds	r1, r3, #1
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	6011      	str	r1, [r2, #0]
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	b2d2      	uxtb	r2, r2
 800f10a:	3230      	adds	r2, #48	; 0x30
 800f10c:	b2d2      	uxtb	r2, r2
 800f10e:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1d2      	bne.n	800f0bc <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800f116:	bf00      	nop
 800f118:	371c      	adds	r7, #28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop

0800f124 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b088      	sub	sp, #32
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800f134:	e07d      	b.n	800f232 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	2b25      	cmp	r3, #37	; 0x25
 800f13c:	d171      	bne.n	800f222 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	3301      	adds	r3, #1
 800f142:	60bb      	str	r3, [r7, #8]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	2b64      	cmp	r3, #100	; 0x64
 800f14a:	d01e      	beq.n	800f18a <ts_formatstring+0x66>
 800f14c:	2b64      	cmp	r3, #100	; 0x64
 800f14e:	dc06      	bgt.n	800f15e <ts_formatstring+0x3a>
 800f150:	2b58      	cmp	r3, #88	; 0x58
 800f152:	d050      	beq.n	800f1f6 <ts_formatstring+0xd2>
 800f154:	2b63      	cmp	r3, #99	; 0x63
 800f156:	d00e      	beq.n	800f176 <ts_formatstring+0x52>
 800f158:	2b25      	cmp	r3, #37	; 0x25
 800f15a:	d058      	beq.n	800f20e <ts_formatstring+0xea>
 800f15c:	e05d      	b.n	800f21a <ts_formatstring+0xf6>
 800f15e:	2b73      	cmp	r3, #115	; 0x73
 800f160:	d02b      	beq.n	800f1ba <ts_formatstring+0x96>
 800f162:	2b73      	cmp	r3, #115	; 0x73
 800f164:	dc02      	bgt.n	800f16c <ts_formatstring+0x48>
 800f166:	2b69      	cmp	r3, #105	; 0x69
 800f168:	d00f      	beq.n	800f18a <ts_formatstring+0x66>
 800f16a:	e056      	b.n	800f21a <ts_formatstring+0xf6>
 800f16c:	2b75      	cmp	r3, #117	; 0x75
 800f16e:	d037      	beq.n	800f1e0 <ts_formatstring+0xbc>
 800f170:	2b78      	cmp	r3, #120	; 0x78
 800f172:	d040      	beq.n	800f1f6 <ts_formatstring+0xd2>
 800f174:	e051      	b.n	800f21a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	1c5a      	adds	r2, r3, #1
 800f17a:	60fa      	str	r2, [r7, #12]
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	1d11      	adds	r1, r2, #4
 800f180:	6079      	str	r1, [r7, #4]
 800f182:	6812      	ldr	r2, [r2, #0]
 800f184:	b2d2      	uxtb	r2, r2
 800f186:	701a      	strb	r2, [r3, #0]
				break;
 800f188:	e047      	b.n	800f21a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	1d1a      	adds	r2, r3, #4
 800f18e:	607a      	str	r2, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	2b00      	cmp	r3, #0
 800f198:	da07      	bge.n	800f1aa <ts_formatstring+0x86>
					{
						val *= -1;
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	425b      	negs	r3, r3
 800f19e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	1c5a      	adds	r2, r3, #1
 800f1a4:	60fa      	str	r2, [r7, #12]
 800f1a6:	222d      	movs	r2, #45	; 0x2d
 800f1a8:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800f1aa:	69f9      	ldr	r1, [r7, #28]
 800f1ac:	f107 030c 	add.w	r3, r7, #12
 800f1b0:	220a      	movs	r2, #10
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff ff6c 	bl	800f090 <ts_itoa>
				}
				break;
 800f1b8:	e02f      	b.n	800f21a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	1d1a      	adds	r2, r3, #4
 800f1be:	607a      	str	r2, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800f1c4:	e007      	b.n	800f1d6 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	1c5a      	adds	r2, r3, #1
 800f1ca:	60fa      	str	r2, [r7, #12]
 800f1cc:	69ba      	ldr	r2, [r7, #24]
 800f1ce:	1c51      	adds	r1, r2, #1
 800f1d0:	61b9      	str	r1, [r7, #24]
 800f1d2:	7812      	ldrb	r2, [r2, #0]
 800f1d4:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1f3      	bne.n	800f1c6 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 800f1de:	e01c      	b.n	800f21a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	1d1a      	adds	r2, r3, #4
 800f1e4:	607a      	str	r2, [r7, #4]
 800f1e6:	6819      	ldr	r1, [r3, #0]
 800f1e8:	f107 030c 	add.w	r3, r7, #12
 800f1ec:	220a      	movs	r2, #10
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7ff ff4e 	bl	800f090 <ts_itoa>
				break;
 800f1f4:	e011      	b.n	800f21a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	1d1a      	adds	r2, r3, #4
 800f1fa:	607a      	str	r2, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4619      	mov	r1, r3
 800f200:	f107 030c 	add.w	r3, r7, #12
 800f204:	2210      	movs	r2, #16
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff ff42 	bl	800f090 <ts_itoa>
				break;
 800f20c:	e005      	b.n	800f21a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	60fa      	str	r2, [r7, #12]
 800f214:	2225      	movs	r2, #37	; 0x25
 800f216:	701a      	strb	r2, [r3, #0]
				  break;
 800f218:	bf00      	nop
			}
			fmt++;
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	3301      	adds	r3, #1
 800f21e:	60bb      	str	r3, [r7, #8]
 800f220:	e007      	b.n	800f232 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	1c5a      	adds	r2, r3, #1
 800f226:	60fa      	str	r2, [r7, #12]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	1c51      	adds	r1, r2, #1
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	7812      	ldrb	r2, [r2, #0]
 800f230:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	f47f af7d 	bne.w	800f136 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2200      	movs	r2, #0
 800f240:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	461a      	mov	r2, r3
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	1ad3      	subs	r3, r2, r3
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3720      	adds	r7, #32
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop

0800f254 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800f254:	b480      	push	{r7}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	int length = 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800f262:	e081      	b.n	800f368 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	2b25      	cmp	r3, #37	; 0x25
 800f26a:	d177      	bne.n	800f35c <ts_formatlength+0x108>
		{
			++fmt;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	3301      	adds	r3, #1
 800f270:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	3b58      	subs	r3, #88	; 0x58
 800f278:	2b20      	cmp	r3, #32
 800f27a:	d86a      	bhi.n	800f352 <ts_formatlength+0xfe>
 800f27c:	a201      	add	r2, pc, #4	; (adr r2, 800f284 <ts_formatlength+0x30>)
 800f27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f282:	bf00      	nop
 800f284:	0800f345 	.word	0x0800f345
 800f288:	0800f353 	.word	0x0800f353
 800f28c:	0800f353 	.word	0x0800f353
 800f290:	0800f353 	.word	0x0800f353
 800f294:	0800f353 	.word	0x0800f353
 800f298:	0800f353 	.word	0x0800f353
 800f29c:	0800f353 	.word	0x0800f353
 800f2a0:	0800f353 	.word	0x0800f353
 800f2a4:	0800f353 	.word	0x0800f353
 800f2a8:	0800f353 	.word	0x0800f353
 800f2ac:	0800f353 	.word	0x0800f353
 800f2b0:	0800f309 	.word	0x0800f309
 800f2b4:	0800f317 	.word	0x0800f317
 800f2b8:	0800f353 	.word	0x0800f353
 800f2bc:	0800f353 	.word	0x0800f353
 800f2c0:	0800f353 	.word	0x0800f353
 800f2c4:	0800f353 	.word	0x0800f353
 800f2c8:	0800f317 	.word	0x0800f317
 800f2cc:	0800f353 	.word	0x0800f353
 800f2d0:	0800f353 	.word	0x0800f353
 800f2d4:	0800f353 	.word	0x0800f353
 800f2d8:	0800f353 	.word	0x0800f353
 800f2dc:	0800f353 	.word	0x0800f353
 800f2e0:	0800f353 	.word	0x0800f353
 800f2e4:	0800f353 	.word	0x0800f353
 800f2e8:	0800f353 	.word	0x0800f353
 800f2ec:	0800f353 	.word	0x0800f353
 800f2f0:	0800f325 	.word	0x0800f325
 800f2f4:	0800f353 	.word	0x0800f353
 800f2f8:	0800f317 	.word	0x0800f317
 800f2fc:	0800f353 	.word	0x0800f353
 800f300:	0800f353 	.word	0x0800f353
 800f304:	0800f345 	.word	0x0800f345
			{
			  case 'c':
		  		  va_arg(va, int);
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	3304      	adds	r3, #4
 800f30c:	603b      	str	r3, [r7, #0]
				  ++length;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3301      	adds	r3, #1
 800f312:	60fb      	str	r3, [r7, #12]
				  break;
 800f314:	e025      	b.n	800f362 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	330b      	adds	r3, #11
 800f31a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	3304      	adds	r3, #4
 800f320:	603b      	str	r3, [r7, #0]
				  break;
 800f322:	e01e      	b.n	800f362 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	1d1a      	adds	r2, r3, #4
 800f328:	603a      	str	r2, [r7, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800f32e:	e002      	b.n	800f336 <ts_formatlength+0xe2>
			  			  ++length;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	3301      	adds	r3, #1
 800f334:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	1c5a      	adds	r2, r3, #1
 800f33a:	60ba      	str	r2, [r7, #8]
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1f6      	bne.n	800f330 <ts_formatlength+0xdc>
			  			  ++length;
			  	  }
				  break;
 800f342:	e00e      	b.n	800f362 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	3308      	adds	r3, #8
 800f348:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	3304      	adds	r3, #4
 800f34e:	603b      	str	r3, [r7, #0]
				  break;
 800f350:	e007      	b.n	800f362 <ts_formatlength+0x10e>
			  default:
				  ++length;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	3301      	adds	r3, #1
 800f356:	60fb      	str	r3, [r7, #12]
				  break;
 800f358:	bf00      	nop
 800f35a:	e002      	b.n	800f362 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	3301      	adds	r3, #1
 800f360:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	3301      	adds	r3, #1
 800f366:	607b      	str	r3, [r7, #4]
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f47f af79 	bne.w	800f264 <ts_formatlength+0x10>
		{
			++length;
		}
		++fmt;
	}
	return length;
 800f372:	68fb      	ldr	r3, [r7, #12]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800f380:	b40e      	push	{r1, r2, r3}
 800f382:	b580      	push	{r7, lr}
 800f384:	b085      	sub	sp, #20
 800f386:	af00      	add	r7, sp, #0
 800f388:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800f38a:	f107 0320 	add.w	r3, r7, #32
 800f38e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800f390:	68ba      	ldr	r2, [r7, #8]
 800f392:	69f9      	ldr	r1, [r7, #28]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7ff fec5 	bl	800f124 <ts_formatstring>
 800f39a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800f39c:	68fb      	ldr	r3, [r7, #12]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3714      	adds	r7, #20
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f3a8:	b003      	add	sp, #12
 800f3aa:	4770      	bx	lr

0800f3ac <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 800f3ac:	b40e      	push	{r1, r2, r3}
 800f3ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
	int length = 0;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 800f3bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3c0:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 800f3c2:	68b9      	ldr	r1, [r7, #8]
 800f3c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3c6:	f7ff ff45 	bl	800f254 <ts_formatlength>
 800f3ca:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 800f3cc:	466b      	mov	r3, sp
 800f3ce:	461e      	mov	r6, r3
		char buf[length];
 800f3d0:	6979      	ldr	r1, [r7, #20]
 800f3d2:	1e4b      	subs	r3, r1, #1
 800f3d4:	613b      	str	r3, [r7, #16]
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	461a      	mov	r2, r3
 800f3da:	f04f 0300 	mov.w	r3, #0
 800f3de:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800f3e2:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800f3e6:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	f04f 0300 	mov.w	r3, #0
 800f3f2:	00dd      	lsls	r5, r3, #3
 800f3f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f3f8:	00d4      	lsls	r4, r2, #3
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	3307      	adds	r3, #7
 800f3fe:	08db      	lsrs	r3, r3, #3
 800f400:	00db      	lsls	r3, r3, #3
 800f402:	ebad 0d03 	sub.w	sp, sp, r3
 800f406:	466b      	mov	r3, sp
 800f408:	3300      	adds	r3, #0
 800f40a:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 800f40c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f410:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	68ba      	ldr	r2, [r7, #8]
 800f416:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f418:	4618      	mov	r0, r3
 800f41a:	f7ff fe83 	bl	800f124 <ts_formatstring>
 800f41e:	6178      	str	r0, [r7, #20]
		length = _write(stream->_file, buf, length);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f426:	4618      	mov	r0, r3
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	697a      	ldr	r2, [r7, #20]
 800f42c:	4619      	mov	r1, r3
 800f42e:	f000 f929 	bl	800f684 <_write>
 800f432:	6178      	str	r0, [r7, #20]
 800f434:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800f436:	697b      	ldr	r3, [r7, #20]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f442:	b003      	add	sp, #12
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop

0800f448 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800f448:	b40f      	push	{r0, r1, r2, r3}
 800f44a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
	int length = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800f456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f45a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f460:	f7ff fef8 	bl	800f254 <ts_formatlength>
 800f464:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800f466:	466b      	mov	r3, sp
 800f468:	461e      	mov	r6, r3
		char buf[length];
 800f46a:	68f9      	ldr	r1, [r7, #12]
 800f46c:	1e4b      	subs	r3, r1, #1
 800f46e:	60bb      	str	r3, [r7, #8]
 800f470:	460b      	mov	r3, r1
 800f472:	461a      	mov	r2, r3
 800f474:	f04f 0300 	mov.w	r3, #0
 800f478:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800f47c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800f480:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800f484:	460b      	mov	r3, r1
 800f486:	461a      	mov	r2, r3
 800f488:	f04f 0300 	mov.w	r3, #0
 800f48c:	00dd      	lsls	r5, r3, #3
 800f48e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f492:	00d4      	lsls	r4, r2, #3
 800f494:	460b      	mov	r3, r1
 800f496:	3307      	adds	r3, #7
 800f498:	08db      	lsrs	r3, r3, #3
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	ebad 0d03 	sub.w	sp, sp, r3
 800f4a0:	466b      	mov	r3, sp
 800f4a2:	3300      	adds	r3, #0
 800f4a4:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800f4a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4aa:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff fe36 	bl	800f124 <ts_formatstring>
 800f4b8:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	4619      	mov	r1, r3
 800f4c0:	2001      	movs	r0, #1
 800f4c2:	f000 f8df 	bl	800f684 <_write>
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3714      	adds	r7, #20
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4d6:	b004      	add	sp, #16
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop

0800f4dc <fputs>:
**  Returns:  If successful, the result is 0; otherwise, the result is EOF.
**
**===========================================================================
*/
int fputs(const char *s, FILE *fp)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b086      	sub	sp, #24
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 f874 	bl	800f5d4 <strlen>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	613b      	str	r3, [r7, #16]
	int wlen = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	60fb      	str	r3, [r7, #12]
	int res;

	wlen = _write((fp->_file), (char*)s, length);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f4fa:	693a      	ldr	r2, [r7, #16]
 800f4fc:	6879      	ldr	r1, [r7, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 f8c0 	bl	800f684 <_write>
 800f504:	60f8      	str	r0, [r7, #12]
	wlen += _write((fp->_file), "\n", 1);
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f50c:	2201      	movs	r2, #1
 800f50e:	490c      	ldr	r1, [pc, #48]	; (800f540 <fputs+0x64>)
 800f510:	4618      	mov	r0, r3
 800f512:	f000 f8b7 	bl	800f684 <_write>
 800f516:	4602      	mov	r2, r0
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	4413      	add	r3, r2
 800f51c:	60fb      	str	r3, [r7, #12]

	if (wlen == (length+1))
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	1c5a      	adds	r2, r3, #1
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	429a      	cmp	r2, r3
 800f526:	d102      	bne.n	800f52e <fputs+0x52>
	{
		res = 0;
 800f528:	2300      	movs	r3, #0
 800f52a:	617b      	str	r3, [r7, #20]
 800f52c:	e002      	b.n	800f534 <fputs+0x58>
	}
	else
	{
		res = EOF;
 800f52e:	f04f 33ff 	mov.w	r3, #4294967295
 800f532:	617b      	str	r3, [r7, #20]
	}

	return res;
 800f534:	697b      	ldr	r3, [r7, #20]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	0800f6b8 	.word	0x0800f6b8

0800f544 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 f841 	bl	800f5d4 <strlen>
 800f552:	4603      	mov	r3, r0
 800f554:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 800f556:	2300      	movs	r3, #0
 800f558:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 800f55a:	693a      	ldr	r2, [r7, #16]
 800f55c:	6879      	ldr	r1, [r7, #4]
 800f55e:	2001      	movs	r0, #1
 800f560:	f000 f890 	bl	800f684 <_write>
 800f564:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 800f566:	2201      	movs	r2, #1
 800f568:	490b      	ldr	r1, [pc, #44]	; (800f598 <puts+0x54>)
 800f56a:	2001      	movs	r0, #1
 800f56c:	f000 f88a 	bl	800f684 <_write>
 800f570:	4602      	mov	r2, r0
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	4413      	add	r3, r2
 800f576:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	1c5a      	adds	r2, r3, #1
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d102      	bne.n	800f588 <puts+0x44>
	{
		res = 0;
 800f582:	2300      	movs	r3, #0
 800f584:	617b      	str	r3, [r7, #20]
 800f586:	e002      	b.n	800f58e <puts+0x4a>
	}
	else
	{
		res = EOF;
 800f588:	f04f 33ff 	mov.w	r3, #4294967295
 800f58c:	617b      	str	r3, [r7, #20]
	}

	return res;
 800f58e:	697b      	ldr	r3, [r7, #20]
}
 800f590:	4618      	mov	r0, r3
 800f592:	3718      	adds	r7, #24
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	0800f6b8 	.word	0x0800f6b8

0800f59c <fwrite>:
**  Returns:  Number of elements written
**
**===========================================================================
*/
size_t fwrite(const void * buf, size_t size, size_t count, FILE * fp)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
 800f5a8:	603b      	str	r3, [r7, #0]
	return (_write((fp->_file), (char*)buf, size * count) / size);
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	fb02 f303 	mul.w	r3, r2, r3
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	68f9      	ldr	r1, [r7, #12]
 800f5be:	f000 f861 	bl	800f684 <_write>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <strlen>:
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5da:	2a00      	cmp	r2, #0
 800f5dc:	d1fb      	bne.n	800f5d6 <strlen+0x2>
 800f5de:	1a18      	subs	r0, r3, r0
 800f5e0:	3801      	subs	r0, #1
 800f5e2:	4770      	bx	lr

0800f5e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f5e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f61c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f5e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f5ea:	e003      	b.n	800f5f4 <LoopCopyDataInit>

0800f5ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f5ec:	4b0c      	ldr	r3, [pc, #48]	; (800f620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f5ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f5f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f5f2:	3104      	adds	r1, #4

0800f5f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f5f4:	480b      	ldr	r0, [pc, #44]	; (800f624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f5f6:	4b0c      	ldr	r3, [pc, #48]	; (800f628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f5f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f5fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f5fc:	d3f6      	bcc.n	800f5ec <CopyDataInit>
  ldr  r2, =_sbss
 800f5fe:	4a0b      	ldr	r2, [pc, #44]	; (800f62c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f600:	e002      	b.n	800f608 <LoopFillZerobss>

0800f602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f604:	f842 3b04 	str.w	r3, [r2], #4

0800f608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f608:	4b09      	ldr	r3, [pc, #36]	; (800f630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f60a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f60c:	d3f9      	bcc.n	800f602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f60e:	f7ff fc0f 	bl	800ee30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f612:	f000 f811 	bl	800f638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f616:	f7ff fbbf 	bl	800ed98 <main>
  bx  lr    
 800f61a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f61c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800f620:	0800f6c4 	.word	0x0800f6c4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f628:	2000002c 	.word	0x2000002c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800f62c:	2000002c 	.word	0x2000002c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f630:	20000050 	.word	0x20000050

0800f634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f634:	e7fe      	b.n	800f634 <ADC_IRQHandler>
	...

0800f638 <__libc_init_array>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	4b0e      	ldr	r3, [pc, #56]	; (800f674 <__libc_init_array+0x3c>)
 800f63c:	4c0e      	ldr	r4, [pc, #56]	; (800f678 <__libc_init_array+0x40>)
 800f63e:	1ae4      	subs	r4, r4, r3
 800f640:	10a4      	asrs	r4, r4, #2
 800f642:	2500      	movs	r5, #0
 800f644:	461e      	mov	r6, r3
 800f646:	42a5      	cmp	r5, r4
 800f648:	d004      	beq.n	800f654 <__libc_init_array+0x1c>
 800f64a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f64e:	4798      	blx	r3
 800f650:	3501      	adds	r5, #1
 800f652:	e7f8      	b.n	800f646 <__libc_init_array+0xe>
 800f654:	f000 f820 	bl	800f698 <_init>
 800f658:	4c08      	ldr	r4, [pc, #32]	; (800f67c <__libc_init_array+0x44>)
 800f65a:	4b09      	ldr	r3, [pc, #36]	; (800f680 <__libc_init_array+0x48>)
 800f65c:	1ae4      	subs	r4, r4, r3
 800f65e:	10a4      	asrs	r4, r4, #2
 800f660:	2500      	movs	r5, #0
 800f662:	461e      	mov	r6, r3
 800f664:	42a5      	cmp	r5, r4
 800f666:	d004      	beq.n	800f672 <__libc_init_array+0x3a>
 800f668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f66c:	4798      	blx	r3
 800f66e:	3501      	adds	r5, #1
 800f670:	e7f8      	b.n	800f664 <__libc_init_array+0x2c>
 800f672:	bd70      	pop	{r4, r5, r6, pc}
 800f674:	0800f6bc 	.word	0x0800f6bc
 800f678:	0800f6bc 	.word	0x0800f6bc
 800f67c:	0800f6c0 	.word	0x0800f6c0
 800f680:	0800f6bc 	.word	0x0800f6bc

0800f684 <_write>:
 800f684:	4b02      	ldr	r3, [pc, #8]	; (800f690 <_write+0xc>)
 800f686:	2258      	movs	r2, #88	; 0x58
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	f04f 30ff 	mov.w	r0, #4294967295
 800f68e:	4770      	bx	lr
 800f690:	2000004c 	.word	0x2000004c

0800f694 <__EH_FRAME_BEGIN__>:
 800f694:	00000000                                ....

0800f698 <_init>:
 800f698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69a:	bf00      	nop
 800f69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f69e:	bc08      	pop	{r3}
 800f6a0:	469e      	mov	lr, r3
 800f6a2:	4770      	bx	lr

0800f6a4 <_fini>:
 800f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a6:	bf00      	nop
 800f6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6aa:	bc08      	pop	{r3}
 800f6ac:	469e      	mov	lr, r3
 800f6ae:	4770      	bx	lr
